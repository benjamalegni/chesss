{"ast":null,"code":"import Referee from \"../Referee\";\nexport const rookMove = (initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState) => {\n  // vertical movement\n  if (dx === 0) {\n    // iterate all positions between actual position and desired position dy\n    for (let i = 1; i < Math.abs(dy); i++) {\n      // maintain x position and iterate y axis from initial position to desiredPosition multiplying by its direction\n      const passedPosition = {\n        x: initialPosition.x,\n        y: initialPosition.y + i * stepY\n      };\n\n      // if any intermediate tile is occupied, then is invalid\n      if (Referee.tileIsOccupied(passedPosition, boardState)) {\n        return false;\n      }\n    }\n  } // horizontal movement\n  else if (dy === 0) {\n    // iterate all positions between actual position and desired position dx\n    for (let i = 1; i < Math.abs(dx); i++) {\n      // maintain y position and iterate x axis from initial position to desiredPosition multiplying by its direction\n      const passedPosition = {\n        x: initialPosition.x + i * stepX,\n        y: initialPosition.y\n      };\n\n      // if any intermediate tile is occupied, then is invalid\n      if (Referee.tileIsOccupied(passedPosition, boardState)) {\n        return false;\n      }\n    }\n  } else {\n    // if its not vertical nor horizontal movement\n    return false;\n  }\n  // return true (if is not occupied by our team) or (is ocuppied by opponent)\n  return !Referee.tileIsOccupied(desiredPosition, boardState) || Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n};","map":{"version":3,"names":["Referee","rookMove","initialPosition","desiredPosition","team","dx","dy","stepX","stepY","boardState","i","Math","abs","passedPosition","x","y","tileIsOccupied","tileIsOccupiedByOpponent"],"sources":["/home/Outer/Documents/chesss/src/referee/rules/RookRules.ts"],"sourcesContent":["import { Piece, Position, TeamType } from \"../../Constants\";\nimport Referee from \"../Referee\"\n\nexport const rookMove=(initialPosition:Position, desiredPosition: Position, team:TeamType,dx:number, dy:number, stepX:number, stepY:number, boardState:Piece[]):boolean=>{\n            // vertical movement\n            if (dx === 0){\n                // iterate all positions between actual position and desired position dy\n                for (let i = 1; i < Math.abs(dy); i++) {\n                    // maintain x position and iterate y axis from initial position to desiredPosition multiplying by its direction\n                    const passedPosition: Position = {\n                        x: initialPosition.x,\n                        y: initialPosition.y + i * stepY,\n                    };\n\n                    // if any intermediate tile is occupied, then is invalid\n                    if (Referee.tileIsOccupied(passedPosition, boardState)) {\n                        return false;\n                    }\n                }\n            } // horizontal movement\n            else if (dy === 0) {\n                // iterate all positions between actual position and desired position dx\n                for (let i = 1; i < Math.abs(dx); i++) {\n                    // maintain y position and iterate x axis from initial position to desiredPosition multiplying by its direction\n                    const passedPosition: Position = {\n                        x: initialPosition.x + i * stepX,\n                        y: initialPosition.y,\n                    };\n\n                    // if any intermediate tile is occupied, then is invalid\n                    if (Referee.tileIsOccupied(passedPosition, boardState)) {\n                        return false;\n                    }\n                }\n            } else {\n            // if its not vertical nor horizontal movement\n            return false;\n        }\n                // return true (if is not occupied by our team) or (is ocuppied by opponent)\n                return !Referee.tileIsOccupied(desiredPosition, boardState) ||\n                    Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n    }\n"],"mappings":"AACA,OAAOA,OAAO,MAAM,YAAY;AAEhC,OAAO,MAAMC,QAAQ,GAACA,CAACC,eAAwB,EAAEC,eAAyB,EAAEC,IAAa,EAACC,EAAS,EAAEC,EAAS,EAAEC,KAAY,EAAEC,KAAY,EAAEC,UAAkB,KAAW;EAC7J;EACA,IAAIJ,EAAE,KAAK,CAAC,EAAC;IACT;IACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACN,EAAE,CAAC,EAAEI,CAAC,EAAE,EAAE;MACnC;MACA,MAAMG,cAAwB,GAAG;QAC7BC,CAAC,EAAEZ,eAAe,CAACY,CAAC;QACpBC,CAAC,EAAEb,eAAe,CAACa,CAAC,GAAGL,CAAC,GAAGF;MAC/B,CAAC;;MAED;MACA,IAAIR,OAAO,CAACgB,cAAc,CAACH,cAAc,EAAEJ,UAAU,CAAC,EAAE;QACpD,OAAO,KAAK;MAChB;IACJ;EACJ,CAAC,CAAC;EAAA,KACG,IAAIH,EAAE,KAAK,CAAC,EAAE;IACf;IACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACP,EAAE,CAAC,EAAEK,CAAC,EAAE,EAAE;MACnC;MACA,MAAMG,cAAwB,GAAG;QAC7BC,CAAC,EAAEZ,eAAe,CAACY,CAAC,GAAGJ,CAAC,GAAGH,KAAK;QAChCQ,CAAC,EAAEb,eAAe,CAACa;MACvB,CAAC;;MAED;MACA,IAAIf,OAAO,CAACgB,cAAc,CAACH,cAAc,EAAEJ,UAAU,CAAC,EAAE;QACpD,OAAO,KAAK;MAChB;IACJ;EACJ,CAAC,MAAM;IACP;IACA,OAAO,KAAK;EAChB;EACQ;EACA,OAAO,CAACT,OAAO,CAACgB,cAAc,CAACb,eAAe,EAAEM,UAAU,CAAC,IACvDT,OAAO,CAACiB,wBAAwB,CAACd,eAAe,EAAEM,UAAU,EAAEL,IAAI,CAAC;AACnF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}