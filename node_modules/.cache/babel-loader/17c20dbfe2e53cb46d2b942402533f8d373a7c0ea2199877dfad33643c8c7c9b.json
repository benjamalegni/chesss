{"ast":null,"code":"import Referee from\"../Referee\";const knightX=[1,2,2,1,-1,-2,-2,-1];const knightY=[2,1,-1,-2,-2,-1,1,2];export const knightMove=(initialPosition,desiredPosition,team,dx,dy,boardState)=>{// moving mechanics\n// 8 different tiles possible\nfor(let i=0;i<8;i++){if(dx===knightX[i]&&dy===knightY[i]){return!Referee.tileIsOccupied(desiredPosition,boardState)||Referee.tileIsOccupiedByOpponent(desiredPosition,boardState,team);}}return false;};export const GetPossibleKnightMoves=(piece,boardState)=>{const possibleMoves=[];for(let i=0;i<8;i++){if(knightMove(piece.position,{x:piece.position.x+knightX[i],y:piece.position.y+knightY[i]},piece.team,knightX[i],knightY[i],boardState)){possibleMoves.push({x:piece.position.x+knightX[i],y:piece.position.y+knightY[i]});}}return possibleMoves;};","map":{"version":3,"names":["Referee","knightX","knightY","knightMove","initialPosition","desiredPosition","team","dx","dy","boardState","i","tileIsOccupied","tileIsOccupiedByOpponent","GetPossibleKnightMoves","piece","possibleMoves","position","x","y","push"],"sources":["/home/Outer/Documents/chesss/src/referee/rules/KnightRules.ts"],"sourcesContent":["import { Piece, Position, TeamType } from \"../../Constants\";\nimport Referee from \"../Referee\"\n\nconst knightX = [1, 2, 2, 1, -1, -2, -2, -1];\nconst knightY = [2, 1, -1, -2, -2, -1, 1, 2];\n\nexport const knightMove =(initialPosition: Position, desiredPosition: Position, team: TeamType, dx: number, dy: number, boardState: Piece[]):boolean=>{\n        // moving mechanics\n        // 8 different tiles possible\n        for (let i = 0; i < 8; i++) {\n            if ((dx === knightX[i]) && (dy === knightY[i])) {\n                return (!Referee.tileIsOccupied(desiredPosition, boardState) || Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team))\n            }\n        }\n        return false;\n}\n\n\n\nexport const GetPossibleKnightMoves = (piece:Piece, boardState:Piece[]):Position[]=>{\n    const possibleMoves:Position[] = [];\n\n    for(let i=0;i<8;i++){\n        if(knightMove(piece.position, {x:piece.position.x + knightX[i], y:piece.position.y + knightY[i]}, piece.team,knightX[i], knightY[i] , boardState)){\n            possibleMoves.push({x:piece.position.x + knightX[i], y:piece.position.y + knightY[i]});\n        }\n    }\n    return possibleMoves;\n}"],"mappings":"AACA,MAAO,CAAAA,OAAO,KAAM,YAAY,CAEhC,KAAM,CAAAC,OAAO,CAAG,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAC5C,KAAM,CAAAC,OAAO,CAAG,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAE5C,MAAO,MAAM,CAAAC,UAAU,CAAEA,CAACC,eAAyB,CAAEC,eAAyB,CAAEC,IAAc,CAAEC,EAAU,CAAEC,EAAU,CAAEC,UAAmB,GAAW,CAC9I;AACA;AACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAE,CAAE,CACxB,GAAKH,EAAE,GAAKN,OAAO,CAACS,CAAC,CAAC,EAAMF,EAAE,GAAKN,OAAO,CAACQ,CAAC,CAAE,CAAE,CAC5C,MAAQ,CAACV,OAAO,CAACW,cAAc,CAACN,eAAe,CAAEI,UAAU,CAAC,EAAIT,OAAO,CAACY,wBAAwB,CAACP,eAAe,CAAEI,UAAU,CAAEH,IAAI,CAAC,CACvI,CACJ,CACA,MAAO,MAAK,CACpB,CAAC,CAID,MAAO,MAAM,CAAAO,sBAAsB,CAAGA,CAACC,KAAW,CAAEL,UAAkB,GAAc,CAChF,KAAM,CAAAM,aAAwB,CAAG,EAAE,CAEnC,IAAI,GAAI,CAAAL,CAAC,CAAC,CAAC,CAACA,CAAC,CAAC,CAAC,CAACA,CAAC,EAAE,CAAC,CAChB,GAAGP,UAAU,CAACW,KAAK,CAACE,QAAQ,CAAE,CAACC,CAAC,CAACH,KAAK,CAACE,QAAQ,CAACC,CAAC,CAAGhB,OAAO,CAACS,CAAC,CAAC,CAAEQ,CAAC,CAACJ,KAAK,CAACE,QAAQ,CAACE,CAAC,CAAGhB,OAAO,CAACQ,CAAC,CAAC,CAAC,CAAEI,KAAK,CAACR,IAAI,CAACL,OAAO,CAACS,CAAC,CAAC,CAAER,OAAO,CAACQ,CAAC,CAAC,CAAGD,UAAU,CAAC,CAAC,CAC9IM,aAAa,CAACI,IAAI,CAAC,CAACF,CAAC,CAACH,KAAK,CAACE,QAAQ,CAACC,CAAC,CAAGhB,OAAO,CAACS,CAAC,CAAC,CAAEQ,CAAC,CAACJ,KAAK,CAACE,QAAQ,CAACE,CAAC,CAAGhB,OAAO,CAACQ,CAAC,CAAC,CAAC,CAAC,CAC1F,CACJ,CACA,MAAO,CAAAK,aAAa,CACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}