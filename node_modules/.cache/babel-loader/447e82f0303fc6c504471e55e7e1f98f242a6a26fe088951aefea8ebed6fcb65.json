{"ast":null,"code":"import Referee from \"../Referee\";\nexport const bishopMove = (initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState) => {\n  // diagonal movement implies that difference between axis should be equal\n  if (Math.abs(dx) === Math.abs(dy)) {\n    // iterate all positions between actual position and desired position (dx or dy)\n    for (let i = 1; i < Math.abs(dx); i++) {\n      // change passedPosition in each iteration and multiply with step depending on each of the 4 directions is heading\n      const passedPosition = {\n        x: initialPosition.x + i * stepX,\n        y: initialPosition.y + i * stepY\n      };\n\n      // if any intermediate tile is occupied, then is invalid\n      if (Referee.tileIsOccupied(passedPosition, boardState)) {\n        return false;\n      }\n    }\n\n    // return true (if is not occupied by our team) or (is ocuppied by opponent)\n    return !Referee.tileIsOccupied(desiredPosition, boardState) || Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n  }\n  return false;\n};\nexport const GetPossibleBishopMoves = (piece, boardState) => {\n  const possibleMoves = [];\n  const bishopX = [1, 1, -1, -1];\n  const bishopY = [1, -1, 1, -1];\n  for (let i = 0; i < 4; i++) {\n    while (!Referee.tileIsOccupied(piece.position, boardState)) {\n      if (bishopMove(piece.position, {\n        x: piece.position.x + bishopX[i],\n        y: piece.position.y + bishopY[i]\n      }, piece.team, bishopX[i], bishopY[i], 1, 1, boardState)) {\n        possibleMoves.push({\n          x: piece.position.x + bishopX[i],\n          y: piece.position.y + bishopY[i]\n        });\n      }\n      piece.position.x += bishopX[i];\n      piece.position.y += bishopY[i];\n    }\n  }\n  return possibleMoves;\n};\n_c = GetPossibleBishopMoves;\nvar _c;\n$RefreshReg$(_c, \"GetPossibleBishopMoves\");","map":{"version":3,"names":["Referee","bishopMove","initialPosition","desiredPosition","team","dx","dy","stepX","stepY","boardState","Math","abs","i","passedPosition","x","y","tileIsOccupied","tileIsOccupiedByOpponent","GetPossibleBishopMoves","piece","possibleMoves","bishopX","bishopY","position","push","_c","$RefreshReg$"],"sources":["/home/Outer/Documents/chesss/src/referee/rules/BishopRules.ts"],"sourcesContent":["import { Piece, Position, TeamType } from \"../../Constants\";\nimport Referee from \"../Referee\"\n\nexport const bishopMove=(initialPosition:Position, desiredPosition: Position, team:TeamType,dx:number, dy:number, stepX:number, stepY:number, boardState:Piece[]):boolean=>{\n            // diagonal movement implies that difference between axis should be equal\n            if (Math.abs(dx) === Math.abs(dy)) {\n\n                // iterate all positions between actual position and desired position (dx or dy)\n                for (let i = 1; i < Math.abs(dx); i++) {\n                    // change passedPosition in each iteration and multiply with step depending on each of the 4 directions is heading\n                    const passedPosition: Position = {\n                        x: initialPosition.x + i * stepX,\n                        y: initialPosition.y + i * stepY,\n                    };\n\n                    // if any intermediate tile is occupied, then is invalid\n                    if (Referee.tileIsOccupied(passedPosition, boardState)) {\n                        return false;\n                    }\n                }\n\n                // return true (if is not occupied by our team) or (is ocuppied by opponent)\n                return !Referee.tileIsOccupied(desiredPosition, boardState) ||\n                    Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n            }\n        return false;\n        }\n\n\nexport const GetPossibleBishopMoves = (piece:Piece, boardState:Piece[]):Position[]=>{\n    const possibleMoves:Position[] = [];\n\n    const bishopX = [1, 1, -1, -1];\n    const bishopY = [1, -1, 1, -1];\n \n    for(let i=0;i<4;i++){\n        while(!Referee.tileIsOccupied(piece.position, boardState)){\n            if(bishopMove(piece.position, {x:piece.position.x+bishopX[i], y:piece.position.y+bishopY[i]}, piece.team,bishopX[i], bishopY[i], 1, 1, boardState)){\n                possibleMoves.push({x:piece.position.x+bishopX[i], y:piece.position.y+bishopY[i]});\n            }\n            piece.position.x += bishopX[i];\n            piece.position.y += bishopY[i];\n        }\n    }\n    return possibleMoves;\n}"],"mappings":"AACA,OAAOA,OAAO,MAAM,YAAY;AAEhC,OAAO,MAAMC,UAAU,GAACA,CAACC,eAAwB,EAAEC,eAAyB,EAAEC,IAAa,EAACC,EAAS,EAAEC,EAAS,EAAEC,KAAY,EAAEC,KAAY,EAAEC,UAAkB,KAAW;EAC/J;EACA,IAAIC,IAAI,CAACC,GAAG,CAACN,EAAE,CAAC,KAAKK,IAAI,CAACC,GAAG,CAACL,EAAE,CAAC,EAAE;IAE/B;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACC,GAAG,CAACN,EAAE,CAAC,EAAEO,CAAC,EAAE,EAAE;MACnC;MACA,MAAMC,cAAwB,GAAG;QAC7BC,CAAC,EAAEZ,eAAe,CAACY,CAAC,GAAGF,CAAC,GAAGL,KAAK;QAChCQ,CAAC,EAAEb,eAAe,CAACa,CAAC,GAAGH,CAAC,GAAGJ;MAC/B,CAAC;;MAED;MACA,IAAIR,OAAO,CAACgB,cAAc,CAACH,cAAc,EAAEJ,UAAU,CAAC,EAAE;QACpD,OAAO,KAAK;MAChB;IACJ;;IAEA;IACA,OAAO,CAACT,OAAO,CAACgB,cAAc,CAACb,eAAe,EAAEM,UAAU,CAAC,IACvDT,OAAO,CAACiB,wBAAwB,CAACd,eAAe,EAAEM,UAAU,EAAEL,IAAI,CAAC;EAC3E;EACJ,OAAO,KAAK;AACZ,CAAC;AAGT,OAAO,MAAMc,sBAAsB,GAAGA,CAACC,KAAW,EAAEV,UAAkB,KAAc;EAChF,MAAMW,aAAwB,GAAG,EAAE;EAEnC,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9B,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAE9B,KAAI,IAAIV,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,CAAC,EAACA,CAAC,EAAE,EAAC;IAChB,OAAM,CAACZ,OAAO,CAACgB,cAAc,CAACG,KAAK,CAACI,QAAQ,EAAEd,UAAU,CAAC,EAAC;MACtD,IAAGR,UAAU,CAACkB,KAAK,CAACI,QAAQ,EAAE;QAACT,CAAC,EAACK,KAAK,CAACI,QAAQ,CAACT,CAAC,GAACO,OAAO,CAACT,CAAC,CAAC;QAAEG,CAAC,EAACI,KAAK,CAACI,QAAQ,CAACR,CAAC,GAACO,OAAO,CAACV,CAAC;MAAC,CAAC,EAAEO,KAAK,CAACf,IAAI,EAACiB,OAAO,CAACT,CAAC,CAAC,EAAEU,OAAO,CAACV,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEH,UAAU,CAAC,EAAC;QAC/IW,aAAa,CAACI,IAAI,CAAC;UAACV,CAAC,EAACK,KAAK,CAACI,QAAQ,CAACT,CAAC,GAACO,OAAO,CAACT,CAAC,CAAC;UAAEG,CAAC,EAACI,KAAK,CAACI,QAAQ,CAACR,CAAC,GAACO,OAAO,CAACV,CAAC;QAAC,CAAC,CAAC;MACtF;MACAO,KAAK,CAACI,QAAQ,CAACT,CAAC,IAAIO,OAAO,CAACT,CAAC,CAAC;MAC9BO,KAAK,CAACI,QAAQ,CAACR,CAAC,IAAIO,OAAO,CAACV,CAAC,CAAC;IAClC;EACJ;EACA,OAAOQ,aAAa;AACxB,CAAC;AAAAK,EAAA,GAhBYP,sBAAsB;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}