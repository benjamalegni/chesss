{"ast":null,"code":"var _jsxFileName = \"/home/Outer/Documents/chesss/src/components/Chessboard/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport Referee from '../../referee/Referee';\nimport { useEffect, useRef, useState } from 'react';\nimport { XAXIS, YAXIS, TeamType, PieceType, initialBoardState, GRIDSIZE, samePosition } from '../../Constants';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chessboard({\n  online\n}) {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [grabPosition, setGrabPosition] = useState({\n    x: -1,\n    y: -1\n  });\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const [promotionPawn, setPromotionPawn] = useState();\n  const modalRef = useRef(null);\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [lastMove, setLastMove] = useState(null);\n  const [awaitingPromotion, setAwaitingPromotion] = useState(false);\n  function getAllowedTeamForMe() {\n    if (!online || online.status !== 'playing' || !online.myColor) {\n      return null;\n    }\n    return online.myColor === 'white' ? TeamType.OUR : TeamType.OPPONENT;\n  }\n  function isMyTurn() {\n    if (!online || online.status !== 'playing' || !online.myColor) {\n      return true; // offline mode: always allowed\n    }\n    return online.myColor === currentTurn;\n  }\n  useEffect(() => {\n    if (online && online.status === 'playing') {\n      setCurrentTurn('white');\n    }\n  }, [online]);\n  useEffect(() => {\n    const s = online === null || online === void 0 ? void 0 : online.socket;\n    if (!s) return;\n    const onMove = msg => {\n      try {\n        if (msg.type === 'move') {\n          // compatibility if server sends type wrapper\n        }\n        const from = msg.from;\n        const to = msg.to;\n        const promotion = msg.promotionType;\n        setPieces(currentPieces => {\n          let updated = currentPieces;\n          const movingPiece = updated.find(p => samePosition(p.position, from));\n          if (!movingPiece) {\n            return updated;\n          }\n          const isEnPassantMove = Referee.isEnPassantMove(from, to, movingPiece.type, movingPiece.team, updated);\n          const pawnDirecion = movingPiece.team === TeamType.OUR ? 1 : -1;\n          if (isEnPassantMove) {\n            updated = updated.reduce((results, piece) => {\n              if (samePosition(piece.position, from)) {\n                piece.enPassant = false;\n                piece.position.x = to.x;\n                piece.position.y = to.y;\n                results.push(piece);\n              } else if (!samePosition(piece.position, {\n                x: to.x,\n                y: to.y - pawnDirecion\n              })) {\n                if (piece.type === PieceType.PAWN) {\n                  piece.enPassant = false;\n                }\n                results.push(piece);\n              }\n              return results;\n            }, []);\n          } else {\n            updated = updated.reduce((results, piece) => {\n              if (samePosition(piece.position, from)) {\n                piece.enPassant = Math.abs(from.y - to.y) === 2 && piece.type === PieceType.PAWN;\n                piece.position.x = to.x;\n                piece.position.y = to.y;\n                results.push(piece);\n              } else if (!samePosition(piece.position, to)) {\n                if (piece.type === PieceType.PAWN) {\n                  piece.enPassant = false;\n                }\n                results.push(piece);\n              }\n              return results;\n            }, []);\n          }\n          if (promotion !== undefined) {\n            const promoted = updated.find(p => samePosition(p.position, to));\n            if (promoted) {\n              promoted.type = promotion;\n              const teamType = promoted.team === TeamType.OUR ? \"w\" : \"b\";\n              let image = \"\";\n              switch (promotion) {\n                case PieceType.ROOK:\n                  image = \"rook\";\n                  break;\n                case PieceType.BISHOP:\n                  image = \"bishop\";\n                  break;\n                case PieceType.KNIGHT:\n                  image = \"knight\";\n                  break;\n                case PieceType.QUEEN:\n                  image = \"queen\";\n                  break;\n              }\n              if (image) {\n                promoted.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n              }\n            }\n          }\n          return updated;\n        });\n        setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n      } catch (_e) {\n        // ignore\n      }\n    };\n    s.on('move', onMove);\n    return () => {\n      s.off('move', onMove);\n    };\n  }, [online === null || online === void 0 ? void 0 : online.socket, online === null || online === void 0 ? void 0 : online.roomId]);\n  function updateValidMoves() {\n    setPieces(currentPieces => {\n      return currentPieces.map(p => {\n        p.possibleMoves = referee.getValidMoves(p, currentPieces);\n        return p;\n      });\n    });\n  }\n  function pickTileFromCursor(clientX, clientY) {\n    const chessboard = chessboardRef.current;\n    if (!chessboard) return {\n      x: -1,\n      y: -1\n    };\n    const rect = chessboard.getBoundingClientRect();\n    const relX = clientX - rect.left;\n    const relY = clientY - rect.top;\n    const x = Math.floor(relX / GRIDSIZE);\n    const y = Math.abs(Math.ceil((relY - rect.height) / GRIDSIZE)); // invert axis\n    return {\n      x,\n      y\n    };\n  }\n  function grabPiece(e) {\n    updateValidMoves();\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      const {\n        x: grabX,\n        y: grabY\n      } = pickTileFromCursor(e.clientX, e.clientY);\n      const pieceAtTile = pieces.find(p => samePosition(p.position, {\n        x: grabX,\n        y: grabY\n      }));\n\n      // Online restrictions\n      if (online && online.status === 'playing') {\n        const myTeam = getAllowedTeamForMe();\n        if (!isMyTurn() || myTeam === null || !pieceAtTile || pieceAtTile.team !== myTeam) {\n          return; // can't grab\n        }\n      }\n      setGrabPosition({\n        x: grabX,\n        y: grabY\n      });\n      const x = e.clientX - GRIDSIZE / 2;\n      const y = e.clientY - GRIDSIZE / 2;\n      element.style.position = \"absolute\";\n      // position relative to the chessboard container\n      const boardRect = chessboard.getBoundingClientRect();\n      element.style.left = `${x - boardRect.left}px`;\n      element.style.top = `${y - boardRect.top}px`;\n      element.style.zIndex = '1000';\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = e.clientX - GRIDSIZE / 2;\n      const y = e.clientY - GRIDSIZE / 2;\n      const rect = chessboard.getBoundingClientRect();\n      const minX = 0;\n      const minY = 0;\n      const maxX = rect.width - GRIDSIZE;\n      const maxY = rect.height - GRIDSIZE;\n      activePiece.style.position = \"absolute\";\n\n      // x axis limits\n      if (x - rect.left < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x - rect.left > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x - rect.left}px`;\n      }\n\n      // y axis limits\n      if (y - rect.top < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y - rect.top > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y - rect.top}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const {\n        x,\n        y\n      } = pickTileFromCursor(e.clientX, e.clientY);\n      const currentPiece = pieces.find(p => samePosition(p.position, grabPosition));\n      if (currentPiece) {\n        const validMove = referee.isValidMove(grabPosition, {\n          x,\n          y\n        }, currentPiece.type, currentPiece.team, pieces);\n        const isEnPassantMove = Referee.isEnPassantMove(grabPosition, {\n          x,\n          y\n        }, currentPiece.type, currentPiece.team, pieces);\n        const pawnDirecion = currentPiece.team === TeamType.OUR ? 1 : -1;\n        if (online && online.status === 'playing') {\n          const myTeam = getAllowedTeamForMe();\n          if (!isMyTurn() || myTeam === null || currentPiece.team !== myTeam) {\n            // Reset piece position and bail\n            activePiece.style.position = 'relative';\n            activePiece.style.removeProperty(\"top\");\n            activePiece.style.removeProperty(\"left\");\n            activePiece.style.removeProperty(\"z-index\");\n            setActivePiece(null);\n            return;\n          }\n        }\n        if (isEnPassantMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (samePosition(piece.position, grabPosition)) {\n              piece.enPassant = false;\n              piece.position.x = x;\n              piece.position.y = y;\n              results.push(piece);\n            } else if (!samePosition(piece.position, {\n              x,\n              y: y - pawnDirecion\n            })) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n          setLastMove({\n            from: grabPosition,\n            to: {\n              x,\n              y\n            }\n          });\n          if (!online || online.status !== 'playing') {\n            // offline toggle turn for consistency\n            setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n          } else {\n            var _online$socket;\n            // send immediately (no promotion possible on en passant)\n            (_online$socket = online.socket) === null || _online$socket === void 0 ? void 0 : _online$socket.emit('move', {\n              roomId: online.roomId,\n              from: grabPosition,\n              to: {\n                x,\n                y\n              }\n            });\n            setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n          }\n        } else if (validMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (samePosition(piece.position, grabPosition)) {\n              // SPECIAL MOVE\n              piece.enPassant = Math.abs(grabPosition.y - y) === 2 && piece.type === PieceType.PAWN;\n              piece.position.x = x;\n              piece.position.y = y;\n\n              // pawn promotion row\n              let promotionRow = piece.team === TeamType.OUR ? 7 : 0;\n              if (y === promotionRow && piece.type === PieceType.PAWN) {\n                var _modalRef$current;\n                //make promotion\n                (_modalRef$current = modalRef.current) === null || _modalRef$current === void 0 ? void 0 : _modalRef$current.classList.remove(\"hidden\");\n                setPromotionPawn(piece);\n                setAwaitingPromotion(true);\n              }\n              results.push(piece);\n            } else if (!samePosition(piece.position, {\n              x,\n              y\n            })) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n          setLastMove({\n            from: grabPosition,\n            to: {\n              x,\n              y\n            }\n          });\n          if (!awaitingPromotion) {\n            if (!online || online.status !== 'playing') {\n              setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n            } else {\n              var _online$socket2;\n              // no promotion: send immediately\n              (_online$socket2 = online.socket) === null || _online$socket2 === void 0 ? void 0 : _online$socket2.emit('move', {\n                roomId: online.roomId,\n                from: grabPosition,\n                to: {\n                  x,\n                  y\n                }\n              });\n              setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n            }\n          }\n        } else {\n          //reset piece position\n          activePiece.style.position = 'relative';\n          activePiece.style.removeProperty(\"top\");\n          activePiece.style.removeProperty(\"left\");\n          activePiece.style.removeProperty(\"z-index\");\n        }\n      }\n      setActivePiece(null);\n    }\n  }\n  function promotePawn(pieceType) {\n    var _modalRef$current2;\n    if (promotionPawn === undefined) {\n      return;\n    }\n    const updatedPieces = pieces.reduce((results, piece) => {\n      if (samePosition(piece.position, promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.position)) {\n        piece.type = pieceType;\n        const teamType = piece.team === TeamType.OUR ? \"w\" : \"b\";\n        let image = \"\";\n        switch (pieceType) {\n          case PieceType.ROOK:\n            {\n              image = \"rook\";\n              break;\n            }\n          case PieceType.BISHOP:\n            {\n              image = \"bishop\";\n              break;\n            }\n          case PieceType.KNIGHT:\n            {\n              image = \"knight\";\n              break;\n            }\n          case PieceType.QUEEN:\n            {\n              image = \"queen\";\n              break;\n            }\n        }\n        piece.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n      }\n      results.push(piece);\n      return results;\n    }, []);\n    setPieces(updatedPieces);\n    (_modalRef$current2 = modalRef.current) === null || _modalRef$current2 === void 0 ? void 0 : _modalRef$current2.classList.add(\"hidden\");\n    setAwaitingPromotion(false);\n    if (online && online.status === 'playing' && lastMove) {\n      var _online$socket3;\n      (_online$socket3 = online.socket) === null || _online$socket3 === void 0 ? void 0 : _online$socket3.emit('move', {\n        roomId: online.roomId,\n        from: lastMove.from,\n        to: lastMove.to,\n        promotionType: pieceType\n      });\n      setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n    } else if (!online || online.status !== 'playing') {\n      setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n    }\n  }\n  function promotionTeamType() {\n    return (promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.team) === TeamType.OUR ? \"w\" : \"b\";\n  }\n  let board = [];\n  for (let y = YAXIS.length - 1; y >= 0; y--) {\n    for (let x = 0; x < XAXIS.length; x++) {\n      // check whether the sum of numbers x,y is even to draw each tile\n      const isEven = (x + y + 2) % 2 === 0;\n      let img = undefined;\n      pieces.forEach(p => {\n        if (samePosition(p.position, {\n          x: x,\n          y: y\n        })) {\n          img = p.image;\n        }\n      });\n      let currentPiece = pieces.find(p => samePosition(p.position, grabPosition));\n      let highlight = currentPiece !== null && currentPiece !== void 0 && currentPiece.possibleMoves ? currentPiece.possibleMoves.some(p => samePosition(p, {\n        x: x,\n        y: y\n      })) : false;\n      board.push(/*#__PURE__*/_jsxDEV(Tile, {\n        isEven: isEven,\n        image: img,\n        highlight: highlight\n      }, `${x},${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 6\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pawn-promotion-modal\",\n      className: \"hidden\",\n      ref: modalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.ROOK),\n          src: `${process.env.PUBLIC_URL}/assets/images/rook_${promotionTeamType()}.svg`,\n          alt: \"promote rook\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.BISHOP),\n          src: `${process.env.PUBLIC_URL}/assets/images/bishop_${promotionTeamType()}.svg`,\n          alt: \"promote bishop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.KNIGHT),\n          src: `${process.env.PUBLIC_URL}/assets/images/knight_${promotionTeamType()}.svg`,\n          alt: \"promote knight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.QUEEN),\n          src: `${process.env.PUBLIC_URL}/assets/images/queen_${promotionTeamType()}.svg`,\n          alt: \"promote queen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseMove: e => movePiece(e),\n      onMouseDown: e => grabPiece(e),\n      onMouseUp: e => dropPiece(e),\n      id: \"chessboard\",\n      ref: chessboardRef,\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n_s(Chessboard, \"hJSiDRkDxOl2eBQzjUVyDmph6CE=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Tile","Referee","useEffect","useRef","useState","XAXIS","YAXIS","TeamType","PieceType","initialBoardState","GRIDSIZE","samePosition","jsxDEV","_jsxDEV","Fragment","_Fragment","Chessboard","online","_s","activePiece","setActivePiece","grabPosition","setGrabPosition","x","y","pieces","setPieces","chessboardRef","referee","promotionPawn","setPromotionPawn","modalRef","currentTurn","setCurrentTurn","lastMove","setLastMove","awaitingPromotion","setAwaitingPromotion","getAllowedTeamForMe","status","myColor","OUR","OPPONENT","isMyTurn","s","socket","onMove","msg","type","from","to","promotion","promotionType","currentPieces","updated","movingPiece","find","p","position","isEnPassantMove","team","pawnDirecion","reduce","results","piece","enPassant","push","PAWN","Math","abs","undefined","promoted","teamType","image","ROOK","BISHOP","KNIGHT","QUEEN","process","env","PUBLIC_URL","prev","_e","on","off","roomId","updateValidMoves","map","possibleMoves","getValidMoves","pickTileFromCursor","clientX","clientY","chessboard","current","rect","getBoundingClientRect","relX","left","relY","top","floor","ceil","height","grabPiece","e","element","target","classList","contains","grabX","grabY","pieceAtTile","myTeam","style","boardRect","zIndex","movePiece","minX","minY","maxX","width","maxY","dropPiece","currentPiece","validMove","isValidMove","removeProperty","updatedPieces","_online$socket","emit","promotionRow","_modalRef$current","remove","_online$socket2","promotePawn","pieceType","_modalRef$current2","add","_online$socket3","promotionTeamType","board","length","isEven","img","forEach","highlight","some","fileName","_jsxFileName","lineNumber","columnNumber","children","id","className","ref","onClick","src","alt","onMouseMove","onMouseDown","onMouseUp","_c","$RefreshReg$"],"sources":["/home/Outer/Documents/chesss/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Tile from '../Tile/Tile'\nimport Referee from '../../referee/Referee'\nimport { useEffect, useRef, useState } from 'react';\nimport { XAXIS, YAXIS, Piece, TeamType, PieceType, initialBoardState, Position, GRIDSIZE, samePosition } from '../../Constants';\nimport type { Socket } from 'socket.io-client';\n\ninterface OnlineProps{\n\tsocket: Socket | null;\n\tstatus: 'offline' | 'waiting' | 'playing';\n\troomId?: string;\n\tmyColor?: 'white' | 'black';\n}\n\nexport default function Chessboard({ online }: { online?: OnlineProps }){\nconst [activePiece, setActivePiece] = useState<HTMLElement | null>(null)\nconst [grabPosition, setGrabPosition] = useState<Position>({x:-1, y:-1});\nconst [pieces, setPieces] = useState<Piece[]>(initialBoardState);\nconst chessboardRef = useRef<HTMLDivElement>(null);\nconst referee = new Referee();\nconst [promotionPawn, setPromotionPawn] = useState<Piece>();\nconst modalRef = useRef<HTMLDivElement>(null);\nconst [currentTurn, setCurrentTurn] = useState<'white'|'black'>('white');\nconst [lastMove, setLastMove] = useState<{from: Position, to: Position} | null>(null);\nconst [awaitingPromotion, setAwaitingPromotion] = useState<boolean>(false);\n\nfunction getAllowedTeamForMe(): TeamType | null{\n\tif(!online || online.status !== 'playing' || !online.myColor){\n\t\treturn null;\n\t}\n\treturn online.myColor === 'white' ? TeamType.OUR : TeamType.OPPONENT;\n}\n\nfunction isMyTurn(): boolean{\n\tif(!online || online.status !== 'playing' || !online.myColor){\n\t\treturn true; // offline mode: always allowed\n\t}\n\treturn online.myColor === currentTurn;\n}\n\nuseEffect(()=>{\n\tif(online && online.status === 'playing'){\n\t\tsetCurrentTurn('white');\n\t}\n}, [online]);\n\nuseEffect(()=>{\n\tconst s = online?.socket;\n\tif(!s) return;\n\tconst onMove = (msg: any) => {\n\t\ttry{\n\t\t\tif(msg.type === 'move'){\n\t\t\t\t// compatibility if server sends type wrapper\n\t\t\t}\n\t\t\tconst from: Position = msg.from;\n\t\t\tconst to: Position = msg.to;\n\t\t\tconst promotion: PieceType | undefined = msg.promotionType;\n\t\t\tsetPieces((currentPieces)=>{\n\t\t\t\tlet updated = currentPieces;\n\t\t\t\tconst movingPiece = updated.find(p=> samePosition(p.position, from));\n\t\t\t\tif(!movingPiece){\n\t\t\t\t\treturn updated;\n\t\t\t\t}\n\t\t\t\tconst isEnPassantMove = Referee.isEnPassantMove(from, to, movingPiece.type, movingPiece.team, updated);\n\t\t\t\tconst pawnDirecion = movingPiece.team === TeamType.OUR?1:-1;\n\t\t\t\tif(isEnPassantMove){\n\t\t\t\t\tupdated = updated.reduce((results, piece)=>{\n\t\t\t\t\t\tif(samePosition(piece.position, from)){\n\t\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\t\tpiece.position.x=to.x;\n\t\t\t\t\t\t\tpiece.position.y=to.y;\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t}else if(!samePosition(piece.position, {x: to.x, y: to.y - pawnDirecion})){\n\t\t\t\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}, [] as Piece[]);\n\t\t\t\t} else {\n\t\t\t\t\tupdated = updated.reduce((results, piece)=>{\n\t\t\t\t\t\tif(samePosition(piece.position, from)){\n\t\t\t\t\t\t\tpiece.enPassant = Math.abs(from.y - to.y)===2 && (piece.type===PieceType.PAWN);\n\t\t\t\t\t\t\tpiece.position.x = to.x;\n\t\t\t\t\t\t\tpiece.position.y = to.y;\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t} else if(!samePosition(piece.position, to)){\n\t\t\t\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}, [] as Piece[]);\n\t\t\t\t}\n\t\t\t\tif(promotion !== undefined){\n\t\t\t\t\tconst promoted = updated.find(p=> samePosition(p.position, to));\n\t\t\t\t\tif(promoted){\n\t\t\t\t\t\tpromoted.type = promotion;\n\t\t\t\t\t\tconst teamType = (promoted.team === TeamType.OUR)?\"w\":\"b\";\n\t\t\t\t\t\tlet image = \"\";\n\t\t\t\t\t\tswitch(promotion){\n\t\t\t\t\t\t\tcase PieceType.ROOK: image = \"rook\"; break;\n\t\t\t\t\t\t\tcase PieceType.BISHOP: image = \"bishop\"; break;\n\t\t\t\t\t\t\tcase PieceType.KNIGHT: image = \"knight\"; break;\n\t\t\t\t\t\t\tcase PieceType.QUEEN: image = \"queen\"; break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(image){\n\t\t\t\t\t\t\tpromoted.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn updated;\n\t\t\t});\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t}catch(_e){\n\t\t\t// ignore\n\t\t}\n\t};\n\ts.on('move', onMove);\n\treturn () => {\n\t\ts.off('move', onMove);\n\t};\n}, [online?.socket, online?.roomId]);\n\nfunction updateValidMoves(){\n\tsetPieces((currentPieces) => {\n\t\treturn currentPieces.map(p=>{\n\t\t\tp.possibleMoves = referee.getValidMoves(p, currentPieces);\n\t\t\treturn p;\n\n\t\t});\n\t});\n}\n\nfunction pickTileFromCursor(clientX: number, clientY: number){\n\tconst chessboard = chessboardRef.current;\n\tif(!chessboard) return { x: -1, y: -1 };\n\tconst rect = chessboard.getBoundingClientRect();\n\tconst relX = clientX - rect.left;\n\tconst relY = clientY - rect.top;\n\tconst x = Math.floor(relX / GRIDSIZE);\n\tconst y = Math.abs(Math.ceil((relY - rect.height)/GRIDSIZE)); // invert axis\n\treturn { x, y };\n}\n\nfunction grabPiece(e: React.MouseEvent){\n\tupdateValidMoves();\n\n\tconst chessboard = chessboardRef.current;\n\tconst element = e.target as HTMLElement;\n\n\tif(element.classList.contains(\"chess-piece\") && chessboard){\n\t\tconst { x: grabX, y: grabY } = pickTileFromCursor(e.clientX, e.clientY);\n\t\tconst pieceAtTile = pieces.find(p => samePosition(p.position, {x: grabX, y: grabY}));\n\n\t\t// Online restrictions\n\t\tif(online && online.status === 'playing'){\n\t\t\tconst myTeam = getAllowedTeamForMe();\n\t\t\tif(!isMyTurn() || myTeam === null || !pieceAtTile || pieceAtTile.team !== myTeam){\n\t\t\t\treturn; // can't grab\n\t\t\t}\n\t\t}\n\n\t\tsetGrabPosition({x:grabX, y:grabY})\n\n\t\tconst x = e.clientX - GRIDSIZE/2;\n\t\tconst y = e.clientY - GRIDSIZE/2;\n\t\telement.style.position=\"absolute\";\n\t\t// position relative to the chessboard container\n\t\tconst boardRect = chessboard.getBoundingClientRect();\n\t\telement.style.left = `${x - boardRect.left}px`;\n\t\telement.style.top = `${y - boardRect.top}px`;\n\t\telement.style.zIndex = '1000';\n\n\t\tsetActivePiece(element);\n\t}\n}\n\nfunction movePiece(e: React.MouseEvent){\n\tconst chessboard = chessboardRef.current;\n\tif(activePiece && chessboard){\n\t\tconst x = e.clientX - GRIDSIZE/2;\n\t\tconst y = e.clientY - GRIDSIZE/2;\n\n\t\tconst rect = chessboard.getBoundingClientRect();\n\t\tconst minX = 0;\n\t\tconst minY = 0;\n\t\tconst maxX = rect.width - GRIDSIZE;\n\t\tconst maxY = rect.height - GRIDSIZE;\n\n\t\tactivePiece.style.position=\"absolute\";\n\n\t\t// x axis limits\n\t\tif((x - rect.left) < minX){\n\t\t\tactivePiece.style.left = `${minX}px`;\n\t\t} else if((x - rect.left) > maxX){\n\t\t\tactivePiece.style.left = `${maxX}px`;\n\t\t} else{\n\t\t\tactivePiece.style.left = `${x - rect.left}px`;\n\t\t}\n\n\t\t// y axis limits\n\t\tif((y - rect.top) < minY){\n\t\t\tactivePiece.style.top = `${minY}px`;\n\t\t} else if((y - rect.top) > maxY){\n\t\t\tactivePiece.style.top = `${maxY}px`;\n\t\t} else{\n\t\t\tactivePiece.style.top = `${y - rect.top}px`;\n\t\t}\n\t\t\n\t}\n}\n\nfunction dropPiece(e: React.MouseEvent){\n\tconst chessboard = chessboardRef.current;\n\tif(activePiece && chessboard){\n\t\tconst { x, y } = pickTileFromCursor(e.clientX, e.clientY);\n\n\t\tconst currentPiece = pieces.find(\n\t\t\t(p)=> samePosition(p.position, grabPosition));\n\n\t\tif(currentPiece){\n\t\t\tconst validMove = referee.isValidMove(grabPosition, {x,y}, currentPiece.type,currentPiece.team, pieces);\n\t\t\tconst isEnPassantMove = Referee.isEnPassantMove(grabPosition, {x,y},currentPiece.type,currentPiece.team, pieces)\n\t\t\tconst pawnDirecion = currentPiece.team === TeamType.OUR?1:-1;\n\n\t\t\tif(online && online.status === 'playing'){\n\t\t\t\tconst myTeam = getAllowedTeamForMe();\n\t\t\t\tif(!isMyTurn() || myTeam === null || currentPiece.team !== myTeam){\n\t\t\t\t\t// Reset piece position and bail\n\t\t\t\t\tactivePiece.style.position= 'relative';\n\t\t\t\t\tactivePiece.style.removeProperty(\"top\");\n\t\t\t\t\tactivePiece.style.removeProperty(\"left\");\n\t\t\t\t\tactivePiece.style.removeProperty(\"z-index\");\n\t\t\t\t\tsetActivePiece(null);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(isEnPassantMove){\n\t\t\t\tconst updatedPieces = pieces.reduce((results, piece)=>{\n\t\t\t\t\tif(samePosition(piece.position, grabPosition)){\n\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\tpiece.position.x=x;\n\t\t\t\t\t\tpiece.position.y=y;\n\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t}else if(!samePosition(piece.position, {x, y: y-pawnDirecion})){\n\t\t\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t}\t\t\t\t\t\n\n\n\t\t\t\t\treturn results;\n\t\t\t\t}, [] as Piece[])\n\t\t\t\tsetPieces(updatedPieces);\n\t\t\t\tsetLastMove({from: grabPosition, to: {x, y}});\n\t\t\t\tif(!online || online.status !== 'playing'){\n\t\t\t\t\t// offline toggle turn for consistency\n\t\t\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t\t\t} else {\n\t\t\t\t\t// send immediately (no promotion possible on en passant)\n\t\t\t\t\tonline.socket?.emit('move', {\n\t\t\t\t\t\troomId: online.roomId,\n\t\t\t\t\t\tfrom: grabPosition,\n\t\t\t\t\t\tto: {x, y}\n\t\t\t\t\t});\n\t\t\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t\t\t}\n\t\t\t}else if(validMove){\n\t\t\t\tconst updatedPieces = pieces.reduce((results,piece)=>{\n\t\t\t\t\tif(samePosition(piece.position, grabPosition)){\n\t\t\t\t\t\t// SPECIAL MOVE\n\t\t\t\t\t\tpiece.enPassant = Math.abs(grabPosition.y-y)===2 &&(piece.type===PieceType.PAWN)\n\t\t\t\t\t\tpiece.position.x=x;\n\t\t\t\t\t\tpiece.position.y=y;\n\n\t\t\t\t\t\t// pawn promotion row\n\t\t\t\t\t\tlet promotionRow = piece.team === TeamType.OUR ? 7:0;\n\t\t\t\t\t\tif(y===promotionRow && piece.type === PieceType.PAWN){\n\t\t\t\t\t\t\t//make promotion\n\t\t\t\t\t\t\tmodalRef.current?.classList.remove(\"hidden\")\n\t\t\t\t\t\t\tsetPromotionPawn(piece);\n\t\t\t\t\t\t\tsetAwaitingPromotion(true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t}else if(!(samePosition(piece.position, {x,y}))){\n\t\t\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t}\t\t\t\t  \n\n\t\t\t\t\treturn results;\n\t\t\t\t}, [] as Piece[])\n\t\t\t\tsetPieces(updatedPieces);\n\t\t\t\tsetLastMove({from: grabPosition, to: {x, y}});\n\t\t\t\tif(!(awaitingPromotion)){\n\t\t\t\t\tif(!online || online.status !== 'playing'){\n\t\t\t\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// no promotion: send immediately\n\t\t\t\t\t\tonline.socket?.emit('move', {\n\t\t\t\t\t\t\troomId: online.roomId,\n\t\t\t\t\t\t\tfrom: grabPosition,\n\t\t\t\t\t\t\tto: {x, y}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t//reset piece position\n\t\t\t\t\tactivePiece.style.position= 'relative';\n\t\t\t\t\tactivePiece.style.removeProperty(\"top\");\n\t\t\t\t\tactivePiece.style.removeProperty(\"left\");\n\t\t\t\t\tactivePiece.style.removeProperty(\"z-index\");\n\n\t\t\t}\n\t\t}\n\n\t\t\n\t\tsetActivePiece(null);\n\t}\n}\n\n\tfunction promotePawn(pieceType: PieceType){\n\t\tif(promotionPawn===undefined){\n\t\t\treturn;\n\t\t}\n\t\tconst updatedPieces = pieces.reduce((results, piece) =>{\n\n\t\t\tif(samePosition(piece.position, promotionPawn?.position)){\n\t\t\t\tpiece.type = pieceType;\n\t\t\t\tconst teamType = (piece.team === TeamType.OUR)?\"w\":\"b\";\n\t\t\t\tlet image = \"\";\n\t\t\t\tswitch(pieceType){\n\t\t\t\t\tcase PieceType.ROOK:{\n\t\t\t\t\t\timage = \"rook\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase PieceType.BISHOP:{\n\t\t\t\t\t\timage = \"bishop\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase PieceType.KNIGHT:{\n\t\t\t\t\t\timage = \"knight\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase PieceType.QUEEN:{\n\t\t\t\t\t\timage = \"queen\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpiece.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n\t\t\t}\n\n\t\t\tresults.push(piece);\n\t\t\treturn results;\n\t\t}, [] as Piece[])\n\t\tsetPieces(updatedPieces);\n\t\tmodalRef.current?.classList.add(\"hidden\");\n\t\tsetAwaitingPromotion(false);\n\t\tif(online && online.status === 'playing' && lastMove){\n\t\t\tonline.socket?.emit('move', {\n\t\t\t\troomId: online.roomId,\n\t\t\t\tfrom: lastMove.from,\n\t\t\t\tto: lastMove.to,\n\t\t\t\tpromotionType: pieceType\n\t\t\t});\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t} else if(!online || online.status !== 'playing'){\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t}\n\t}\n\n\n\tfunction promotionTeamType(){\n\t\treturn (promotionPawn?.team === TeamType.OUR)?\"w\":\"b\";\n\t}\n\n\tlet board = [];\n\n\tfor(let y= YAXIS.length-1;y>=0;y--){\n\t\tfor(let x=0;x<XAXIS.length;x++){\n\n\t\t\t// check whether the sum of numbers x,y is even to draw each tile\n\t\t\tconst isEven = (x+y+2)%2===0;\n\t\t\tlet img = undefined;\n\n\t\t\tpieces.forEach(p=> {\n\t\t\t\tif(samePosition(p.position, {x:x, y:y})){\n\t\t\t\t\timg=p.image\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tlet currentPiece = pieces.find(p=> samePosition(p.position,grabPosition));\n\t\t\tlet highlight = (currentPiece?.possibleMoves) ? currentPiece.possibleMoves.some(p=> samePosition(p, {x:x , y:y})): false;\n\t\t\t\n\t\t\tboard.push(\n\t\t\t\t\t<Tile key={`${x},${y}`} isEven={isEven} image={img} highlight={highlight}/> \n\t\t\t)\n\t\t}\n\t}       \n\n\n\treturn(\n\t\t<>\n\t\t<div id=\"pawn-promotion-modal\" className=\"hidden\" ref={modalRef}>\n\t\t\t<div className=\"modal-body\">\n\n\t\t\t<img onClick={()=> promotePawn(PieceType.ROOK)} src={`${process.env.PUBLIC_URL}/assets/images/rook_${promotionTeamType()}.svg`} alt=\"promote rook\"/>\n\t\t\t<img onClick={()=> promotePawn(PieceType.BISHOP)} src={`${process.env.PUBLIC_URL}/assets/images/bishop_${promotionTeamType()}.svg`} alt=\"promote bishop\"/>\n\t\t\t<img onClick={()=> promotePawn(PieceType.KNIGHT)} src={`${process.env.PUBLIC_URL}/assets/images/knight_${promotionTeamType()}.svg`} alt=\"promote knight\"/>\n\t\t\t<img onClick={()=> promotePawn(PieceType.QUEEN)} src={`${process.env.PUBLIC_URL}/assets/images/queen_${promotionTeamType()}.svg`} alt=\"promote queen\"/>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div \n\t\t\tonMouseMove={(e)=>movePiece(e)} \n\t\t\tonMouseDown={e=> grabPiece(e)} \n\t\t\tonMouseUp={(e)=> dropPiece(e)}\n\t\t\tid=\"chessboard\"\n\t\t\tref={chessboardRef}>\n\t\t\t\t{board}\n\t\t</div>\n\t\t</>\n\t)\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}