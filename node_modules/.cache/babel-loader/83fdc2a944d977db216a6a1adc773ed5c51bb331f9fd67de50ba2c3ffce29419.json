{"ast":null,"code":"import { PieceType, TeamType, samePosition } from \"../Constants\";\nimport { pawnMove } from \"./rules/PawnRules\";\nimport { knightMove } from \"./rules/KnightRules\";\nimport { bishopMove } from \"./rules/BishopRules\";\nimport { rookMove } from \"./rules/RookRules\";\nimport { kingMove } from \"./rules/KingRules\";\nexport default class Referee {\n  static tileIsOccupied(position, boardState) {\n    const piece = boardState.find(p => samePosition(p.position, position));\n    return piece ? true : false;\n  }\n  static tileIsOccupiedByOpponent(position, boardState, team) {\n    const piece = boardState.find(p => samePosition(p.position, position) && p.team !== team);\n    return piece ? true : false;\n  }\n  static isEnPassantMove(initialPosition, desiredPosition, type, team, boardState) {\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n    if (type === PieceType.PAWN) {\n      if (desiredPosition.y - initialPosition.y === pawnDirection && (desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1)) {\n        const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n        return piece ? true : false;\n      }\n    }\n    return false;\n  }\n\n  //pawn promotion\n\n  isValidMove(initialPosition, desiredPosition, type, team, boardState) {\n    console.log(`referee checking.. piece: ${type}`);\n    //movement\n    const dx = desiredPosition.x - initialPosition.x; // difference in X axis\n    const dy = desiredPosition.y - initialPosition.y; // difference in Y axis\n    const stepX = dx > 0 ? 1 : -1; // direction of X axis: 1 or -1\n    const stepY = dy > 0 ? 1 : -1; // direction of Y axis: 1 or -1\n\n    switch (type) {\n      case PieceType.PAWN:\n        {\n          return pawnMove(initialPosition, desiredPosition, team, dx, dy, boardState);\n        }\n      case PieceType.KNIGHT:\n        {\n          return knightMove(initialPosition, desiredPosition, team, dx, dy, boardState);\n        }\n      case PieceType.BISHOP:\n        {\n          return bishopMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState);\n        }\n      case PieceType.ROOK:\n        {\n          return rookMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState);\n        }\n      case PieceType.QUEEN:\n        {\n          return bishopMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState) || rookMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState);\n        }\n      case PieceType.KING:\n        {\n          return kingMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState);\n        }\n    }\n  }\n}","map":{"version":3,"names":["PieceType","TeamType","samePosition","pawnMove","knightMove","bishopMove","rookMove","kingMove","Referee","tileIsOccupied","position","boardState","piece","find","p","tileIsOccupiedByOpponent","team","isEnPassantMove","initialPosition","desiredPosition","type","pawnDirection","OUR","PAWN","y","x","enPassant","isValidMove","console","log","dx","dy","stepX","stepY","KNIGHT","BISHOP","ROOK","QUEEN","KING"],"sources":["/home/outer/Documents/chesss/src/referee/Referee.ts"],"sourcesContent":["import { PieceType, TeamType, Piece, Position, samePosition} from \"../Constants\";\nimport { pawnMove } from \"./rules/PawnRules\";\nimport { knightMove } from \"./rules/KnightRules\";\nimport { bishopMove } from \"./rules/BishopRules\";\nimport { rookMove } from \"./rules/RookRules\";\nimport { kingMove } from \"./rules/KingRules\";\n\nexport default class Referee{\n    static tileIsOccupied(position:Position, boardState: Piece[]):boolean{\n        const piece = boardState.find((p) => samePosition(p.position,position));\n        return piece?true:false;\n    }\n\n    static tileIsOccupiedByOpponent(position:Position, boardState:Piece[], team:TeamType):boolean{\n        const piece = boardState.find((p)=>samePosition(p.position, position) && p.team!==team);\n        return piece?true:false;\n    }\n\n    static isEnPassantMove(initialPosition: Position, desiredPosition:Position, type:PieceType, team:TeamType, boardState:Piece[]):boolean{\n        const pawnDirection = (team === TeamType.OUR)? 1:-1;\n\n        if(type===PieceType.PAWN){\n            if(desiredPosition.y-initialPosition.y===pawnDirection && ((desiredPosition.x-initialPosition.x===-1) || (desiredPosition.x-initialPosition.x===1))){\n                const piece = boardState.find((p)=> p.position.x===desiredPosition.x && (p.position.y===desiredPosition.y - pawnDirection && p.enPassant));\n\n                return piece?true:false;\n            }\n        }\n        return false;\n    }\n\n//pawn promotion\n\n\n\n\n    isValidMove(initialPosition:Position, desiredPosition: Position, type:PieceType, team:TeamType, boardState:Piece[]){\n        console.log(`referee checking.. piece: ${type}`);\n        //movement\n        const dx = desiredPosition.x - initialPosition.x; // difference in X axis\n        const dy = desiredPosition.y - initialPosition.y; // difference in Y axis\n        const stepX = dx > 0 ? 1 : -1; // direction of X axis: 1 or -1\n        const stepY = dy > 0 ? 1 : -1; // direction of Y axis: 1 or -1\n\n        switch(type){\n            case PieceType.PAWN:{\n            return pawnMove(initialPosition, desiredPosition, team, dx, dy, boardState);\n            }\n            case PieceType.KNIGHT:{\n            return knightMove(initialPosition, desiredPosition, team, dx, dy, boardState);\n            }\n            case PieceType.BISHOP:{\n            return bishopMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState);\n            }\n            case PieceType.ROOK:{\n            return rookMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState);\n            }\n            case PieceType.QUEEN:{\n            return (bishopMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState) || rookMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState));\n            }\n            case PieceType.KING:{\n            return kingMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState);\n            }\n        }\n\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAmBC,YAAY,QAAO,cAAc;AAChF,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,QAAQ,QAAQ,mBAAmB;AAE5C,eAAe,MAAMC,OAAO;EACxB,OAAOC,cAAcA,CAACC,QAAiB,EAAEC,UAAmB,EAAS;IACjE,MAAMC,KAAK,GAAGD,UAAU,CAACE,IAAI,CAAEC,CAAC,IAAKZ,YAAY,CAACY,CAAC,CAACJ,QAAQ,EAACA,QAAQ,CAAC,CAAC;IACvE,OAAOE,KAAK,GAAC,IAAI,GAAC,KAAK;EAC3B;EAEA,OAAOG,wBAAwBA,CAACL,QAAiB,EAAEC,UAAkB,EAAEK,IAAa,EAAS;IACzF,MAAMJ,KAAK,GAAGD,UAAU,CAACE,IAAI,CAAEC,CAAC,IAAGZ,YAAY,CAACY,CAAC,CAACJ,QAAQ,EAAEA,QAAQ,CAAC,IAAII,CAAC,CAACE,IAAI,KAAGA,IAAI,CAAC;IACvF,OAAOJ,KAAK,GAAC,IAAI,GAAC,KAAK;EAC3B;EAEA,OAAOK,eAAeA,CAACC,eAAyB,EAAEC,eAAwB,EAAEC,IAAc,EAAEJ,IAAa,EAAEL,UAAkB,EAAS;IAClI,MAAMU,aAAa,GAAIL,IAAI,KAAKf,QAAQ,CAACqB,GAAG,GAAG,CAAC,GAAC,CAAC,CAAC;IAEnD,IAAGF,IAAI,KAAGpB,SAAS,CAACuB,IAAI,EAAC;MACrB,IAAGJ,eAAe,CAACK,CAAC,GAACN,eAAe,CAACM,CAAC,KAAGH,aAAa,KAAMF,eAAe,CAACM,CAAC,GAACP,eAAe,CAACO,CAAC,KAAG,CAAC,CAAC,IAAMN,eAAe,CAACM,CAAC,GAACP,eAAe,CAACO,CAAC,KAAG,CAAE,CAAC,EAAC;QAChJ,MAAMb,KAAK,GAAGD,UAAU,CAACE,IAAI,CAAEC,CAAC,IAAIA,CAAC,CAACJ,QAAQ,CAACe,CAAC,KAAGN,eAAe,CAACM,CAAC,IAAKX,CAAC,CAACJ,QAAQ,CAACc,CAAC,KAAGL,eAAe,CAACK,CAAC,GAAGH,aAAa,IAAIP,CAAC,CAACY,SAAU,CAAC;QAE1I,OAAOd,KAAK,GAAC,IAAI,GAAC,KAAK;MAC3B;IACJ;IACA,OAAO,KAAK;EAChB;;EAEJ;;EAKIe,WAAWA,CAACT,eAAwB,EAAEC,eAAyB,EAAEC,IAAc,EAAEJ,IAAa,EAAEL,UAAkB,EAAC;IAC/GiB,OAAO,CAACC,GAAG,CAAC,6BAA6BT,IAAI,EAAE,CAAC;IAChD;IACA,MAAMU,EAAE,GAAGX,eAAe,CAACM,CAAC,GAAGP,eAAe,CAACO,CAAC,CAAC,CAAC;IAClD,MAAMM,EAAE,GAAGZ,eAAe,CAACK,CAAC,GAAGN,eAAe,CAACM,CAAC,CAAC,CAAC;IAClD,MAAMQ,KAAK,GAAGF,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/B,MAAMG,KAAK,GAAGF,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAE/B,QAAOX,IAAI;MACP,KAAKpB,SAAS,CAACuB,IAAI;QAAC;UACpB,OAAOpB,QAAQ,CAACe,eAAe,EAAEC,eAAe,EAAEH,IAAI,EAAEc,EAAE,EAAEC,EAAE,EAAEpB,UAAU,CAAC;QAC3E;MACA,KAAKX,SAAS,CAACkC,MAAM;QAAC;UACtB,OAAO9B,UAAU,CAACc,eAAe,EAAEC,eAAe,EAAEH,IAAI,EAAEc,EAAE,EAAEC,EAAE,EAAEpB,UAAU,CAAC;QAC7E;MACA,KAAKX,SAAS,CAACmC,MAAM;QAAC;UACtB,OAAO9B,UAAU,CAACa,eAAe,EAAEC,eAAe,EAAEH,IAAI,EAAEc,EAAE,EAAEC,EAAE,EAAEC,KAAK,EAAEC,KAAK,EAAEtB,UAAU,CAAC;QAC3F;MACA,KAAKX,SAAS,CAACoC,IAAI;QAAC;UACpB,OAAO9B,QAAQ,CAACY,eAAe,EAAEC,eAAe,EAAEH,IAAI,EAAEc,EAAE,EAAEC,EAAE,EAAEC,KAAK,EAAEC,KAAK,EAAEtB,UAAU,CAAC;QACzF;MACA,KAAKX,SAAS,CAACqC,KAAK;QAAC;UACrB,OAAQhC,UAAU,CAACa,eAAe,EAAEC,eAAe,EAAEH,IAAI,EAAEc,EAAE,EAAEC,EAAE,EAAEC,KAAK,EAAEC,KAAK,EAAEtB,UAAU,CAAC,IAAIL,QAAQ,CAACY,eAAe,EAAEC,eAAe,EAAEH,IAAI,EAAEc,EAAE,EAAEC,EAAE,EAAEC,KAAK,EAAEC,KAAK,EAAEtB,UAAU,CAAC;QAClL;MACA,KAAKX,SAAS,CAACsC,IAAI;QAAC;UACpB,OAAO/B,QAAQ,CAACW,eAAe,EAAEC,eAAe,EAAEH,IAAI,EAAEc,EAAE,EAAEC,EAAE,EAAEC,KAAK,EAAEC,KAAK,EAAEtB,UAAU,CAAC;QACzF;IACJ;EAEJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}