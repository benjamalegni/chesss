{"ast":null,"code":"import Referee from \"../Referee\";\nconst knightX = [1, 2, 2, 1, -1, -2, -2, -1];\nconst knightY = [2, 1, -1, -2, -2, -1, 1, 2];\nexport const knightMove = (initialPosition, desiredPosition, team, dx, dy, boardState) => {\n  // moving mechanics\n  // 8 different tiles possible\n  for (let i = 0; i < 8; i++) {\n    if (dx === knightX[i] && dy === knightY[i]) {\n      return !Referee.tileIsOccupied(desiredPosition, boardState) || Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n    }\n  }\n  return false;\n};\nexport const GetPossibleKnightMoves = (piece, boardState) => {\n  const possibleMoves = [];\n  for (let i = 0; i < 8; i++) {\n    const dx = knightX[i] - piece.position.x;\n    const dy = knightY[i] - piece.position.y;\n    if (knightMove(piece.position, {\n      x: knightX[i],\n      y: knightY[i]\n    }, piece.team, dx, dy, boardState)) {\n      possibleMoves.push({\n        x: knightX[i],\n        y: knightY[i]\n      });\n      console.log(\"el pepeee\");\n    }\n  }\n  return possibleMoves;\n};\n_c = GetPossibleKnightMoves;\nvar _c;\n$RefreshReg$(_c, \"GetPossibleKnightMoves\");","map":{"version":3,"names":["Referee","knightX","knightY","knightMove","initialPosition","desiredPosition","team","dx","dy","boardState","i","tileIsOccupied","tileIsOccupiedByOpponent","GetPossibleKnightMoves","piece","possibleMoves","position","x","y","push","console","log","_c","$RefreshReg$"],"sources":["/home/Outer/Documents/chesss/src/referee/rules/KnightRules.ts"],"sourcesContent":["import { Piece, Position, TeamType } from \"../../Constants\";\nimport Referee from \"../Referee\"\n\nconst knightX = [1, 2, 2, 1, -1, -2, -2, -1];\nconst knightY = [2, 1, -1, -2, -2, -1, 1, 2];\n\nexport const knightMove =(initialPosition: Position, desiredPosition: Position, team: TeamType, dx: number, dy: number, boardState: Piece[]):boolean=>{\n        // moving mechanics\n        // 8 different tiles possible\n        for (let i = 0; i < 8; i++) {\n            if ((dx === knightX[i]) && (dy === knightY[i])) {\n                return (!Referee.tileIsOccupied(desiredPosition, boardState) || Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team))\n            }\n        }\n        return false;\n}\n\n\n\nexport const GetPossibleKnightMoves = (piece:Piece, boardState:Piece[]):Position[]=>{\n    const possibleMoves:Position[] = [];\n\n    for(let i=0;i<8;i++){\n        const dx = knightX[i] - piece.position.x;\n        const dy = knightY[i] - piece.position.y;\n        if(knightMove(piece.position, {x:knightX[i], y:knightY[i]}, piece.team,dx, dy , boardState)){\n            possibleMoves.push({x:knightX[i], y:knightY[i]});\n            console.log(\"el pepeee\");\n        }\n    }\n    return possibleMoves;\n}"],"mappings":"AACA,OAAOA,OAAO,MAAM,YAAY;AAEhC,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAE5C,OAAO,MAAMC,UAAU,GAAEA,CAACC,eAAyB,EAAEC,eAAyB,EAAEC,IAAc,EAAEC,EAAU,EAAEC,EAAU,EAAEC,UAAmB,KAAW;EAC9I;EACA;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxB,IAAKH,EAAE,KAAKN,OAAO,CAACS,CAAC,CAAC,IAAMF,EAAE,KAAKN,OAAO,CAACQ,CAAC,CAAE,EAAE;MAC5C,OAAQ,CAACV,OAAO,CAACW,cAAc,CAACN,eAAe,EAAEI,UAAU,CAAC,IAAIT,OAAO,CAACY,wBAAwB,CAACP,eAAe,EAAEI,UAAU,EAAEH,IAAI,CAAC;IACvI;EACJ;EACA,OAAO,KAAK;AACpB,CAAC;AAID,OAAO,MAAMO,sBAAsB,GAAGA,CAACC,KAAW,EAAEL,UAAkB,KAAc;EAChF,MAAMM,aAAwB,GAAG,EAAE;EAEnC,KAAI,IAAIL,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,CAAC,EAACA,CAAC,EAAE,EAAC;IAChB,MAAMH,EAAE,GAAGN,OAAO,CAACS,CAAC,CAAC,GAAGI,KAAK,CAACE,QAAQ,CAACC,CAAC;IACxC,MAAMT,EAAE,GAAGN,OAAO,CAACQ,CAAC,CAAC,GAAGI,KAAK,CAACE,QAAQ,CAACE,CAAC;IACxC,IAAGf,UAAU,CAACW,KAAK,CAACE,QAAQ,EAAE;MAACC,CAAC,EAAChB,OAAO,CAACS,CAAC,CAAC;MAAEQ,CAAC,EAAChB,OAAO,CAACQ,CAAC;IAAC,CAAC,EAAEI,KAAK,CAACR,IAAI,EAACC,EAAE,EAAEC,EAAE,EAAGC,UAAU,CAAC,EAAC;MACxFM,aAAa,CAACI,IAAI,CAAC;QAACF,CAAC,EAAChB,OAAO,CAACS,CAAC,CAAC;QAAEQ,CAAC,EAAChB,OAAO,CAACQ,CAAC;MAAC,CAAC,CAAC;MAChDU,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IAC5B;EACJ;EACA,OAAON,aAAa;AACxB,CAAC;AAAAO,EAAA,GAZYT,sBAAsB;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}