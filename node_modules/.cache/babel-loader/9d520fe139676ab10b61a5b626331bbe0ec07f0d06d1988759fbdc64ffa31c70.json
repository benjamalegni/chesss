{"ast":null,"code":"var _jsxFileName = \"/home/Outer/Documents/chesss/src/components/Chessboard/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport Referee from '../../referee/Referee';\nimport { useEffect, useRef, useState } from 'react';\nimport { XAXIS, YAXIS, TeamType, PieceType, initialBoardState, GRIDSIZE, samePosition } from '../../Constants';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chessboard({\n  online,\n  timeLimitSeconds\n}) {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [grabPosition, setGrabPosition] = useState({\n    x: -1,\n    y: -1\n  });\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const [promotionPawn, setPromotionPawn] = useState();\n  const modalRef = useRef(null);\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [lastMove, setLastMove] = useState(null);\n  const [awaitingPromotion, setAwaitingPromotion] = useState(false);\n\n  // Clock state\n  const [whiteTimeLeft, setWhiteTimeLeft] = useState(null);\n  const [blackTimeLeft, setBlackTimeLeft] = useState(null);\n  function getAllowedTeamForMe() {\n    if (!online || online.status !== 'playing' || !online.myColor) {\n      return null;\n    }\n    return online.myColor === 'white' ? TeamType.OUR : TeamType.OPPONENT;\n  }\n  function isMyTurn() {\n    if (!online || online.status !== 'playing' || !online.myColor) {\n      return true; // offline mode: always allowed\n    }\n    return online.myColor === currentTurn;\n  }\n\n  // Initialize turn and timers when a game starts or time limit provided\n  useEffect(() => {\n    if (online && online.status === 'playing') {\n      setCurrentTurn('white');\n      if (typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0) {\n        setWhiteTimeLeft(timeLimitSeconds);\n        setBlackTimeLeft(timeLimitSeconds);\n      } else {\n        setWhiteTimeLeft(null);\n        setBlackTimeLeft(null);\n      }\n    }\n  }, [online === null || online === void 0 ? void 0 : online.status, timeLimitSeconds]);\n\n  // Opponent move listener\n  useEffect(() => {\n    const s = online === null || online === void 0 ? void 0 : online.socket;\n    if (!s) return;\n    const onMove = msg => {\n      try {\n        if (msg.type === 'move') {\n          // compatibility if server sends type wrapper\n        }\n        const from = msg.from;\n        const to = msg.to;\n        const promotion = msg.promotionType;\n        setPieces(currentPieces => {\n          let updated = currentPieces;\n          const movingPiece = updated.find(p => samePosition(p.position, from));\n          if (!movingPiece) {\n            return updated;\n          }\n          const isEnPassantMove = Referee.isEnPassantMove(from, to, movingPiece.type, movingPiece.team, updated);\n          const pawnDirecion = movingPiece.team === TeamType.OUR ? 1 : -1;\n          if (isEnPassantMove) {\n            updated = updated.reduce((results, piece) => {\n              if (samePosition(piece.position, from)) {\n                piece.enPassant = false;\n                piece.position.x = to.x;\n                piece.position.y = to.y;\n                results.push(piece);\n              } else if (!samePosition(piece.position, {\n                x: to.x,\n                y: to.y - pawnDirecion\n              })) {\n                if (piece.type === PieceType.PAWN) {\n                  piece.enPassant = false;\n                }\n                results.push(piece);\n              }\n              return results;\n            }, []);\n          } else {\n            updated = updated.reduce((results, piece) => {\n              if (samePosition(piece.position, from)) {\n                piece.enPassant = Math.abs(from.y - to.y) === 2 && piece.type === PieceType.PAWN;\n                piece.position.x = to.x;\n                piece.position.y = to.y;\n                results.push(piece);\n              } else if (!samePosition(piece.position, to)) {\n                if (piece.type === PieceType.PAWN) {\n                  piece.enPassant = false;\n                }\n                results.push(piece);\n              }\n              return results;\n            }, []);\n          }\n          if (promotion !== undefined) {\n            const promoted = updated.find(p => samePosition(p.position, to));\n            if (promoted) {\n              promoted.type = promotion;\n              const teamType = promoted.team === TeamType.OUR ? \"w\" : \"b\";\n              let image = \"\";\n              switch (promotion) {\n                case PieceType.ROOK:\n                  image = \"rook\";\n                  break;\n                case PieceType.BISHOP:\n                  image = \"bishop\";\n                  break;\n                case PieceType.KNIGHT:\n                  image = \"knight\";\n                  break;\n                case PieceType.QUEEN:\n                  image = \"queen\";\n                  break;\n              }\n              if (image) {\n                promoted.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n              }\n            }\n          }\n          return updated;\n        });\n        setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n      } catch (_e) {\n        // ignore\n      }\n    };\n    s.on('move', onMove);\n    return () => {\n      s.off('move', onMove);\n    };\n  }, [online === null || online === void 0 ? void 0 : online.socket, online === null || online === void 0 ? void 0 : online.roomId]);\n  function updateValidMoves() {\n    setPieces(currentPieces => {\n      return currentPieces.map(p => {\n        p.possibleMoves = referee.getValidMoves(p, currentPieces);\n        return p;\n      });\n    });\n  }\n\n  // Clock ticking effect\n  useEffect(() => {\n    if (!(typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0)) return;\n    if (!online || online.status !== 'playing') return;\n    if (awaitingPromotion) return;\n    const interval = setInterval(() => {\n      if (currentTurn === 'white') {\n        setWhiteTimeLeft(prev => {\n          if (prev === null) return prev;\n          const next = Math.max(0, prev - 1);\n          return next;\n        });\n      } else {\n        setBlackTimeLeft(prev => {\n          if (prev === null) return prev;\n          const next = Math.max(0, prev - 1);\n          return next;\n        });\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [online === null || online === void 0 ? void 0 : online.status, currentTurn, timeLimitSeconds, awaitingPromotion]);\n  function performMove(target) {\n    const currentPiece = pieces.find(p => samePosition(p.position, grabPosition));\n    if (!currentPiece) return;\n    const {\n      x,\n      y\n    } = target;\n    const validMove = referee.isValidMove(grabPosition, {\n      x,\n      y\n    }, currentPiece.type, currentPiece.team, pieces);\n    const isEnPassantMove = Referee.isEnPassantMove(grabPosition, {\n      x,\n      y\n    }, currentPiece.type, currentPiece.team, pieces);\n    const pawnDirecion = currentPiece.team === TeamType.OUR ? 1 : -1;\n    if (online && online.status === 'playing') {\n      const myTeam = getAllowedTeamForMe();\n      if (!isMyTurn() || myTeam === null || currentPiece.team !== myTeam) {\n        return;\n      }\n      // Optional: stop moves if your time is up\n      if (typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0) {\n        if (currentTurn === 'white' && whiteTimeLeft === 0 || currentTurn === 'black' && blackTimeLeft === 0) {\n          return;\n        }\n      }\n    }\n    if (isEnPassantMove) {\n      const updatedPieces = pieces.reduce((results, piece) => {\n        if (samePosition(piece.position, grabPosition)) {\n          piece.enPassant = false;\n          piece.position.x = x;\n          piece.position.y = y;\n          results.push(piece);\n        } else if (!samePosition(piece.position, {\n          x,\n          y: y - pawnDirecion\n        })) {\n          if (piece.type === PieceType.PAWN) {\n            piece.enPassant = false;\n          }\n          results.push(piece);\n        }\n        return results;\n      }, []);\n      setPieces(updatedPieces);\n      setLastMove({\n        from: grabPosition,\n        to: {\n          x,\n          y\n        }\n      });\n      if (!online || online.status !== 'playing') {\n        setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n      } else {\n        var _online$socket;\n        (_online$socket = online.socket) === null || _online$socket === void 0 ? void 0 : _online$socket.emit('move', {\n          roomId: online.roomId,\n          from: grabPosition,\n          to: {\n            x,\n            y\n          }\n        });\n        setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n      }\n    } else if (validMove) {\n      const updatedPieces = pieces.reduce((results, piece) => {\n        if (samePosition(piece.position, grabPosition)) {\n          piece.enPassant = Math.abs(grabPosition.y - y) === 2 && piece.type === PieceType.PAWN;\n          piece.position.x = x;\n          piece.position.y = y;\n          let promotionRow = piece.team === TeamType.OUR ? 7 : 0;\n          if (y === promotionRow && piece.type === PieceType.PAWN) {\n            var _modalRef$current;\n            (_modalRef$current = modalRef.current) === null || _modalRef$current === void 0 ? void 0 : _modalRef$current.classList.remove(\"hidden\");\n            setPromotionPawn(piece);\n            setAwaitingPromotion(true);\n          }\n          results.push(piece);\n        } else if (!samePosition(piece.position, {\n          x,\n          y\n        })) {\n          if (piece.type === PieceType.PAWN) {\n            piece.enPassant = false;\n          }\n          results.push(piece);\n        }\n        return results;\n      }, []);\n      setPieces(updatedPieces);\n      setLastMove({\n        from: grabPosition,\n        to: {\n          x,\n          y\n        }\n      });\n      if (!awaitingPromotion) {\n        if (!online || online.status !== 'playing') {\n          setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n        } else {\n          var _online$socket2;\n          (_online$socket2 = online.socket) === null || _online$socket2 === void 0 ? void 0 : _online$socket2.emit('move', {\n            roomId: online.roomId,\n            from: grabPosition,\n            to: {\n              x,\n              y\n            }\n          });\n          setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n        }\n      }\n    }\n  }\n  function pickTileFromCursor(clientX, clientY) {\n    const chessboard = chessboardRef.current;\n    if (!chessboard) return {\n      x: -1,\n      y: -1\n    };\n    const rect = chessboard.getBoundingClientRect();\n    const relX = clientX - rect.left;\n    const relY = clientY - rect.top;\n    const x = Math.floor(relX / GRIDSIZE);\n    const y = Math.abs(Math.ceil((relY - rect.height) / GRIDSIZE)); // invert axis\n    return {\n      x,\n      y\n    };\n  }\n  function grabPiece(e) {\n    updateValidMoves();\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      const {\n        x: grabX,\n        y: grabY\n      } = pickTileFromCursor(e.clientX, e.clientY);\n      const pieceAtTile = pieces.find(p => samePosition(p.position, {\n        x: grabX,\n        y: grabY\n      }));\n\n      // Online restrictions\n      if (online && online.status === 'playing') {\n        const myTeam = getAllowedTeamForMe();\n        if (!isMyTurn() || myTeam === null || !pieceAtTile || pieceAtTile.team !== myTeam) {\n          return; // can't grab\n        }\n      }\n      setGrabPosition({\n        x: grabX,\n        y: grabY\n      });\n      const x = e.clientX - GRIDSIZE / 2;\n      const y = e.clientY - GRIDSIZE / 2;\n      element.style.position = 'fixed';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      element.style.zIndex = '1000';\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = e.clientX - GRIDSIZE / 2;\n      const y = e.clientY - GRIDSIZE / 2;\n      const rect = chessboard.getBoundingClientRect();\n      const minX = rect.left;\n      const minY = rect.top;\n      const maxX = rect.right - GRIDSIZE;\n      const maxY = rect.bottom - GRIDSIZE;\n      activePiece.style.position = 'fixed';\n\n      // x axis limits\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      // y axis limits\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const target = pickTileFromCursor(e.clientX, e.clientY);\n      performMove(target);\n      //reset piece position\n      activePiece.style.position = 'relative';\n      activePiece.style.removeProperty(\"top\");\n      activePiece.style.removeProperty(\"left\");\n      activePiece.style.removeProperty(\"z-index\");\n      setActivePiece(null);\n    }\n  }\n  function promotePawn(pieceType) {\n    var _modalRef$current2;\n    if (promotionPawn === undefined) {\n      return;\n    }\n    const updatedPieces = pieces.reduce((results, piece) => {\n      if (samePosition(piece.position, promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.position)) {\n        piece.type = pieceType;\n        const teamType = piece.team === TeamType.OUR ? \"w\" : \"b\";\n        let image = \"\";\n        switch (pieceType) {\n          case PieceType.ROOK:\n            {\n              image = \"rook\";\n              break;\n            }\n          case PieceType.BISHOP:\n            {\n              image = \"bishop\";\n              break;\n            }\n          case PieceType.KNIGHT:\n            {\n              image = \"knight\";\n              break;\n            }\n          case PieceType.QUEEN:\n            {\n              image = \"queen\";\n              break;\n            }\n        }\n        piece.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n      }\n      results.push(piece);\n      return results;\n    }, []);\n    setPieces(updatedPieces);\n    (_modalRef$current2 = modalRef.current) === null || _modalRef$current2 === void 0 ? void 0 : _modalRef$current2.classList.add(\"hidden\");\n    setAwaitingPromotion(false);\n    if (online && online.status === 'playing' && lastMove) {\n      var _online$socket3;\n      (_online$socket3 = online.socket) === null || _online$socket3 === void 0 ? void 0 : _online$socket3.emit('move', {\n        roomId: online.roomId,\n        from: lastMove.from,\n        to: lastMove.to,\n        promotionType: pieceType\n      });\n      setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n    } else if (!online || online.status !== 'playing') {\n      setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n    }\n  }\n  function promotionTeamType() {\n    return (promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.team) === TeamType.OUR ? \"w\" : \"b\";\n  }\n  function formatTime(totalSeconds) {\n    if (totalSeconds === null) return '--:--';\n    const m = Math.floor(totalSeconds / 60);\n    const s = totalSeconds % 60;\n    return `${m}:${s.toString().padStart(2, '0')}`;\n  }\n  let board = [];\n  for (let y = YAXIS.length - 1; y >= 0; y--) {\n    for (let x = 0; x < XAXIS.length; x++) {\n      // check whether the sum of numbers x,y is even to draw each tile\n      const isEven = (x + y + 2) % 2 === 0;\n      let img = undefined;\n      pieces.forEach(p => {\n        if (samePosition(p.position, {\n          x: x,\n          y: y\n        })) {\n          img = p.image;\n        }\n      });\n      let currentPiece = pieces.find(p => samePosition(p.position, grabPosition));\n      let highlight = currentPiece !== null && currentPiece !== void 0 && currentPiece.possibleMoves ? currentPiece.possibleMoves.some(p => samePosition(p, {\n        x: x,\n        y: y\n      })) : false;\n      const targetHasPiece = pieces.some(p => samePosition(p.position, {\n        x,\n        y\n      }));\n      const capture = highlight && targetHasPiece;\n      const handleClick = highlight ? () => performMove({\n        x,\n        y\n      }) : undefined;\n      board.push(/*#__PURE__*/_jsxDEV(Tile, {\n        isEven: isEven,\n        image: img,\n        highlight: highlight,\n        capture: capture,\n        onClick: handleClick\n      }, `${x},${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 6\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pawn-promotion-modal\",\n      className: \"hidden\",\n      ref: modalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.ROOK),\n          src: `${process.env.PUBLIC_URL}/assets/images/rook_${promotionTeamType()}.svg`,\n          alt: \"promote rook\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.BISHOP),\n          src: `${process.env.PUBLIC_URL}/assets/images/bishop_${promotionTeamType()}.svg`,\n          alt: \"promote bishop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.KNIGHT),\n          src: `${process.env.PUBLIC_URL}/assets/images/knight_${promotionTeamType()}.svg`,\n          alt: \"promote knight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.QUEEN),\n          src: `${process.env.PUBLIC_URL}/assets/images/queen_${promotionTeamType()}.svg`,\n          alt: \"promote queen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-panel\",\n        style: {\n          visibility: typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0 ? 'visible' : 'hidden'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `timer-block ${currentTurn === 'black' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-label\",\n            children: \"Black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-value\",\n            children: formatTime(blackTimeLeft)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `timer-block ${currentTurn === 'white' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-label\",\n            children: \"White\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-value\",\n            children: formatTime(whiteTimeLeft)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onMouseMove: e => movePiece(e),\n        onMouseDown: e => grabPiece(e),\n        onMouseUp: e => dropPiece(e),\n        id: \"chessboard\",\n        ref: chessboardRef,\n        children: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n_s(Chessboard, \"99tXC6kkzZNGeRto3cgELnr+4H4=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Tile","Referee","useEffect","useRef","useState","XAXIS","YAXIS","TeamType","PieceType","initialBoardState","GRIDSIZE","samePosition","jsxDEV","_jsxDEV","Fragment","_Fragment","Chessboard","online","timeLimitSeconds","_s","activePiece","setActivePiece","grabPosition","setGrabPosition","x","y","pieces","setPieces","chessboardRef","referee","promotionPawn","setPromotionPawn","modalRef","currentTurn","setCurrentTurn","lastMove","setLastMove","awaitingPromotion","setAwaitingPromotion","whiteTimeLeft","setWhiteTimeLeft","blackTimeLeft","setBlackTimeLeft","getAllowedTeamForMe","status","myColor","OUR","OPPONENT","isMyTurn","s","socket","onMove","msg","type","from","to","promotion","promotionType","currentPieces","updated","movingPiece","find","p","position","isEnPassantMove","team","pawnDirecion","reduce","results","piece","enPassant","push","PAWN","Math","abs","undefined","promoted","teamType","image","ROOK","BISHOP","KNIGHT","QUEEN","process","env","PUBLIC_URL","prev","_e","on","off","roomId","updateValidMoves","map","possibleMoves","getValidMoves","interval","setInterval","next","max","clearInterval","performMove","target","currentPiece","validMove","isValidMove","myTeam","updatedPieces","_online$socket","emit","promotionRow","_modalRef$current","current","classList","remove","_online$socket2","pickTileFromCursor","clientX","clientY","chessboard","rect","getBoundingClientRect","relX","left","relY","top","floor","ceil","height","grabPiece","e","element","contains","grabX","grabY","pieceAtTile","style","zIndex","movePiece","minX","minY","maxX","right","maxY","bottom","dropPiece","removeProperty","promotePawn","pieceType","_modalRef$current2","add","_online$socket3","promotionTeamType","formatTime","totalSeconds","m","toString","padStart","board","length","isEven","img","forEach","highlight","some","targetHasPiece","capture","handleClick","onClick","fileName","_jsxFileName","lineNumber","columnNumber","children","id","className","ref","src","alt","visibility","onMouseMove","onMouseDown","onMouseUp","_c","$RefreshReg$"],"sources":["/home/Outer/Documents/chesss/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Tile from '../Tile/Tile'\nimport Referee from '../../referee/Referee'\nimport { useEffect, useRef, useState } from 'react';\nimport { XAXIS, YAXIS, Piece, TeamType, PieceType, initialBoardState, Position, GRIDSIZE, samePosition } from '../../Constants';\nimport type { Socket } from 'socket.io-client';\n\ninterface OnlineProps{\n\tsocket: Socket | null;\n\tstatus: 'offline' | 'waiting' | 'playing';\n\troomId?: string;\n\tmyColor?: 'white' | 'black';\n}\n\nexport default function Chessboard({ online, timeLimitSeconds }: { online?: OnlineProps, timeLimitSeconds?: number }){\nconst [activePiece, setActivePiece] = useState<HTMLElement | null>(null)\nconst [grabPosition, setGrabPosition] = useState<Position>({x:-1, y:-1});\nconst [pieces, setPieces] = useState<Piece[]>(initialBoardState);\nconst chessboardRef = useRef<HTMLDivElement>(null);\nconst referee = new Referee();\nconst [promotionPawn, setPromotionPawn] = useState<Piece>();\nconst modalRef = useRef<HTMLDivElement>(null);\nconst [currentTurn, setCurrentTurn] = useState<'white'|'black'>('white');\nconst [lastMove, setLastMove] = useState<{from: Position, to: Position} | null>(null);\nconst [awaitingPromotion, setAwaitingPromotion] = useState<boolean>(false);\n\n// Clock state\nconst [whiteTimeLeft, setWhiteTimeLeft] = useState<number | null>(null);\nconst [blackTimeLeft, setBlackTimeLeft] = useState<number | null>(null);\n\nfunction getAllowedTeamForMe(): TeamType | null{\n\tif(!online || online.status !== 'playing' || !online.myColor){\n\t\treturn null;\n\t}\n\treturn online.myColor === 'white' ? TeamType.OUR : TeamType.OPPONENT;\n}\n\nfunction isMyTurn(): boolean{\n\tif(!online || online.status !== 'playing' || !online.myColor){\n\t\treturn true; // offline mode: always allowed\n\t}\n\treturn online.myColor === currentTurn;\n}\n\n// Initialize turn and timers when a game starts or time limit provided\nuseEffect(()=>{\n\tif(online && online.status === 'playing'){\n\t\tsetCurrentTurn('white');\n\t\tif(typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0){\n\t\t\tsetWhiteTimeLeft(timeLimitSeconds);\n\t\t\tsetBlackTimeLeft(timeLimitSeconds);\n\t\t} else {\n\t\t\tsetWhiteTimeLeft(null);\n\t\t\tsetBlackTimeLeft(null);\n\t\t}\n\t}\n}, [online?.status, timeLimitSeconds]);\n\n// Opponent move listener\nuseEffect(()=>{\n\tconst s = online?.socket;\n\tif(!s) return;\n\tconst onMove = (msg: any) => {\n\t\ttry{\n\t\t\tif(msg.type === 'move'){\n\t\t\t\t// compatibility if server sends type wrapper\n\t\t\t}\n\t\t\tconst from: Position = msg.from;\n\t\t\tconst to: Position = msg.to;\n\t\t\tconst promotion: PieceType | undefined = msg.promotionType;\n\t\t\tsetPieces((currentPieces)=>{\n\t\t\t\tlet updated = currentPieces;\n\t\t\t\tconst movingPiece = updated.find(p=> samePosition(p.position, from));\n\t\t\t\tif(!movingPiece){\n\t\t\t\t\treturn updated;\n\t\t\t\t}\n\t\t\t\tconst isEnPassantMove = Referee.isEnPassantMove(from, to, movingPiece.type, movingPiece.team, updated);\n\t\t\t\tconst pawnDirecion = movingPiece.team === TeamType.OUR?1:-1;\n\t\t\t\tif(isEnPassantMove){\n\t\t\t\t\tupdated = updated.reduce((results, piece)=>{\n\t\t\t\t\t\tif(samePosition(piece.position, from)){\n\t\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\t\tpiece.position.x=to.x;\n\t\t\t\t\t\t\tpiece.position.y=to.y;\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t}else if(!samePosition(piece.position, {x: to.x, y: to.y - pawnDirecion})){\n\t\t\t\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}, [] as Piece[]);\n\t\t\t\t} else {\n\t\t\t\t\tupdated = updated.reduce((results, piece)=>{\n\t\t\t\t\t\tif(samePosition(piece.position, from)){\n\t\t\t\t\t\t\tpiece.enPassant = Math.abs(from.y - to.y)===2 && (piece.type===PieceType.PAWN);\n\t\t\t\t\t\t\tpiece.position.x = to.x;\n\t\t\t\t\t\t\tpiece.position.y = to.y;\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t} else if(!samePosition(piece.position, to)){\n\t\t\t\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}, [] as Piece[]);\n\t\t\t\t}\n\t\t\t\tif(promotion !== undefined){\n\t\t\t\t\tconst promoted = updated.find(p=> samePosition(p.position, to));\n\t\t\t\t\tif(promoted){\n\t\t\t\t\t\tpromoted.type = promotion;\n\t\t\t\t\t\tconst teamType = (promoted.team === TeamType.OUR)?\"w\":\"b\";\n\t\t\t\t\t\tlet image = \"\";\n\t\t\t\t\t\tswitch(promotion){\n\t\t\t\t\t\t\tcase PieceType.ROOK: image = \"rook\"; break;\n\t\t\t\t\t\t\tcase PieceType.BISHOP: image = \"bishop\"; break;\n\t\t\t\t\t\t\tcase PieceType.KNIGHT: image = \"knight\"; break;\n\t\t\t\t\t\t\tcase PieceType.QUEEN: image = \"queen\"; break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(image){\n\t\t\t\t\t\t\tpromoted.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn updated;\n\t\t\t});\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t}catch(_e){\n\t\t\t// ignore\n\t\t}\n\t};\n\ts.on('move', onMove);\n\treturn () => {\n\t\ts.off('move', onMove);\n\t};\n}, [online?.socket, online?.roomId]);\n\nfunction updateValidMoves(){\n\tsetPieces((currentPieces) => {\n\t\treturn currentPieces.map(p=>{\n\t\t\tp.possibleMoves = referee.getValidMoves(p, currentPieces);\n\t\t\treturn p;\n\n\t\t});\n\t});\n}\n\n// Clock ticking effect\nuseEffect(()=>{\n\tif(!(typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0)) return;\n\tif(!online || online.status !== 'playing') return;\n\tif(awaitingPromotion) return;\n\tconst interval = setInterval(()=>{\n\t\tif(currentTurn === 'white'){\n\t\t\tsetWhiteTimeLeft(prev => {\n\t\t\t\tif(prev === null) return prev;\n\t\t\t\tconst next = Math.max(0, prev - 1);\n\t\t\t\treturn next;\n\t\t\t});\n\t\t} else {\n\t\t\tsetBlackTimeLeft(prev => {\n\t\t\t\tif(prev === null) return prev;\n\t\t\t\tconst next = Math.max(0, prev - 1);\n\t\t\t\treturn next;\n\t\t\t});\n\t\t}\n\t}, 1000);\n\treturn () => clearInterval(interval);\n}, [online?.status, currentTurn, timeLimitSeconds, awaitingPromotion]);\n\nfunction performMove(target: Position){\n\tconst currentPiece = pieces.find((p)=> samePosition(p.position, grabPosition));\n\tif(!currentPiece) return;\n\tconst { x, y } = target;\n\tconst validMove = referee.isValidMove(grabPosition, {x,y}, currentPiece.type,currentPiece.team, pieces);\n\tconst isEnPassantMove = Referee.isEnPassantMove(grabPosition, {x,y},currentPiece.type,currentPiece.team, pieces)\n\tconst pawnDirecion = currentPiece.team === TeamType.OUR?1:-1;\n\n\tif(online && online.status === 'playing'){\n\t\tconst myTeam = getAllowedTeamForMe();\n\t\tif(!isMyTurn() || myTeam === null || currentPiece.team !== myTeam){\n\t\t\treturn;\n\t\t}\n\t\t// Optional: stop moves if your time is up\n\t\tif(typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0){\n\t\t\tif((currentTurn === 'white' && whiteTimeLeft === 0) || (currentTurn === 'black' && blackTimeLeft === 0)){\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(isEnPassantMove){\n\t\tconst updatedPieces = pieces.reduce((results, piece)=>{\n\t\t\tif(samePosition(piece.position, grabPosition)){\n\t\t\t\tpiece.enPassant=false;\n\t\t\t\tpiece.position.x=x;\n\t\t\t\tpiece.position.y=y;\n\t\t\t\tresults.push(piece);\n\t\t\t}else if(!samePosition(piece.position, {x, y: y-pawnDirecion})){\n\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t}\n\t\t\t\tresults.push(piece);\n\t\t\t}\n\t\t\treturn results;\n\t\t}, [] as Piece[])\n\t\tsetPieces(updatedPieces);\n\t\tsetLastMove({from: grabPosition, to: {x, y}});\n\t\tif(!online || online.status !== 'playing'){\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t} else {\n\t\t\tonline.socket?.emit('move', { roomId: online.roomId, from: grabPosition, to: {x, y} });\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t}\n\t}else if(validMove){\n\t\tconst updatedPieces = pieces.reduce((results,piece)=>{\n\t\t\tif(samePosition(piece.position, grabPosition)){\n\t\t\t\tpiece.enPassant = Math.abs(grabPosition.y-y)===2 &&(piece.type===PieceType.PAWN)\n\t\t\t\tpiece.position.x=x;\n\t\t\t\tpiece.position.y=y;\n\t\t\t\tlet promotionRow = piece.team === TeamType.OUR ? 7:0;\n\t\t\t\tif(y===promotionRow && piece.type === PieceType.PAWN){\n\t\t\t\t\tmodalRef.current?.classList.remove(\"hidden\")\n\t\t\t\t\tsetPromotionPawn(piece);\n\t\t\t\t\tsetAwaitingPromotion(true);\n\t\t\t\t}\n\t\t\t\tresults.push(piece);\n\t\t\t}else if(!(samePosition(piece.position, {x,y}))){\n\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t}\n\t\t\t\tresults.push(piece);\n\t\t\t}\n\t\t\treturn results;\n\t\t}, [] as Piece[])\n\t\tsetPieces(updatedPieces);\n\t\tsetLastMove({from: grabPosition, to: {x, y}});\n\t\tif(!(awaitingPromotion)){\n\t\t\tif(!online || online.status !== 'playing'){\n\t\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t\t} else {\n\t\t\t\tonline.socket?.emit('move', { roomId: online.roomId, from: grabPosition, to: {x, y} });\n\t\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction pickTileFromCursor(clientX: number, clientY: number){\n\tconst chessboard = chessboardRef.current;\n\tif(!chessboard) return { x: -1, y: -1 };\n\tconst rect = chessboard.getBoundingClientRect();\n\tconst relX = clientX - rect.left;\n\tconst relY = clientY - rect.top;\n\tconst x = Math.floor(relX / GRIDSIZE);\n\tconst y = Math.abs(Math.ceil((relY - rect.height)/GRIDSIZE)); // invert axis\n\treturn { x, y };\n}\n\nfunction grabPiece(e: React.MouseEvent){\n\tupdateValidMoves();\n\n\tconst chessboard = chessboardRef.current;\n\tconst element = e.target as HTMLElement;\n\n\tif(element.classList.contains(\"chess-piece\") && chessboard){\n\t\tconst { x: grabX, y: grabY } = pickTileFromCursor(e.clientX, e.clientY);\n\t\tconst pieceAtTile = pieces.find(p => samePosition(p.position, {x: grabX, y: grabY}));\n\n\t\t// Online restrictions\n\t\tif(online && online.status === 'playing'){\n\t\t\tconst myTeam = getAllowedTeamForMe();\n\t\t\tif(!isMyTurn() || myTeam === null || !pieceAtTile || pieceAtTile.team !== myTeam){\n\t\t\t\treturn; // can't grab\n\t\t\t}\n\t\t}\n\n\t\tsetGrabPosition({x:grabX, y:grabY})\n\n\t\tconst x = e.clientX - GRIDSIZE/2;\n\t\tconst y = e.clientY - GRIDSIZE/2;\n\t\telement.style.position = 'fixed';\n\t\telement.style.left = `${x}px`;\n\t\telement.style.top = `${y}px`;\n\t\telement.style.zIndex = '1000';\n\n\t\tsetActivePiece(element);\n\t}\n}\n\nfunction movePiece(e: React.MouseEvent){\n\tconst chessboard = chessboardRef.current;\n\tif(activePiece && chessboard){\n\t\tconst x = e.clientX - GRIDSIZE/2;\n\t\tconst y = e.clientY - GRIDSIZE/2;\n\n\t\tconst rect = chessboard.getBoundingClientRect();\n\t\tconst minX = rect.left;\n\t\tconst minY = rect.top;\n\t\tconst maxX = rect.right - GRIDSIZE;\n\t\tconst maxY = rect.bottom - GRIDSIZE;\n\n\t\tactivePiece.style.position = 'fixed';\n\n\t\t// x axis limits\n\t\tif(x < minX){\n\t\t\tactivePiece.style.left = `${minX}px`;\n\t\t} else if(x > maxX){\n\t\t\tactivePiece.style.left = `${maxX}px`;\n\t\t} else{\n\t\t\tactivePiece.style.left = `${x}px`;\n\t\t}\n\n\t\t// y axis limits\n\t\tif(y < minY){\n\t\t\tactivePiece.style.top = `${minY}px`;\n\t\t} else if(y > maxY){\n\t\t\tactivePiece.style.top = `${maxY}px`;\n\t\t} else{\n\t\t\tactivePiece.style.top = `${y}px`;\n\t\t}\n\t\t\n\t}\n}\n\nfunction dropPiece(e: React.MouseEvent){\n\tconst chessboard = chessboardRef.current;\n\tif(activePiece && chessboard){\n\t\tconst target = pickTileFromCursor(e.clientX, e.clientY);\n\t\tperformMove(target);\n\t\t//reset piece position\n\t\tactivePiece.style.position= 'relative';\n\t\tactivePiece.style.removeProperty(\"top\");\n\t\tactivePiece.style.removeProperty(\"left\");\n\t\tactivePiece.style.removeProperty(\"z-index\");\n\t\tsetActivePiece(null);\n\t}\n}\n\n\tfunction promotePawn(pieceType: PieceType){\n\t\tif(promotionPawn===undefined){\n\t\t\treturn;\n\t\t}\n\t\tconst updatedPieces = pieces.reduce((results, piece) =>{\n\n\t\t\tif(samePosition(piece.position, promotionPawn?.position)){\n\t\t\t\tpiece.type = pieceType;\n\t\t\t\tconst teamType = (piece.team === TeamType.OUR)?\"w\":\"b\";\n\t\t\t\tlet image = \"\";\n\t\t\t\tswitch(pieceType){\n\t\t\t\t\tcase PieceType.ROOK:{\n\t\t\t\t\t\timage = \"rook\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase PieceType.BISHOP:{\n\t\t\t\t\t\timage = \"bishop\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase PieceType.KNIGHT:{\n\t\t\t\t\t\timage = \"knight\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase PieceType.QUEEN:{\n\t\t\t\t\t\timage = \"queen\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpiece.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n\t\t\t}\n\n\t\t\tresults.push(piece);\n\t\t\treturn results;\n\t\t}, [] as Piece[])\n\t\tsetPieces(updatedPieces);\n\t\tmodalRef.current?.classList.add(\"hidden\");\n\t\tsetAwaitingPromotion(false);\n\t\tif(online && online.status === 'playing' && lastMove){\n\t\t\tonline.socket?.emit('move', {\n\t\t\t\troomId: online.roomId,\n\t\t\t\tfrom: lastMove.from,\n\t\t\t\tto: lastMove.to,\n\t\t\t\tpromotionType: pieceType\n\t\t\t});\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t} else if(!online || online.status !== 'playing'){\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t}\n\t}\n\n\n\tfunction promotionTeamType(){\n\t\treturn (promotionPawn?.team === TeamType.OUR)?\"w\":\"b\";\n\t}\n\n\tfunction formatTime(totalSeconds: number | null){\n\t\tif(totalSeconds === null) return '--:--';\n\t\tconst m = Math.floor(totalSeconds / 60);\n\t\tconst s = totalSeconds % 60;\n\t\treturn `${m}:${s.toString().padStart(2,'0')}`;\n\t}\n\n\tlet board = [];\n\n\tfor(let y= YAXIS.length-1;y>=0;y--){\n\t\tfor(let x=0;x<XAXIS.length;x++){\n\n\t\t\t// check whether the sum of numbers x,y is even to draw each tile\n\t\t\tconst isEven = (x+y+2)%2===0;\n\t\t\tlet img = undefined;\n\n\t\t\tpieces.forEach(p=> {\n\t\t\t\tif(samePosition(p.position, {x:x, y:y})){\n\t\t\t\t\timg=p.image\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tlet currentPiece = pieces.find(p=> samePosition(p.position,grabPosition));\n\t\t\tlet highlight = (currentPiece?.possibleMoves) ? currentPiece.possibleMoves.some(p=> samePosition(p, {x:x , y:y})): false;\n\t\t\tconst targetHasPiece = pieces.some(p => samePosition(p.position, {x, y}));\n\t\t\tconst capture = highlight && targetHasPiece;\n\t\t\tconst handleClick = highlight ? () => performMove({ x, y }) : undefined;\n\t\t\t\n\t\t\tboard.push(\n\t\t\t\t\t<Tile key={`${x},${y}`} isEven={isEven} image={img} highlight={highlight} capture={capture} onClick={handleClick}/> \n\t\t\t)\n\t\t}\n\t}\n\n\n\treturn(\n\t\t<>\n\t\t<div id=\"pawn-promotion-modal\" className=\"hidden\" ref={modalRef}>\n\t\t\t<div className=\"modal-body\">\n\n\t\t\t<img onClick={()=> promotePawn(PieceType.ROOK)} src={`${process.env.PUBLIC_URL}/assets/images/rook_${promotionTeamType()}.svg`} alt=\"promote rook\"/>\n\t\t\t<img onClick={()=> promotePawn(PieceType.BISHOP)} src={`${process.env.PUBLIC_URL}/assets/images/bishop_${promotionTeamType()}.svg`} alt=\"promote bishop\"/>\n\t\t\t<img onClick={()=> promotePawn(PieceType.KNIGHT)} src={`${process.env.PUBLIC_URL}/assets/images/knight_${promotionTeamType()}.svg`} alt=\"promote knight\"/>\n\t\t\t<img onClick={()=> promotePawn(PieceType.QUEEN)} src={`${process.env.PUBLIC_URL}/assets/images/queen_${promotionTeamType()}.svg`} alt=\"promote queen\"/>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div className=\"board-layout\">\n\t\t\t<div className=\"timer-panel\" style={{visibility: (typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0 ? 'visible' : 'hidden')}}>\n\t\t\t\t<div className={`timer-block ${currentTurn==='black' ? 'active' : ''}`}>\n\t\t\t\t\t<div className=\"timer-label\">Black</div>\n\t\t\t\t\t<div className=\"timer-value\">{formatTime(blackTimeLeft)}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className={`timer-block ${currentTurn==='white' ? 'active' : ''}`}>\n\t\t\t\t\t<div className=\"timer-label\">White</div>\n\t\t\t\t\t<div className=\"timer-value\">{formatTime(whiteTimeLeft)}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div \n\t\t\t\tonMouseMove={(e)=>movePiece(e)} \n\t\t\t\tonMouseDown={e=> grabPiece(e)} \n\t\t\t\tonMouseUp={(e)=> dropPiece(e)}\n\t\t\t\tid=\"chessboard\"\n\t\t\t\tref={chessboardRef}>\n\t\t\t\t\t{board}\n\t\t\t</div>\n\t\t</div>\n\t\t</>\n\t)\n}"],"mappings":";;AAAA,OAAO,kBAAkB;AACzB,OAAOA,IAAI,MAAM,cAAc;AAC/B,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,KAAK,EAAEC,KAAK,EAASC,QAAQ,EAAEC,SAAS,EAAEC,iBAAiB,EAAYC,QAAQ,EAAEC,YAAY,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAUhI,eAAe,SAASC,UAAUA,CAAC;EAAEC,MAAM;EAAEC;AAAsE,CAAC,EAAC;EAAAC,EAAA;EACrH,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAqB,IAAI,CAAC;EACxE,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAW;IAACoB,CAAC,EAAC,CAAC,CAAC;IAAEC,CAAC,EAAC,CAAC;EAAC,CAAC,CAAC;EACxE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAUK,iBAAiB,CAAC;EAChE,MAAMmB,aAAa,GAAGzB,MAAM,CAAiB,IAAI,CAAC;EAClD,MAAM0B,OAAO,GAAG,IAAI5B,OAAO,CAAC,CAAC;EAC7B,MAAM,CAAC6B,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAAQ,CAAC;EAC3D,MAAM4B,QAAQ,GAAG7B,MAAM,CAAiB,IAAI,CAAC;EAC7C,MAAM,CAAC8B,WAAW,EAAEC,cAAc,CAAC,GAAG9B,QAAQ,CAAkB,OAAO,CAAC;EACxE,MAAM,CAAC+B,QAAQ,EAAEC,WAAW,CAAC,GAAGhC,QAAQ,CAAwC,IAAI,CAAC;EACrF,MAAM,CAACiC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlC,QAAQ,CAAU,KAAK,CAAC;;EAE1E;EACA,MAAM,CAACmC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpC,QAAQ,CAAgB,IAAI,CAAC;EACvE,MAAM,CAACqC,aAAa,EAAEC,gBAAgB,CAAC,GAAGtC,QAAQ,CAAgB,IAAI,CAAC;EAEvE,SAASuC,mBAAmBA,CAAA,EAAmB;IAC9C,IAAG,CAAC1B,MAAM,IAAIA,MAAM,CAAC2B,MAAM,KAAK,SAAS,IAAI,CAAC3B,MAAM,CAAC4B,OAAO,EAAC;MAC5D,OAAO,IAAI;IACZ;IACA,OAAO5B,MAAM,CAAC4B,OAAO,KAAK,OAAO,GAAGtC,QAAQ,CAACuC,GAAG,GAAGvC,QAAQ,CAACwC,QAAQ;EACrE;EAEA,SAASC,QAAQA,CAAA,EAAW;IAC3B,IAAG,CAAC/B,MAAM,IAAIA,MAAM,CAAC2B,MAAM,KAAK,SAAS,IAAI,CAAC3B,MAAM,CAAC4B,OAAO,EAAC;MAC5D,OAAO,IAAI,CAAC,CAAC;IACd;IACA,OAAO5B,MAAM,CAAC4B,OAAO,KAAKZ,WAAW;EACtC;;EAEA;EACA/B,SAAS,CAAC,MAAI;IACb,IAAGe,MAAM,IAAIA,MAAM,CAAC2B,MAAM,KAAK,SAAS,EAAC;MACxCV,cAAc,CAAC,OAAO,CAAC;MACvB,IAAG,OAAOhB,gBAAgB,KAAK,QAAQ,IAAIA,gBAAgB,GAAG,CAAC,EAAC;QAC/DsB,gBAAgB,CAACtB,gBAAgB,CAAC;QAClCwB,gBAAgB,CAACxB,gBAAgB,CAAC;MACnC,CAAC,MAAM;QACNsB,gBAAgB,CAAC,IAAI,CAAC;QACtBE,gBAAgB,CAAC,IAAI,CAAC;MACvB;IACD;EACD,CAAC,EAAE,CAACzB,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE2B,MAAM,EAAE1B,gBAAgB,CAAC,CAAC;;EAEtC;EACAhB,SAAS,CAAC,MAAI;IACb,MAAM+C,CAAC,GAAGhC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEiC,MAAM;IACxB,IAAG,CAACD,CAAC,EAAE;IACP,MAAME,MAAM,GAAIC,GAAQ,IAAK;MAC5B,IAAG;QACF,IAAGA,GAAG,CAACC,IAAI,KAAK,MAAM,EAAC;UACtB;QAAA;QAED,MAAMC,IAAc,GAAGF,GAAG,CAACE,IAAI;QAC/B,MAAMC,EAAY,GAAGH,GAAG,CAACG,EAAE;QAC3B,MAAMC,SAAgC,GAAGJ,GAAG,CAACK,aAAa;QAC1D9B,SAAS,CAAE+B,aAAa,IAAG;UAC1B,IAAIC,OAAO,GAAGD,aAAa;UAC3B,MAAME,WAAW,GAAGD,OAAO,CAACE,IAAI,CAACC,CAAC,IAAGnD,YAAY,CAACmD,CAAC,CAACC,QAAQ,EAAET,IAAI,CAAC,CAAC;UACpE,IAAG,CAACM,WAAW,EAAC;YACf,OAAOD,OAAO;UACf;UACA,MAAMK,eAAe,GAAG/D,OAAO,CAAC+D,eAAe,CAACV,IAAI,EAAEC,EAAE,EAAEK,WAAW,CAACP,IAAI,EAAEO,WAAW,CAACK,IAAI,EAAEN,OAAO,CAAC;UACtG,MAAMO,YAAY,GAAGN,WAAW,CAACK,IAAI,KAAK1D,QAAQ,CAACuC,GAAG,GAAC,CAAC,GAAC,CAAC,CAAC;UAC3D,IAAGkB,eAAe,EAAC;YAClBL,OAAO,GAAGA,OAAO,CAACQ,MAAM,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAG;cAC1C,IAAG1D,YAAY,CAAC0D,KAAK,CAACN,QAAQ,EAAET,IAAI,CAAC,EAAC;gBACrCe,KAAK,CAACC,SAAS,GAAC,KAAK;gBACrBD,KAAK,CAACN,QAAQ,CAACvC,CAAC,GAAC+B,EAAE,CAAC/B,CAAC;gBACrB6C,KAAK,CAACN,QAAQ,CAACtC,CAAC,GAAC8B,EAAE,CAAC9B,CAAC;gBACrB2C,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;cACpB,CAAC,MAAK,IAAG,CAAC1D,YAAY,CAAC0D,KAAK,CAACN,QAAQ,EAAE;gBAACvC,CAAC,EAAE+B,EAAE,CAAC/B,CAAC;gBAAEC,CAAC,EAAE8B,EAAE,CAAC9B,CAAC,GAAGyC;cAAY,CAAC,CAAC,EAAC;gBACzE,IAAGG,KAAK,CAAChB,IAAI,KAAG7C,SAAS,CAACgE,IAAI,EAAC;kBAC9BH,KAAK,CAACC,SAAS,GAAC,KAAK;gBACtB;gBACAF,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;cACpB;cACA,OAAOD,OAAO;YACf,CAAC,EAAE,EAAa,CAAC;UAClB,CAAC,MAAM;YACNT,OAAO,GAAGA,OAAO,CAACQ,MAAM,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAG;cAC1C,IAAG1D,YAAY,CAAC0D,KAAK,CAACN,QAAQ,EAAET,IAAI,CAAC,EAAC;gBACrCe,KAAK,CAACC,SAAS,GAAGG,IAAI,CAACC,GAAG,CAACpB,IAAI,CAAC7B,CAAC,GAAG8B,EAAE,CAAC9B,CAAC,CAAC,KAAG,CAAC,IAAK4C,KAAK,CAAChB,IAAI,KAAG7C,SAAS,CAACgE,IAAK;gBAC9EH,KAAK,CAACN,QAAQ,CAACvC,CAAC,GAAG+B,EAAE,CAAC/B,CAAC;gBACvB6C,KAAK,CAACN,QAAQ,CAACtC,CAAC,GAAG8B,EAAE,CAAC9B,CAAC;gBACvB2C,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;cACpB,CAAC,MAAM,IAAG,CAAC1D,YAAY,CAAC0D,KAAK,CAACN,QAAQ,EAAER,EAAE,CAAC,EAAC;gBAC3C,IAAGc,KAAK,CAAChB,IAAI,KAAG7C,SAAS,CAACgE,IAAI,EAAC;kBAC9BH,KAAK,CAACC,SAAS,GAAC,KAAK;gBACtB;gBACAF,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;cACpB;cACA,OAAOD,OAAO;YACf,CAAC,EAAE,EAAa,CAAC;UAClB;UACA,IAAGZ,SAAS,KAAKmB,SAAS,EAAC;YAC1B,MAAMC,QAAQ,GAAGjB,OAAO,CAACE,IAAI,CAACC,CAAC,IAAGnD,YAAY,CAACmD,CAAC,CAACC,QAAQ,EAAER,EAAE,CAAC,CAAC;YAC/D,IAAGqB,QAAQ,EAAC;cACXA,QAAQ,CAACvB,IAAI,GAAGG,SAAS;cACzB,MAAMqB,QAAQ,GAAID,QAAQ,CAACX,IAAI,KAAK1D,QAAQ,CAACuC,GAAG,GAAE,GAAG,GAAC,GAAG;cACzD,IAAIgC,KAAK,GAAG,EAAE;cACd,QAAOtB,SAAS;gBACf,KAAKhD,SAAS,CAACuE,IAAI;kBAAED,KAAK,GAAG,MAAM;kBAAE;gBACrC,KAAKtE,SAAS,CAACwE,MAAM;kBAAEF,KAAK,GAAG,QAAQ;kBAAE;gBACzC,KAAKtE,SAAS,CAACyE,MAAM;kBAAEH,KAAK,GAAG,QAAQ;kBAAE;gBACzC,KAAKtE,SAAS,CAAC0E,KAAK;kBAAEJ,KAAK,GAAG,OAAO;kBAAE;cACxC;cACA,IAAGA,KAAK,EAAC;gBACRF,QAAQ,CAACE,KAAK,GAAG,GAAGK,OAAO,CAACC,GAAG,CAACC,UAAU,kBAAkBP,KAAK,IAAID,QAAQ,MAAM;cACpF;YACD;UACD;UACA,OAAOlB,OAAO;QACf,CAAC,CAAC;QACFzB,cAAc,CAACoD,IAAI,IAAIA,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;MAC7D,CAAC,QAAMC,EAAE,EAAC;QACT;MAAA;IAEF,CAAC;IACDtC,CAAC,CAACuC,EAAE,CAAC,MAAM,EAAErC,MAAM,CAAC;IACpB,OAAO,MAAM;MACZF,CAAC,CAACwC,GAAG,CAAC,MAAM,EAAEtC,MAAM,CAAC;IACtB,CAAC;EACF,CAAC,EAAE,CAAClC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEiC,MAAM,EAAEjC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEyE,MAAM,CAAC,CAAC;EAEpC,SAASC,gBAAgBA,CAAA,EAAE;IAC1BhE,SAAS,CAAE+B,aAAa,IAAK;MAC5B,OAAOA,aAAa,CAACkC,GAAG,CAAC9B,CAAC,IAAE;QAC3BA,CAAC,CAAC+B,aAAa,GAAGhE,OAAO,CAACiE,aAAa,CAAChC,CAAC,EAAEJ,aAAa,CAAC;QACzD,OAAOI,CAAC;MAET,CAAC,CAAC;IACH,CAAC,CAAC;EACH;;EAEA;EACA5D,SAAS,CAAC,MAAI;IACb,IAAG,EAAE,OAAOgB,gBAAgB,KAAK,QAAQ,IAAIA,gBAAgB,GAAG,CAAC,CAAC,EAAE;IACpE,IAAG,CAACD,MAAM,IAAIA,MAAM,CAAC2B,MAAM,KAAK,SAAS,EAAE;IAC3C,IAAGP,iBAAiB,EAAE;IACtB,MAAM0D,QAAQ,GAAGC,WAAW,CAAC,MAAI;MAChC,IAAG/D,WAAW,KAAK,OAAO,EAAC;QAC1BO,gBAAgB,CAAC8C,IAAI,IAAI;UACxB,IAAGA,IAAI,KAAK,IAAI,EAAE,OAAOA,IAAI;UAC7B,MAAMW,IAAI,GAAGxB,IAAI,CAACyB,GAAG,CAAC,CAAC,EAAEZ,IAAI,GAAG,CAAC,CAAC;UAClC,OAAOW,IAAI;QACZ,CAAC,CAAC;MACH,CAAC,MAAM;QACNvD,gBAAgB,CAAC4C,IAAI,IAAI;UACxB,IAAGA,IAAI,KAAK,IAAI,EAAE,OAAOA,IAAI;UAC7B,MAAMW,IAAI,GAAGxB,IAAI,CAACyB,GAAG,CAAC,CAAC,EAAEZ,IAAI,GAAG,CAAC,CAAC;UAClC,OAAOW,IAAI;QACZ,CAAC,CAAC;MACH;IACD,CAAC,EAAE,IAAI,CAAC;IACR,OAAO,MAAME,aAAa,CAACJ,QAAQ,CAAC;EACrC,CAAC,EAAE,CAAC9E,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE2B,MAAM,EAAEX,WAAW,EAAEf,gBAAgB,EAAEmB,iBAAiB,CAAC,CAAC;EAEtE,SAAS+D,WAAWA,CAACC,MAAgB,EAAC;IACrC,MAAMC,YAAY,GAAG5E,MAAM,CAACmC,IAAI,CAAEC,CAAC,IAAInD,YAAY,CAACmD,CAAC,CAACC,QAAQ,EAAEzC,YAAY,CAAC,CAAC;IAC9E,IAAG,CAACgF,YAAY,EAAE;IAClB,MAAM;MAAE9E,CAAC;MAAEC;IAAE,CAAC,GAAG4E,MAAM;IACvB,MAAME,SAAS,GAAG1E,OAAO,CAAC2E,WAAW,CAAClF,YAAY,EAAE;MAACE,CAAC;MAACC;IAAC,CAAC,EAAE6E,YAAY,CAACjD,IAAI,EAACiD,YAAY,CAACrC,IAAI,EAAEvC,MAAM,CAAC;IACvG,MAAMsC,eAAe,GAAG/D,OAAO,CAAC+D,eAAe,CAAC1C,YAAY,EAAE;MAACE,CAAC;MAACC;IAAC,CAAC,EAAC6E,YAAY,CAACjD,IAAI,EAACiD,YAAY,CAACrC,IAAI,EAAEvC,MAAM,CAAC;IAChH,MAAMwC,YAAY,GAAGoC,YAAY,CAACrC,IAAI,KAAK1D,QAAQ,CAACuC,GAAG,GAAC,CAAC,GAAC,CAAC,CAAC;IAE5D,IAAG7B,MAAM,IAAIA,MAAM,CAAC2B,MAAM,KAAK,SAAS,EAAC;MACxC,MAAM6D,MAAM,GAAG9D,mBAAmB,CAAC,CAAC;MACpC,IAAG,CAACK,QAAQ,CAAC,CAAC,IAAIyD,MAAM,KAAK,IAAI,IAAIH,YAAY,CAACrC,IAAI,KAAKwC,MAAM,EAAC;QACjE;MACD;MACA;MACA,IAAG,OAAOvF,gBAAgB,KAAK,QAAQ,IAAIA,gBAAgB,GAAG,CAAC,EAAC;QAC/D,IAAIe,WAAW,KAAK,OAAO,IAAIM,aAAa,KAAK,CAAC,IAAMN,WAAW,KAAK,OAAO,IAAIQ,aAAa,KAAK,CAAE,EAAC;UACvG;QACD;MACD;IACD;IAEA,IAAGuB,eAAe,EAAC;MAClB,MAAM0C,aAAa,GAAGhF,MAAM,CAACyC,MAAM,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAG;QACrD,IAAG1D,YAAY,CAAC0D,KAAK,CAACN,QAAQ,EAAEzC,YAAY,CAAC,EAAC;UAC7C+C,KAAK,CAACC,SAAS,GAAC,KAAK;UACrBD,KAAK,CAACN,QAAQ,CAACvC,CAAC,GAACA,CAAC;UAClB6C,KAAK,CAACN,QAAQ,CAACtC,CAAC,GAACA,CAAC;UAClB2C,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;QACpB,CAAC,MAAK,IAAG,CAAC1D,YAAY,CAAC0D,KAAK,CAACN,QAAQ,EAAE;UAACvC,CAAC;UAAEC,CAAC,EAAEA,CAAC,GAACyC;QAAY,CAAC,CAAC,EAAC;UAC9D,IAAGG,KAAK,CAAChB,IAAI,KAAG7C,SAAS,CAACgE,IAAI,EAAC;YAC9BH,KAAK,CAACC,SAAS,GAAC,KAAK;UACtB;UACAF,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;QACpB;QACA,OAAOD,OAAO;MACf,CAAC,EAAE,EAAa,CAAC;MACjBzC,SAAS,CAAC+E,aAAa,CAAC;MACxBtE,WAAW,CAAC;QAACkB,IAAI,EAAEhC,YAAY;QAAEiC,EAAE,EAAE;UAAC/B,CAAC;UAAEC;QAAC;MAAC,CAAC,CAAC;MAC7C,IAAG,CAACR,MAAM,IAAIA,MAAM,CAAC2B,MAAM,KAAK,SAAS,EAAC;QACzCV,cAAc,CAACoD,IAAI,IAAIA,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;MAC7D,CAAC,MAAM;QAAA,IAAAqB,cAAA;QACN,CAAAA,cAAA,GAAA1F,MAAM,CAACiC,MAAM,cAAAyD,cAAA,uBAAbA,cAAA,CAAeC,IAAI,CAAC,MAAM,EAAE;UAAElB,MAAM,EAAEzE,MAAM,CAACyE,MAAM;UAAEpC,IAAI,EAAEhC,YAAY;UAAEiC,EAAE,EAAE;YAAC/B,CAAC;YAAEC;UAAC;QAAE,CAAC,CAAC;QACtFS,cAAc,CAACoD,IAAI,IAAIA,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;MAC7D;IACD,CAAC,MAAK,IAAGiB,SAAS,EAAC;MAClB,MAAMG,aAAa,GAAGhF,MAAM,CAACyC,MAAM,CAAC,CAACC,OAAO,EAACC,KAAK,KAAG;QACpD,IAAG1D,YAAY,CAAC0D,KAAK,CAACN,QAAQ,EAAEzC,YAAY,CAAC,EAAC;UAC7C+C,KAAK,CAACC,SAAS,GAAGG,IAAI,CAACC,GAAG,CAACpD,YAAY,CAACG,CAAC,GAACA,CAAC,CAAC,KAAG,CAAC,IAAI4C,KAAK,CAAChB,IAAI,KAAG7C,SAAS,CAACgE,IAAK;UAChFH,KAAK,CAACN,QAAQ,CAACvC,CAAC,GAACA,CAAC;UAClB6C,KAAK,CAACN,QAAQ,CAACtC,CAAC,GAACA,CAAC;UAClB,IAAIoF,YAAY,GAAGxC,KAAK,CAACJ,IAAI,KAAK1D,QAAQ,CAACuC,GAAG,GAAG,CAAC,GAAC,CAAC;UACpD,IAAGrB,CAAC,KAAGoF,YAAY,IAAIxC,KAAK,CAAChB,IAAI,KAAK7C,SAAS,CAACgE,IAAI,EAAC;YAAA,IAAAsC,iBAAA;YACpD,CAAAA,iBAAA,GAAA9E,QAAQ,CAAC+E,OAAO,cAAAD,iBAAA,uBAAhBA,iBAAA,CAAkBE,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;YAC5ClF,gBAAgB,CAACsC,KAAK,CAAC;YACvB/B,oBAAoB,CAAC,IAAI,CAAC;UAC3B;UACA8B,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;QACpB,CAAC,MAAK,IAAG,CAAE1D,YAAY,CAAC0D,KAAK,CAACN,QAAQ,EAAE;UAACvC,CAAC;UAACC;QAAC,CAAC,CAAE,EAAC;UAC/C,IAAG4C,KAAK,CAAChB,IAAI,KAAG7C,SAAS,CAACgE,IAAI,EAAC;YAC9BH,KAAK,CAACC,SAAS,GAAC,KAAK;UACtB;UACAF,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;QACpB;QACA,OAAOD,OAAO;MACf,CAAC,EAAE,EAAa,CAAC;MACjBzC,SAAS,CAAC+E,aAAa,CAAC;MACxBtE,WAAW,CAAC;QAACkB,IAAI,EAAEhC,YAAY;QAAEiC,EAAE,EAAE;UAAC/B,CAAC;UAAEC;QAAC;MAAC,CAAC,CAAC;MAC7C,IAAG,CAAEY,iBAAkB,EAAC;QACvB,IAAG,CAACpB,MAAM,IAAIA,MAAM,CAAC2B,MAAM,KAAK,SAAS,EAAC;UACzCV,cAAc,CAACoD,IAAI,IAAIA,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;QAC7D,CAAC,MAAM;UAAA,IAAA4B,eAAA;UACN,CAAAA,eAAA,GAAAjG,MAAM,CAACiC,MAAM,cAAAgE,eAAA,uBAAbA,eAAA,CAAeN,IAAI,CAAC,MAAM,EAAE;YAAElB,MAAM,EAAEzE,MAAM,CAACyE,MAAM;YAAEpC,IAAI,EAAEhC,YAAY;YAAEiC,EAAE,EAAE;cAAC/B,CAAC;cAAEC;YAAC;UAAE,CAAC,CAAC;UACtFS,cAAc,CAACoD,IAAI,IAAIA,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;QAC7D;MACD;IACD;EACD;EAEA,SAAS6B,kBAAkBA,CAACC,OAAe,EAAEC,OAAe,EAAC;IAC5D,MAAMC,UAAU,GAAG1F,aAAa,CAACmF,OAAO;IACxC,IAAG,CAACO,UAAU,EAAE,OAAO;MAAE9F,CAAC,EAAE,CAAC,CAAC;MAAEC,CAAC,EAAE,CAAC;IAAE,CAAC;IACvC,MAAM8F,IAAI,GAAGD,UAAU,CAACE,qBAAqB,CAAC,CAAC;IAC/C,MAAMC,IAAI,GAAGL,OAAO,GAAGG,IAAI,CAACG,IAAI;IAChC,MAAMC,IAAI,GAAGN,OAAO,GAAGE,IAAI,CAACK,GAAG;IAC/B,MAAMpG,CAAC,GAAGiD,IAAI,CAACoD,KAAK,CAACJ,IAAI,GAAG/G,QAAQ,CAAC;IACrC,MAAMe,CAAC,GAAGgD,IAAI,CAACC,GAAG,CAACD,IAAI,CAACqD,IAAI,CAAC,CAACH,IAAI,GAAGJ,IAAI,CAACQ,MAAM,IAAErH,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC9D,OAAO;MAAEc,CAAC;MAAEC;IAAE,CAAC;EAChB;EAEA,SAASuG,SAASA,CAACC,CAAmB,EAAC;IACtCtC,gBAAgB,CAAC,CAAC;IAElB,MAAM2B,UAAU,GAAG1F,aAAa,CAACmF,OAAO;IACxC,MAAMmB,OAAO,GAAGD,CAAC,CAAC5B,MAAqB;IAEvC,IAAG6B,OAAO,CAAClB,SAAS,CAACmB,QAAQ,CAAC,aAAa,CAAC,IAAIb,UAAU,EAAC;MAC1D,MAAM;QAAE9F,CAAC,EAAE4G,KAAK;QAAE3G,CAAC,EAAE4G;MAAM,CAAC,GAAGlB,kBAAkB,CAACc,CAAC,CAACb,OAAO,EAAEa,CAAC,CAACZ,OAAO,CAAC;MACvE,MAAMiB,WAAW,GAAG5G,MAAM,CAACmC,IAAI,CAACC,CAAC,IAAInD,YAAY,CAACmD,CAAC,CAACC,QAAQ,EAAE;QAACvC,CAAC,EAAE4G,KAAK;QAAE3G,CAAC,EAAE4G;MAAK,CAAC,CAAC,CAAC;;MAEpF;MACA,IAAGpH,MAAM,IAAIA,MAAM,CAAC2B,MAAM,KAAK,SAAS,EAAC;QACxC,MAAM6D,MAAM,GAAG9D,mBAAmB,CAAC,CAAC;QACpC,IAAG,CAACK,QAAQ,CAAC,CAAC,IAAIyD,MAAM,KAAK,IAAI,IAAI,CAAC6B,WAAW,IAAIA,WAAW,CAACrE,IAAI,KAAKwC,MAAM,EAAC;UAChF,OAAO,CAAC;QACT;MACD;MAEAlF,eAAe,CAAC;QAACC,CAAC,EAAC4G,KAAK;QAAE3G,CAAC,EAAC4G;MAAK,CAAC,CAAC;MAEnC,MAAM7G,CAAC,GAAGyG,CAAC,CAACb,OAAO,GAAG1G,QAAQ,GAAC,CAAC;MAChC,MAAMe,CAAC,GAAGwG,CAAC,CAACZ,OAAO,GAAG3G,QAAQ,GAAC,CAAC;MAChCwH,OAAO,CAACK,KAAK,CAACxE,QAAQ,GAAG,OAAO;MAChCmE,OAAO,CAACK,KAAK,CAACb,IAAI,GAAG,GAAGlG,CAAC,IAAI;MAC7B0G,OAAO,CAACK,KAAK,CAACX,GAAG,GAAG,GAAGnG,CAAC,IAAI;MAC5ByG,OAAO,CAACK,KAAK,CAACC,MAAM,GAAG,MAAM;MAE7BnH,cAAc,CAAC6G,OAAO,CAAC;IACxB;EACD;EAEA,SAASO,SAASA,CAACR,CAAmB,EAAC;IACtC,MAAMX,UAAU,GAAG1F,aAAa,CAACmF,OAAO;IACxC,IAAG3F,WAAW,IAAIkG,UAAU,EAAC;MAC5B,MAAM9F,CAAC,GAAGyG,CAAC,CAACb,OAAO,GAAG1G,QAAQ,GAAC,CAAC;MAChC,MAAMe,CAAC,GAAGwG,CAAC,CAACZ,OAAO,GAAG3G,QAAQ,GAAC,CAAC;MAEhC,MAAM6G,IAAI,GAAGD,UAAU,CAACE,qBAAqB,CAAC,CAAC;MAC/C,MAAMkB,IAAI,GAAGnB,IAAI,CAACG,IAAI;MACtB,MAAMiB,IAAI,GAAGpB,IAAI,CAACK,GAAG;MACrB,MAAMgB,IAAI,GAAGrB,IAAI,CAACsB,KAAK,GAAGnI,QAAQ;MAClC,MAAMoI,IAAI,GAAGvB,IAAI,CAACwB,MAAM,GAAGrI,QAAQ;MAEnCU,WAAW,CAACmH,KAAK,CAACxE,QAAQ,GAAG,OAAO;;MAEpC;MACA,IAAGvC,CAAC,GAAGkH,IAAI,EAAC;QACXtH,WAAW,CAACmH,KAAK,CAACb,IAAI,GAAG,GAAGgB,IAAI,IAAI;MACrC,CAAC,MAAM,IAAGlH,CAAC,GAAGoH,IAAI,EAAC;QAClBxH,WAAW,CAACmH,KAAK,CAACb,IAAI,GAAG,GAAGkB,IAAI,IAAI;MACrC,CAAC,MAAK;QACLxH,WAAW,CAACmH,KAAK,CAACb,IAAI,GAAG,GAAGlG,CAAC,IAAI;MAClC;;MAEA;MACA,IAAGC,CAAC,GAAGkH,IAAI,EAAC;QACXvH,WAAW,CAACmH,KAAK,CAACX,GAAG,GAAG,GAAGe,IAAI,IAAI;MACpC,CAAC,MAAM,IAAGlH,CAAC,GAAGqH,IAAI,EAAC;QAClB1H,WAAW,CAACmH,KAAK,CAACX,GAAG,GAAG,GAAGkB,IAAI,IAAI;MACpC,CAAC,MAAK;QACL1H,WAAW,CAACmH,KAAK,CAACX,GAAG,GAAG,GAAGnG,CAAC,IAAI;MACjC;IAED;EACD;EAEA,SAASuH,SAASA,CAACf,CAAmB,EAAC;IACtC,MAAMX,UAAU,GAAG1F,aAAa,CAACmF,OAAO;IACxC,IAAG3F,WAAW,IAAIkG,UAAU,EAAC;MAC5B,MAAMjB,MAAM,GAAGc,kBAAkB,CAACc,CAAC,CAACb,OAAO,EAAEa,CAAC,CAACZ,OAAO,CAAC;MACvDjB,WAAW,CAACC,MAAM,CAAC;MACnB;MACAjF,WAAW,CAACmH,KAAK,CAACxE,QAAQ,GAAE,UAAU;MACtC3C,WAAW,CAACmH,KAAK,CAACU,cAAc,CAAC,KAAK,CAAC;MACvC7H,WAAW,CAACmH,KAAK,CAACU,cAAc,CAAC,MAAM,CAAC;MACxC7H,WAAW,CAACmH,KAAK,CAACU,cAAc,CAAC,SAAS,CAAC;MAC3C5H,cAAc,CAAC,IAAI,CAAC;IACrB;EACD;EAEC,SAAS6H,WAAWA,CAACC,SAAoB,EAAC;IAAA,IAAAC,kBAAA;IACzC,IAAGtH,aAAa,KAAG6C,SAAS,EAAC;MAC5B;IACD;IACA,MAAM+B,aAAa,GAAGhF,MAAM,CAACyC,MAAM,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAI;MAEtD,IAAG1D,YAAY,CAAC0D,KAAK,CAACN,QAAQ,EAAEjC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEiC,QAAQ,CAAC,EAAC;QACxDM,KAAK,CAAChB,IAAI,GAAG8F,SAAS;QACtB,MAAMtE,QAAQ,GAAIR,KAAK,CAACJ,IAAI,KAAK1D,QAAQ,CAACuC,GAAG,GAAE,GAAG,GAAC,GAAG;QACtD,IAAIgC,KAAK,GAAG,EAAE;QACd,QAAOqE,SAAS;UACf,KAAK3I,SAAS,CAACuE,IAAI;YAAC;cACnBD,KAAK,GAAG,MAAM;cACd;YACD;UAEA,KAAKtE,SAAS,CAACwE,MAAM;YAAC;cACrBF,KAAK,GAAG,QAAQ;cAChB;YACD;UAEA,KAAKtE,SAAS,CAACyE,MAAM;YAAC;cACrBH,KAAK,GAAG,QAAQ;cAChB;YACD;UAEA,KAAKtE,SAAS,CAAC0E,KAAK;YAAC;cACpBJ,KAAK,GAAG,OAAO;cACf;YACD;QACD;QACAT,KAAK,CAACS,KAAK,GAAG,GAAGK,OAAO,CAACC,GAAG,CAACC,UAAU,kBAAkBP,KAAK,IAAID,QAAQ,MAAM;MACjF;MAEAT,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;MACnB,OAAOD,OAAO;IACf,CAAC,EAAE,EAAa,CAAC;IACjBzC,SAAS,CAAC+E,aAAa,CAAC;IACxB,CAAA0C,kBAAA,GAAApH,QAAQ,CAAC+E,OAAO,cAAAqC,kBAAA,uBAAhBA,kBAAA,CAAkBpC,SAAS,CAACqC,GAAG,CAAC,QAAQ,CAAC;IACzC/G,oBAAoB,CAAC,KAAK,CAAC;IAC3B,IAAGrB,MAAM,IAAIA,MAAM,CAAC2B,MAAM,KAAK,SAAS,IAAIT,QAAQ,EAAC;MAAA,IAAAmH,eAAA;MACpD,CAAAA,eAAA,GAAArI,MAAM,CAACiC,MAAM,cAAAoG,eAAA,uBAAbA,eAAA,CAAe1C,IAAI,CAAC,MAAM,EAAE;QAC3BlB,MAAM,EAAEzE,MAAM,CAACyE,MAAM;QACrBpC,IAAI,EAAEnB,QAAQ,CAACmB,IAAI;QACnBC,EAAE,EAAEpB,QAAQ,CAACoB,EAAE;QACfE,aAAa,EAAE0F;MAChB,CAAC,CAAC;MACFjH,cAAc,CAACoD,IAAI,IAAIA,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;IAC7D,CAAC,MAAM,IAAG,CAACrE,MAAM,IAAIA,MAAM,CAAC2B,MAAM,KAAK,SAAS,EAAC;MAChDV,cAAc,CAACoD,IAAI,IAAIA,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;IAC7D;EACD;EAGA,SAASiE,iBAAiBA,CAAA,EAAE;IAC3B,OAAQ,CAAAzH,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEmC,IAAI,MAAK1D,QAAQ,CAACuC,GAAG,GAAE,GAAG,GAAC,GAAG;EACtD;EAEA,SAAS0G,UAAUA,CAACC,YAA2B,EAAC;IAC/C,IAAGA,YAAY,KAAK,IAAI,EAAE,OAAO,OAAO;IACxC,MAAMC,CAAC,GAAGjF,IAAI,CAACoD,KAAK,CAAC4B,YAAY,GAAG,EAAE,CAAC;IACvC,MAAMxG,CAAC,GAAGwG,YAAY,GAAG,EAAE;IAC3B,OAAO,GAAGC,CAAC,IAAIzG,CAAC,CAAC0G,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAC,GAAG,CAAC,EAAE;EAC9C;EAEA,IAAIC,KAAK,GAAG,EAAE;EAEd,KAAI,IAAIpI,CAAC,GAAEnB,KAAK,CAACwJ,MAAM,GAAC,CAAC,EAACrI,CAAC,IAAE,CAAC,EAACA,CAAC,EAAE,EAAC;IAClC,KAAI,IAAID,CAAC,GAAC,CAAC,EAACA,CAAC,GAACnB,KAAK,CAACyJ,MAAM,EAACtI,CAAC,EAAE,EAAC;MAE9B;MACA,MAAMuI,MAAM,GAAG,CAACvI,CAAC,GAACC,CAAC,GAAC,CAAC,IAAE,CAAC,KAAG,CAAC;MAC5B,IAAIuI,GAAG,GAAGrF,SAAS;MAEnBjD,MAAM,CAACuI,OAAO,CAACnG,CAAC,IAAG;QAClB,IAAGnD,YAAY,CAACmD,CAAC,CAACC,QAAQ,EAAE;UAACvC,CAAC,EAACA,CAAC;UAAEC,CAAC,EAACA;QAAC,CAAC,CAAC,EAAC;UACvCuI,GAAG,GAAClG,CAAC,CAACgB,KAAK;QACZ;MACD,CAAC,CAAC;MAEF,IAAIwB,YAAY,GAAG5E,MAAM,CAACmC,IAAI,CAACC,CAAC,IAAGnD,YAAY,CAACmD,CAAC,CAACC,QAAQ,EAACzC,YAAY,CAAC,CAAC;MACzE,IAAI4I,SAAS,GAAI5D,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAET,aAAa,GAAIS,YAAY,CAACT,aAAa,CAACsE,IAAI,CAACrG,CAAC,IAAGnD,YAAY,CAACmD,CAAC,EAAE;QAACtC,CAAC,EAACA,CAAC;QAAGC,CAAC,EAACA;MAAC,CAAC,CAAC,CAAC,GAAE,KAAK;MACxH,MAAM2I,cAAc,GAAG1I,MAAM,CAACyI,IAAI,CAACrG,CAAC,IAAInD,YAAY,CAACmD,CAAC,CAACC,QAAQ,EAAE;QAACvC,CAAC;QAAEC;MAAC,CAAC,CAAC,CAAC;MACzE,MAAM4I,OAAO,GAAGH,SAAS,IAAIE,cAAc;MAC3C,MAAME,WAAW,GAAGJ,SAAS,GAAG,MAAM9D,WAAW,CAAC;QAAE5E,CAAC;QAAEC;MAAE,CAAC,CAAC,GAAGkD,SAAS;MAEvEkF,KAAK,CAACtF,IAAI,cACR1D,OAAA,CAACb,IAAI;QAAmB+J,MAAM,EAAEA,MAAO;QAACjF,KAAK,EAAEkF,GAAI;QAACE,SAAS,EAAEA,SAAU;QAACG,OAAO,EAAEA,OAAQ;QAACE,OAAO,EAAED;MAAY,GAAtG,GAAG9I,CAAC,IAAIC,CAAC,EAAE;QAAA+I,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA4F,CACpH,CAAC;IACF;EACD;EAGA,oBACC9J,OAAA,CAAAE,SAAA;IAAA6J,QAAA,gBACA/J,OAAA;MAAKgK,EAAE,EAAC,sBAAsB;MAACC,SAAS,EAAC,QAAQ;MAACC,GAAG,EAAE/I,QAAS;MAAA4I,QAAA,eAC/D/J,OAAA;QAAKiK,SAAS,EAAC,YAAY;QAAAF,QAAA,gBAE3B/J,OAAA;UAAK0J,OAAO,EAAEA,CAAA,KAAKrB,WAAW,CAAC1I,SAAS,CAACuE,IAAI,CAAE;UAACiG,GAAG,EAAE,GAAG7F,OAAO,CAACC,GAAG,CAACC,UAAU,uBAAuBkE,iBAAiB,CAAC,CAAC,MAAO;UAAC0B,GAAG,EAAC;QAAc;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACpJ9J,OAAA;UAAK0J,OAAO,EAAEA,CAAA,KAAKrB,WAAW,CAAC1I,SAAS,CAACwE,MAAM,CAAE;UAACgG,GAAG,EAAE,GAAG7F,OAAO,CAACC,GAAG,CAACC,UAAU,yBAAyBkE,iBAAiB,CAAC,CAAC,MAAO;UAAC0B,GAAG,EAAC;QAAgB;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAC1J9J,OAAA;UAAK0J,OAAO,EAAEA,CAAA,KAAKrB,WAAW,CAAC1I,SAAS,CAACyE,MAAM,CAAE;UAAC+F,GAAG,EAAE,GAAG7F,OAAO,CAACC,GAAG,CAACC,UAAU,yBAAyBkE,iBAAiB,CAAC,CAAC,MAAO;UAAC0B,GAAG,EAAC;QAAgB;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAC1J9J,OAAA;UAAK0J,OAAO,EAAEA,CAAA,KAAKrB,WAAW,CAAC1I,SAAS,CAAC0E,KAAK,CAAE;UAAC8F,GAAG,EAAE,GAAG7F,OAAO,CAACC,GAAG,CAACC,UAAU,wBAAwBkE,iBAAiB,CAAC,CAAC,MAAO;UAAC0B,GAAG,EAAC;QAAe;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAEN9J,OAAA;MAAKiK,SAAS,EAAC,cAAc;MAAAF,QAAA,gBAC5B/J,OAAA;QAAKiK,SAAS,EAAC,aAAa;QAACvC,KAAK,EAAE;UAAC2C,UAAU,EAAG,OAAOhK,gBAAgB,KAAK,QAAQ,IAAIA,gBAAgB,GAAG,CAAC,GAAG,SAAS,GAAG;QAAS,CAAE;QAAA0J,QAAA,gBACvI/J,OAAA;UAAKiK,SAAS,EAAE,eAAe7I,WAAW,KAAG,OAAO,GAAG,QAAQ,GAAG,EAAE,EAAG;UAAA2I,QAAA,gBACtE/J,OAAA;YAAKiK,SAAS,EAAC,aAAa;YAAAF,QAAA,EAAC;UAAK;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACxC9J,OAAA;YAAKiK,SAAS,EAAC,aAAa;YAAAF,QAAA,EAAEpB,UAAU,CAAC/G,aAAa;UAAC;YAAA+H,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1D,CAAC,eACN9J,OAAA;UAAKiK,SAAS,EAAE,eAAe7I,WAAW,KAAG,OAAO,GAAG,QAAQ,GAAG,EAAE,EAAG;UAAA2I,QAAA,gBACtE/J,OAAA;YAAKiK,SAAS,EAAC,aAAa;YAAAF,QAAA,EAAC;UAAK;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACxC9J,OAAA;YAAKiK,SAAS,EAAC,aAAa;YAAAF,QAAA,EAAEpB,UAAU,CAACjH,aAAa;UAAC;YAAAiI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAEN9J,OAAA;QACCsK,WAAW,EAAGlD,CAAC,IAAGQ,SAAS,CAACR,CAAC,CAAE;QAC/BmD,WAAW,EAAEnD,CAAC,IAAGD,SAAS,CAACC,CAAC,CAAE;QAC9BoD,SAAS,EAAGpD,CAAC,IAAIe,SAAS,CAACf,CAAC,CAAE;QAC9B4C,EAAE,EAAC,YAAY;QACfE,GAAG,EAAEnJ,aAAc;QAAAgJ,QAAA,EACjBf;MAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA,eACJ,CAAC;AAEL;AAACxJ,EAAA,CAvcuBH,UAAU;AAAAsK,EAAA,GAAVtK,UAAU;AAAA,IAAAsK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}