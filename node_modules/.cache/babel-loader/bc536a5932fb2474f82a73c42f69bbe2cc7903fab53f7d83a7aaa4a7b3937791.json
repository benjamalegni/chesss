{"ast":null,"code":"import Referee from \"../Referee\";\nexport const bishopMove = (initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState) => {\n  // diagonal movement implies that difference between axis should be equal\n  if (Math.abs(dx) === Math.abs(dy)) {\n    // iterate all positions between actual position and desired position (dx or dy)\n    for (let i = 1; i < Math.abs(dx); i++) {\n      // change passedPosition in each iteration and multiply with step depending on each of the 4 directions is heading\n      const passedPosition = {\n        x: initialPosition.x + i * stepX,\n        y: initialPosition.y + i * stepY\n      };\n\n      // if any intermediate tile is occupied, then is invalid\n      if (Referee.tileIsOccupied(passedPosition, boardState)) {\n        return false;\n      }\n    }\n\n    // return true (if is not occupied by our team) or (is ocuppied by opponent)\n    return !Referee.tileIsOccupied(desiredPosition, boardState) || Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n  }\n  return false;\n};","map":{"version":3,"names":["Referee","bishopMove","initialPosition","desiredPosition","team","dx","dy","stepX","stepY","boardState","Math","abs","i","passedPosition","x","y","tileIsOccupied","tileIsOccupiedByOpponent"],"sources":["/home/Outer/Documents/chesss/src/referee/rules/BishopRules.ts"],"sourcesContent":["import { Piece, Position, TeamType } from \"../../Constants\";\nimport Referee from \"../Referee\"\n\nexport const bishopMove=(initialPosition:Position, desiredPosition: Position, team:TeamType,dx:number, dy:number, stepX:number, stepY:number, boardState:Piece[]):boolean=>{\n            // diagonal movement implies that difference between axis should be equal\n            if (Math.abs(dx) === Math.abs(dy)) {\n\n                // iterate all positions between actual position and desired position (dx or dy)\n                for (let i = 1; i < Math.abs(dx); i++) {\n                    // change passedPosition in each iteration and multiply with step depending on each of the 4 directions is heading\n                    const passedPosition: Position = {\n                        x: initialPosition.x + i * stepX,\n                        y: initialPosition.y + i * stepY,\n                    };\n\n                    // if any intermediate tile is occupied, then is invalid\n                    if (Referee.tileIsOccupied(passedPosition, boardState)) {\n                        return false;\n                    }\n                }\n\n                // return true (if is not occupied by our team) or (is ocuppied by opponent)\n                return !Referee.tileIsOccupied(desiredPosition, boardState) ||\n                    Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n            }\n        return false;\n    }"],"mappings":"AACA,OAAOA,OAAO,MAAM,YAAY;AAEhC,OAAO,MAAMC,UAAU,GAACA,CAACC,eAAwB,EAAEC,eAAyB,EAAEC,IAAa,EAACC,EAAS,EAAEC,EAAS,EAAEC,KAAY,EAAEC,KAAY,EAAEC,UAAkB,KAAW;EAC/J;EACA,IAAIC,IAAI,CAACC,GAAG,CAACN,EAAE,CAAC,KAAKK,IAAI,CAACC,GAAG,CAACL,EAAE,CAAC,EAAE;IAE/B;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACC,GAAG,CAACN,EAAE,CAAC,EAAEO,CAAC,EAAE,EAAE;MACnC;MACA,MAAMC,cAAwB,GAAG;QAC7BC,CAAC,EAAEZ,eAAe,CAACY,CAAC,GAAGF,CAAC,GAAGL,KAAK;QAChCQ,CAAC,EAAEb,eAAe,CAACa,CAAC,GAAGH,CAAC,GAAGJ;MAC/B,CAAC;;MAED;MACA,IAAIR,OAAO,CAACgB,cAAc,CAACH,cAAc,EAAEJ,UAAU,CAAC,EAAE;QACpD,OAAO,KAAK;MAChB;IACJ;;IAEA;IACA,OAAO,CAACT,OAAO,CAACgB,cAAc,CAACb,eAAe,EAAEM,UAAU,CAAC,IACvDT,OAAO,CAACiB,wBAAwB,CAACd,eAAe,EAAEM,UAAU,EAAEL,IAAI,CAAC;EAC3E;EACJ,OAAO,KAAK;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}