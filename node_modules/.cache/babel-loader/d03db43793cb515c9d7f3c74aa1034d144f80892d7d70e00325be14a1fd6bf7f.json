{"ast":null,"code":"import Referee from \"../Referee\";\nexport const kingMove = (initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState) => {\n  //one tile movement\n  if (Math.abs(dx) <= 1 && Math.abs(dy) <= 1) {\n    return !Referee.tileIsOccupied(desiredPosition, boardState) || Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n  }\n  return false;\n};\nexport const GetPossibleKingMoves = (piece, boardState) => {\n  const possibleMoves = [];\n  for (let y = -1; y <= 1; y++) {\n    for (let x = -1; x <= 1; x++) {\n      if (x === 0 && y === 0) {\n        continue;\n      }\n      const desiredPosition = {\n        x: piece.position.x + x,\n        y: piece.position.y + y\n      };\n      if (kingMove(piece.position, desiredPosition, piece.team, x, y, 0, 0, boardState)) {\n        possibleMoves.push(desiredPosition);\n      }\n    }\n  }\n  return possibleMoves;\n};\n_c = GetPossibleKingMoves;\nvar _c;\n$RefreshReg$(_c, \"GetPossibleKingMoves\");","map":{"version":3,"names":["Referee","kingMove","initialPosition","desiredPosition","team","dx","dy","stepX","stepY","boardState","Math","abs","tileIsOccupied","tileIsOccupiedByOpponent","GetPossibleKingMoves","piece","possibleMoves","y","x","position","push","_c","$RefreshReg$"],"sources":["/home/Outer/Documents/chesss/src/referee/rules/KingRules.ts"],"sourcesContent":["import { Piece, Position, TeamType } from \"../../Constants\";\nimport Referee from \"../Referee\"\n\nexport const kingMove=(initialPosition:Position, desiredPosition: Position, team:TeamType,dx:number, dy:number, stepX:number, stepY:number, boardState:Piece[]):boolean=>{\n            //one tile movement\n            if (Math.abs(dx) <= 1 && Math.abs(dy) <= 1){\n                return (!Referee.tileIsOccupied(desiredPosition, boardState) || Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team));\n            }\n        return false;\n}\n\nexport const GetPossibleKingMoves = (piece:Piece, boardState:Piece[]):Position[]=>{\n    const possibleMoves:Position[] = [];\n \n    for(let y=-1;y<=1;y++){\n        for(let x=-1;x<=1;x++){\n            if(x===0 && y===0){\n                continue;\n            }\n            const desiredPosition:Position = {\n                x:piece.position.x + x,\n                y:piece.position.y + y\n            }\n\n            if(kingMove(piece.position, desiredPosition, piece.team, x, y, 0, 0, boardState)){\n                possibleMoves.push(desiredPosition);\n            }\n        }\n    }\n    return possibleMoves;\n}"],"mappings":"AACA,OAAOA,OAAO,MAAM,YAAY;AAEhC,OAAO,MAAMC,QAAQ,GAACA,CAACC,eAAwB,EAAEC,eAAyB,EAAEC,IAAa,EAACC,EAAS,EAAEC,EAAS,EAAEC,KAAY,EAAEC,KAAY,EAAEC,UAAkB,KAAW;EAC7J;EACA,IAAIC,IAAI,CAACC,GAAG,CAACN,EAAE,CAAC,IAAI,CAAC,IAAIK,IAAI,CAACC,GAAG,CAACL,EAAE,CAAC,IAAI,CAAC,EAAC;IACvC,OAAQ,CAACN,OAAO,CAACY,cAAc,CAACT,eAAe,EAAEM,UAAU,CAAC,IAAIT,OAAO,CAACa,wBAAwB,CAACV,eAAe,EAAEM,UAAU,EAAEL,IAAI,CAAC;EACvI;EACJ,OAAO,KAAK;AACpB,CAAC;AAED,OAAO,MAAMU,oBAAoB,GAAGA,CAACC,KAAW,EAAEN,UAAkB,KAAc;EAC9E,MAAMO,aAAwB,GAAG,EAAE;EAEnC,KAAI,IAAIC,CAAC,GAAC,CAAC,CAAC,EAACA,CAAC,IAAE,CAAC,EAACA,CAAC,EAAE,EAAC;IAClB,KAAI,IAAIC,CAAC,GAAC,CAAC,CAAC,EAACA,CAAC,IAAE,CAAC,EAACA,CAAC,EAAE,EAAC;MAClB,IAAGA,CAAC,KAAG,CAAC,IAAID,CAAC,KAAG,CAAC,EAAC;QACd;MACJ;MACA,MAAMd,eAAwB,GAAG;QAC7Be,CAAC,EAACH,KAAK,CAACI,QAAQ,CAACD,CAAC,GAAGA,CAAC;QACtBD,CAAC,EAACF,KAAK,CAACI,QAAQ,CAACF,CAAC,GAAGA;MACzB,CAAC;MAED,IAAGhB,QAAQ,CAACc,KAAK,CAACI,QAAQ,EAAEhB,eAAe,EAAEY,KAAK,CAACX,IAAI,EAAEc,CAAC,EAAED,CAAC,EAAE,CAAC,EAAE,CAAC,EAAER,UAAU,CAAC,EAAC;QAC7EO,aAAa,CAACI,IAAI,CAACjB,eAAe,CAAC;MACvC;IACJ;EACJ;EACA,OAAOa,aAAa;AACxB,CAAC;AAAAK,EAAA,GAnBYP,oBAAoB;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}