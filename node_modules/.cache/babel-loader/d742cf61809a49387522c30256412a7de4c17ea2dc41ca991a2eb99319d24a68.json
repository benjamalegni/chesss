{"ast":null,"code":"var _jsxFileName = \"/home/Outer/Documents/chesss/src/components/Chessboard/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport Referee from '../../referee/Referee';\nimport { useEffect, useRef, useState } from 'react';\nimport { XAXIS, YAXIS, TeamType, PieceType, initialBoardState, GRIDSIZE, samePosition } from '../../Constants';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chessboard({\n  online\n}) {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [grabPosition, setGrabPosition] = useState({\n    x: -1,\n    y: -1\n  });\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const [promotionPawn, setPromotionPawn] = useState();\n  const modalRef = useRef(null);\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [lastMove, setLastMove] = useState(null);\n  const [awaitingPromotion, setAwaitingPromotion] = useState(false);\n  function getAllowedTeamForMe() {\n    if (!online || online.status !== 'playing' || !online.myColor) {\n      return null;\n    }\n    return online.myColor === 'white' ? TeamType.OUR : TeamType.OPPONENT;\n  }\n  function isMyTurn() {\n    if (!online || online.status !== 'playing' || !online.myColor) {\n      return true; // offline mode: always allowed\n    }\n    return online.myColor === currentTurn;\n  }\n  useEffect(() => {\n    if (online && online.status === 'playing') {\n      setCurrentTurn('white');\n    }\n  }, [online === null || online === void 0 ? void 0 : online.status]);\n  useEffect(() => {\n    const s = online === null || online === void 0 ? void 0 : online.socket;\n    if (!s) return;\n    const onMessage = ev => {\n      try {\n        const msg = JSON.parse(ev.data);\n        if (msg.type === 'move' && online !== null && online !== void 0 && online.roomId && msg.roomId === online.roomId) {\n          const from = msg.from;\n          const to = msg.to;\n          const promotion = msg.promotionType;\n          setPieces(currentPieces => {\n            let updated = currentPieces;\n            const movingPiece = updated.find(p => samePosition(p.position, from));\n            if (!movingPiece) {\n              return updated;\n            }\n            const isEnPassantMove = Referee.isEnPassantMove(from, to, movingPiece.type, movingPiece.team, updated);\n            const pawnDirecion = movingPiece.team === TeamType.OUR ? 1 : -1;\n            if (isEnPassantMove) {\n              updated = updated.reduce((results, piece) => {\n                if (samePosition(piece.position, from)) {\n                  piece.enPassant = false;\n                  piece.position.x = to.x;\n                  piece.position.y = to.y;\n                  results.push(piece);\n                } else if (!samePosition(piece.position, {\n                  x: to.x,\n                  y: to.y - pawnDirecion\n                })) {\n                  if (piece.type === PieceType.PAWN) {\n                    piece.enPassant = false;\n                  }\n                  results.push(piece);\n                }\n                return results;\n              }, []);\n            } else {\n              updated = updated.reduce((results, piece) => {\n                if (samePosition(piece.position, from)) {\n                  piece.enPassant = Math.abs(from.y - to.y) === 2 && piece.type === PieceType.PAWN;\n                  piece.position.x = to.x;\n                  piece.position.y = to.y;\n                  results.push(piece);\n                } else if (!samePosition(piece.position, to)) {\n                  if (piece.type === PieceType.PAWN) {\n                    piece.enPassant = false;\n                  }\n                  results.push(piece);\n                }\n                return results;\n              }, []);\n            }\n            if (promotion !== undefined) {\n              const promoted = updated.find(p => samePosition(p.position, to));\n              if (promoted) {\n                promoted.type = promotion;\n                const teamType = promoted.team === TeamType.OUR ? \"w\" : \"b\";\n                let image = \"\";\n                switch (promotion) {\n                  case PieceType.ROOK:\n                    image = \"rook\";\n                    break;\n                  case PieceType.BISHOP:\n                    image = \"bishop\";\n                    break;\n                  case PieceType.KNIGHT:\n                    image = \"knight\";\n                    break;\n                  case PieceType.QUEEN:\n                    image = \"queen\";\n                    break;\n                }\n                if (image) {\n                  promoted.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n                }\n              }\n            }\n            return updated;\n          });\n          setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n        }\n      } catch (_e) {\n        // ignore\n      }\n    };\n    s.addEventListener('message', onMessage);\n    return () => {\n      s.removeEventListener('message', onMessage);\n    };\n  }, [online === null || online === void 0 ? void 0 : online.socket, online === null || online === void 0 ? void 0 : online.roomId]);\n  function updateValidMoves() {\n    setPieces(currentPieces => {\n      return currentPieces.map(p => {\n        p.possibleMoves = referee.getValidMoves(p, currentPieces);\n        return p;\n      });\n    });\n  }\n  function grabPiece(e) {\n    updateValidMoves();\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      const grabX = Math.floor((e.clientX - chessboard.offsetLeft) / GRIDSIZE);\n      const grabY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / GRIDSIZE));\n      const pieceAtTile = pieces.find(p => samePosition(p.position, {\n        x: grabX,\n        y: grabY\n      }));\n\n      // Online restrictions\n      if (online && online.status === 'playing') {\n        const myTeam = getAllowedTeamForMe();\n        if (!isMyTurn() || myTeam === null || !pieceAtTile || pieceAtTile.team !== myTeam) {\n          return; // can't grab\n        }\n      }\n      setGrabPosition({\n        x: grabX,\n        y: grabY\n      });\n      const x = e.clientX - GRIDSIZE / 2;\n      const y = e.clientY - GRIDSIZE / 2;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      activePiece.style.position = \"absolute\";\n\n      // x axis limits\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      // y axis limits\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      // substracted 800 to align with chessboard axis (starting from bottom left)\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRIDSIZE);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / GRIDSIZE));\n      const currentPiece = pieces.find(p => samePosition(p.position, grabPosition));\n      if (currentPiece) {\n        const validMove = referee.isValidMove(grabPosition, {\n          x,\n          y\n        }, currentPiece.type, currentPiece.team, pieces);\n        const isEnPassantMove = Referee.isEnPassantMove(grabPosition, {\n          x,\n          y\n        }, currentPiece.type, currentPiece.team, pieces);\n        const pawnDirecion = currentPiece.team === TeamType.OUR ? 1 : -1;\n        if (online && online.status === 'playing') {\n          const myTeam = getAllowedTeamForMe();\n          if (!isMyTurn() || myTeam === null || currentPiece.team !== myTeam) {\n            // Reset piece position and bail\n            activePiece.style.position = 'relative';\n            activePiece.style.removeProperty(\"top\");\n            activePiece.style.removeProperty(\"left\");\n            setActivePiece(null);\n            return;\n          }\n        }\n        if (isEnPassantMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (samePosition(piece.position, grabPosition)) {\n              piece.enPassant = false;\n              piece.position.x = x;\n              piece.position.y = y;\n              results.push(piece);\n            } else if (!samePosition(piece.position, {\n              x,\n              y: y - pawnDirecion\n            })) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n          setLastMove({\n            from: grabPosition,\n            to: {\n              x,\n              y\n            }\n          });\n          if (!online || online.status !== 'playing') {\n            // offline toggle turn for consistency\n            setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n          } else {\n            var _online$socket;\n            // send immediately (no promotion possible on en passant)\n            (_online$socket = online.socket) === null || _online$socket === void 0 ? void 0 : _online$socket.send(JSON.stringify({\n              type: 'move',\n              roomId: online.roomId,\n              from: grabPosition,\n              to: {\n                x,\n                y\n              }\n            }));\n            setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n          }\n        } else if (validMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (samePosition(piece.position, grabPosition)) {\n              // SPECIAL MOVE\n              piece.enPassant = Math.abs(grabPosition.y - y) === 2 && piece.type === PieceType.PAWN;\n              piece.position.x = x;\n              piece.position.y = y;\n\n              // pawn promotion row\n              let promotionRow = piece.team === TeamType.OUR ? 7 : 0;\n              if (y === promotionRow && piece.type === PieceType.PAWN) {\n                var _modalRef$current;\n                //make promotion\n                (_modalRef$current = modalRef.current) === null || _modalRef$current === void 0 ? void 0 : _modalRef$current.classList.remove(\"hidden\");\n                setPromotionPawn(piece);\n                setAwaitingPromotion(true);\n              }\n              results.push(piece);\n            } else if (!samePosition(piece.position, {\n              x,\n              y\n            })) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n          setLastMove({\n            from: grabPosition,\n            to: {\n              x,\n              y\n            }\n          });\n          if (!awaitingPromotion) {\n            if (!online || online.status !== 'playing') {\n              setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n            } else {\n              var _online$socket2;\n              // no promotion: send immediately\n              (_online$socket2 = online.socket) === null || _online$socket2 === void 0 ? void 0 : _online$socket2.send(JSON.stringify({\n                type: 'move',\n                roomId: online.roomId,\n                from: grabPosition,\n                to: {\n                  x,\n                  y\n                }\n              }));\n              setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n            }\n          }\n        } else {\n          //reset piece position\n          activePiece.style.position = 'relative';\n          activePiece.style.removeProperty(\"top\");\n          activePiece.style.removeProperty(\"left\");\n        }\n      }\n      setActivePiece(null);\n    }\n  }\n  function promotePawn(pieceType) {\n    var _modalRef$current2;\n    if (promotionPawn === undefined) {\n      return;\n    }\n    const updatedPieces = pieces.reduce((results, piece) => {\n      if (samePosition(piece.position, promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.position)) {\n        piece.type = pieceType;\n        const teamType = piece.team === TeamType.OUR ? \"w\" : \"b\";\n        let image = \"\";\n        switch (pieceType) {\n          case PieceType.ROOK:\n            {\n              image = \"rook\";\n              break;\n            }\n          case PieceType.BISHOP:\n            {\n              image = \"bishop\";\n              break;\n            }\n          case PieceType.KNIGHT:\n            {\n              image = \"knight\";\n              break;\n            }\n          case PieceType.QUEEN:\n            {\n              image = \"queen\";\n              break;\n            }\n        }\n        piece.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n      }\n      results.push(piece);\n      return results;\n    }, []);\n    setPieces(updatedPieces);\n    (_modalRef$current2 = modalRef.current) === null || _modalRef$current2 === void 0 ? void 0 : _modalRef$current2.classList.add(\"hidden\");\n    setAwaitingPromotion(false);\n    if (online && online.status === 'playing' && lastMove) {\n      var _online$socket3;\n      (_online$socket3 = online.socket) === null || _online$socket3 === void 0 ? void 0 : _online$socket3.send(JSON.stringify({\n        type: 'move',\n        roomId: online.roomId,\n        from: lastMove.from,\n        to: lastMove.to,\n        promotionType: pieceType\n      }));\n      setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n    } else if (!online || online.status !== 'playing') {\n      setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n    }\n  }\n  function promotionTeamType() {\n    return (promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.team) === TeamType.OUR ? \"w\" : \"b\";\n  }\n  let board = [];\n  for (let y = YAXIS.length - 1; y >= 0; y--) {\n    for (let x = 0; x < XAXIS.length; x++) {\n      // check whether the sum of numbers x,y is even to draw each tile\n      const isEven = (x + y + 2) % 2 === 0;\n      let img = undefined;\n      pieces.forEach(p => {\n        if (samePosition(p.position, {\n          x: x,\n          y: y\n        })) {\n          img = p.image;\n        }\n      });\n      let currentPiece = pieces.find(p => samePosition(p.position, grabPosition));\n      let highlight = currentPiece !== null && currentPiece !== void 0 && currentPiece.possibleMoves ? currentPiece.possibleMoves.some(p => samePosition(p, {\n        x: x,\n        y: y\n      })) : false;\n      board.push(/*#__PURE__*/_jsxDEV(Tile, {\n        isEven: isEven,\n        image: img,\n        highlight: highlight\n      }, `${x},${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 21\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pawn-promotion-modal\",\n      className: \"hidden\",\n      ref: modalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.ROOK),\n          src: `${process.env.PUBLIC_URL}/assets/images/rook_${promotionTeamType()}.svg`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.BISHOP),\n          src: `${process.env.PUBLIC_URL}/assets/images/bishop_${promotionTeamType()}.svg`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.KNIGHT),\n          src: `${process.env.PUBLIC_URL}/assets/images/knight_${promotionTeamType()}.svg`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.QUEEN),\n          src: `${process.env.PUBLIC_URL}/assets/images/queen_${promotionTeamType()}.svg`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseMove: e => movePiece(e),\n      onMouseDown: e => grabPiece(e),\n      onMouseUp: e => dropPiece(e),\n      id: \"chessboard\",\n      ref: chessboardRef,\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Chessboard, \"hJSiDRkDxOl2eBQzjUVyDmph6CE=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Tile","Referee","useEffect","useRef","useState","XAXIS","YAXIS","TeamType","PieceType","initialBoardState","GRIDSIZE","samePosition","jsxDEV","_jsxDEV","Fragment","_Fragment","Chessboard","online","_s","activePiece","setActivePiece","grabPosition","setGrabPosition","x","y","pieces","setPieces","chessboardRef","referee","promotionPawn","setPromotionPawn","modalRef","currentTurn","setCurrentTurn","lastMove","setLastMove","awaitingPromotion","setAwaitingPromotion","getAllowedTeamForMe","status","myColor","OUR","OPPONENT","isMyTurn","s","socket","onMessage","ev","msg","JSON","parse","data","type","roomId","from","to","promotion","promotionType","currentPieces","updated","movingPiece","find","p","position","isEnPassantMove","team","pawnDirecion","reduce","results","piece","enPassant","push","PAWN","Math","abs","undefined","promoted","teamType","image","ROOK","BISHOP","KNIGHT","QUEEN","process","env","PUBLIC_URL","prev","_e","addEventListener","removeEventListener","updateValidMoves","map","possibleMoves","getValidMoves","grabPiece","e","chessboard","current","element","target","classList","contains","grabX","floor","clientX","offsetLeft","grabY","ceil","clientY","offsetTop","pieceAtTile","myTeam","style","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","currentPiece","validMove","isValidMove","removeProperty","updatedPieces","_online$socket","send","stringify","promotionRow","_modalRef$current","remove","_online$socket2","promotePawn","pieceType","_modalRef$current2","add","_online$socket3","promotionTeamType","board","length","isEven","img","forEach","highlight","some","fileName","_jsxFileName","lineNumber","columnNumber","children","id","className","ref","onClick","src","onMouseMove","onMouseDown","onMouseUp","_c","$RefreshReg$"],"sources":["/home/Outer/Documents/chesss/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Tile from '../Tile/Tile'\nimport Referee from '../../referee/Referee'\nimport { useEffect, useRef, useState } from 'react';\nimport { XAXIS, YAXIS, Piece, TeamType, PieceType, initialBoardState, Position, GRIDSIZE, samePosition } from '../../Constants';\n\ninterface OnlineProps{\n    socket: WebSocket | null;\n    status: 'offline' | 'waiting' | 'playing';\n    roomId?: string;\n    myColor?: 'white' | 'black';\n}\n\nexport default function Chessboard({ online }: { online?: OnlineProps }){\nconst [activePiece, setActivePiece] = useState<HTMLElement | null>(null)\nconst [grabPosition, setGrabPosition] = useState<Position>({x:-1, y:-1});\nconst [pieces, setPieces] = useState<Piece[]>(initialBoardState);\nconst chessboardRef = useRef<HTMLDivElement>(null);\nconst referee = new Referee();\nconst [promotionPawn, setPromotionPawn] = useState<Piece>();\nconst modalRef = useRef<HTMLDivElement>(null);\nconst [currentTurn, setCurrentTurn] = useState<'white'|'black'>('white');\nconst [lastMove, setLastMove] = useState<{from: Position, to: Position} | null>(null);\nconst [awaitingPromotion, setAwaitingPromotion] = useState<boolean>(false);\n\nfunction getAllowedTeamForMe(): TeamType | null{\n    if(!online || online.status !== 'playing' || !online.myColor){\n        return null;\n    }\n    return online.myColor === 'white' ? TeamType.OUR : TeamType.OPPONENT;\n}\n\nfunction isMyTurn(): boolean{\n    if(!online || online.status !== 'playing' || !online.myColor){\n        return true; // offline mode: always allowed\n    }\n    return online.myColor === currentTurn;\n}\n\nuseEffect(()=>{\n    if(online && online.status === 'playing'){\n        setCurrentTurn('white');\n    }\n}, [online?.status]);\n\nuseEffect(()=>{\n    const s = online?.socket;\n    if(!s) return;\n    const onMessage = (ev: MessageEvent) => {\n        try{\n            const msg = JSON.parse(ev.data);\n            if(msg.type === 'move' && online?.roomId && msg.roomId === online.roomId){\n                const from: Position = msg.from;\n                const to: Position = msg.to;\n                const promotion: PieceType | undefined = msg.promotionType;\n                setPieces((currentPieces)=>{\n                    let updated = currentPieces;\n                    const movingPiece = updated.find(p=> samePosition(p.position, from));\n                    if(!movingPiece){\n                        return updated;\n                    }\n                    const isEnPassantMove = Referee.isEnPassantMove(from, to, movingPiece.type, movingPiece.team, updated);\n                    const pawnDirecion = movingPiece.team === TeamType.OUR?1:-1;\n                    if(isEnPassantMove){\n                        updated = updated.reduce((results, piece)=>{\n                            if(samePosition(piece.position, from)){\n                                piece.enPassant=false;\n                                piece.position.x=to.x;\n                                piece.position.y=to.y;\n                                results.push(piece);\n                            }else if(!samePosition(piece.position, {x: to.x, y: to.y - pawnDirecion})){\n                                if(piece.type===PieceType.PAWN){\n                                    piece.enPassant=false;\n                                }\n                                results.push(piece);\n                            }\n                            return results;\n                        }, [] as Piece[]);\n                    } else {\n                        updated = updated.reduce((results, piece)=>{\n                            if(samePosition(piece.position, from)){\n                                piece.enPassant = Math.abs(from.y - to.y)===2 && (piece.type===PieceType.PAWN);\n                                piece.position.x = to.x;\n                                piece.position.y = to.y;\n                                results.push(piece);\n                            } else if(!samePosition(piece.position, to)){\n                                if(piece.type===PieceType.PAWN){\n                                    piece.enPassant=false;\n                                }\n                                results.push(piece);\n                            }\n                            return results;\n                        }, [] as Piece[]);\n                    }\n                    if(promotion !== undefined){\n                        const promoted = updated.find(p=> samePosition(p.position, to));\n                        if(promoted){\n                            promoted.type = promotion;\n                            const teamType = (promoted.team === TeamType.OUR)?\"w\":\"b\";\n                            let image = \"\";\n                            switch(promotion){\n                                case PieceType.ROOK: image = \"rook\"; break;\n                                case PieceType.BISHOP: image = \"bishop\"; break;\n                                case PieceType.KNIGHT: image = \"knight\"; break;\n                                case PieceType.QUEEN: image = \"queen\"; break;\n                            }\n                            if(image){\n                                promoted.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n                            }\n                        }\n                    }\n                    return updated;\n                });\n                setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n            }\n        }catch(_e){\n            // ignore\n        }\n    };\n    s.addEventListener('message', onMessage);\n    return () => {\n        s.removeEventListener('message', onMessage);\n    };\n}, [online?.socket, online?.roomId]);\n\nfunction updateValidMoves(){\n    setPieces((currentPieces) => {\n        return currentPieces.map(p=>{\n            p.possibleMoves = referee.getValidMoves(p, currentPieces);\n            return p;\n\n        });\n    });\n}\n\nfunction grabPiece(e: React.MouseEvent){\n    updateValidMoves();\n\n    const chessboard = chessboardRef.current;\n    const element = e.target as HTMLElement;\n\n    if(element.classList.contains(\"chess-piece\") && chessboard){\n        const grabX = Math.floor((e.clientX - chessboard.offsetLeft)/GRIDSIZE)\n        const grabY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/GRIDSIZE))\n        const pieceAtTile = pieces.find(p => samePosition(p.position, {x: grabX, y: grabY}));\n\n        // Online restrictions\n        if(online && online.status === 'playing'){\n            const myTeam = getAllowedTeamForMe();\n            if(!isMyTurn() || myTeam === null || !pieceAtTile || pieceAtTile.team !== myTeam){\n                return; // can't grab\n            }\n        }\n\n        setGrabPosition({x:grabX, y:grabY})\n\n        const x = e.clientX - GRIDSIZE/2;\n        const y = e.clientY -GRIDSIZE/2;\n        element.style.position=\"absolute\";\n        element.style.left = `${x}px`;\n        element.style.top = `${y}px`;\n\n        setActivePiece(element);\n    }\n}\n\nfunction movePiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    if(activePiece && chessboard){\n        const x = e.clientX -50;\n        const y = e.clientY -50;\n\n        const minX = chessboard.offsetLeft -25;\n        const minY = chessboard.offsetTop -25;\n        const maxX = chessboard.offsetLeft + chessboard.clientWidth -75 ;\n        const maxY = chessboard.offsetTop + chessboard.clientHeight -75;\n\n        activePiece.style.position=\"absolute\";\n\n        // x axis limits\n        if(x<minX){\n            activePiece.style.left = `${minX}px`;\n        } else if(x>maxX){\n            activePiece.style.left = `${maxX}px`;\n        } else{\n            activePiece.style.left = `${x}px`;\n        }\n\n        // y axis limits\n        if(y<minY){\n            activePiece.style.top = `${minY}px`;\n        } else if(y>maxY){\n            activePiece.style.top = `${maxY}px`;\n        } else{\n            activePiece.style.top = `${y}px`;\n        }\n        \n    }\n}\n\nfunction dropPiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    if(activePiece && chessboard){\n        // substracted 800 to align with chessboard axis (starting from bottom left)\n        const x=Math.floor((e.clientX - chessboard.offsetLeft)/GRIDSIZE);\n        const y=Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/GRIDSIZE));\n\n        const currentPiece = pieces.find(\n            (p)=> samePosition(p.position, grabPosition));\n\n        if(currentPiece){\n            const validMove = referee.isValidMove(grabPosition, {x,y}, currentPiece.type,currentPiece.team, pieces);\n            const isEnPassantMove = Referee.isEnPassantMove(grabPosition, {x,y},currentPiece.type,currentPiece.team, pieces)\n            const pawnDirecion = currentPiece.team === TeamType.OUR?1:-1;\n\n            if(online && online.status === 'playing'){\n                const myTeam = getAllowedTeamForMe();\n                if(!isMyTurn() || myTeam === null || currentPiece.team !== myTeam){\n                    // Reset piece position and bail\n                    activePiece.style.position= 'relative';\n                    activePiece.style.removeProperty(\"top\");\n                    activePiece.style.removeProperty(\"left\");\n                    setActivePiece(null);\n                    return;\n                }\n            }\n\n            if(isEnPassantMove){\n                const updatedPieces = pieces.reduce((results, piece)=>{\n                    if(samePosition(piece.position, grabPosition)){\n                        piece.enPassant=false;\n                        piece.position.x=x;\n                        piece.position.y=y;\n                        results.push(piece);\n                    }else if(!samePosition(piece.position, {x, y: y-pawnDirecion})){\n                        if(piece.type===PieceType.PAWN){\n                            piece.enPassant=false;\n                        }\n                        results.push(piece);\n                    }                   \n\n\n                    return results;\n                }, [] as Piece[])\n                setPieces(updatedPieces);\n                setLastMove({from: grabPosition, to: {x, y}});\n                if(!online || online.status !== 'playing'){\n                    // offline toggle turn for consistency\n                    setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n                } else {\n                    // send immediately (no promotion possible on en passant)\n                    online.socket?.send(JSON.stringify({\n                        type: 'move',\n                        roomId: online.roomId,\n                        from: grabPosition,\n                        to: {x, y}\n                    }));\n                    setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n                }\n            }else if(validMove){\n                const updatedPieces = pieces.reduce((results,piece)=>{\n                    if(samePosition(piece.position, grabPosition)){\n                        // SPECIAL MOVE\n                        piece.enPassant = Math.abs(grabPosition.y-y)===2 &&(piece.type===PieceType.PAWN)\n                        piece.position.x=x;\n                        piece.position.y=y;\n\n                        // pawn promotion row\n                        let promotionRow = piece.team === TeamType.OUR ? 7:0;\n                        if(y===promotionRow && piece.type === PieceType.PAWN){\n                            //make promotion\n                            modalRef.current?.classList.remove(\"hidden\")\n                            setPromotionPawn(piece);\n                            setAwaitingPromotion(true);\n                        }\n\n                        results.push(piece);\n                    }else if(!(samePosition(piece.position, {x,y}))){\n                        if(piece.type===PieceType.PAWN){\n                            piece.enPassant=false;\n                        }\n                        results.push(piece);\n                    }                  \n\n                    return results;\n                }, [] as Piece[])\n                setPieces(updatedPieces);\n                setLastMove({from: grabPosition, to: {x, y}});\n                if(!(awaitingPromotion)){\n                    if(!online || online.status !== 'playing'){\n                        setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n                    } else {\n                        // no promotion: send immediately\n                        online.socket?.send(JSON.stringify({\n                            type: 'move',\n                            roomId: online.roomId,\n                            from: grabPosition,\n                            to: {x, y}\n                        }));\n                        setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n                    }\n                }\n            }else{\n                //reset piece position\n                    activePiece.style.position= 'relative';\n                    activePiece.style.removeProperty(\"top\");\n                    activePiece.style.removeProperty(\"left\");\n\n            }\n        }\n\n        \n        setActivePiece(null);\n    }\n}\n\n    function promotePawn(pieceType: PieceType){\n        if(promotionPawn===undefined){\n            return;\n        }\n        const updatedPieces = pieces.reduce((results, piece) =>{\n\n            if(samePosition(piece.position, promotionPawn?.position)){\n                piece.type = pieceType;\n                const teamType = (piece.team === TeamType.OUR)?\"w\":\"b\";\n                let image = \"\";\n                switch(pieceType){\n                    case PieceType.ROOK:{\n                        image = \"rook\";\n                        break;\n                    }\n\n                    case PieceType.BISHOP:{\n                        image = \"bishop\";\n                        break;\n                    }\n\n                    case PieceType.KNIGHT:{\n                        image = \"knight\";\n                        break;\n                    }\n\n                    case PieceType.QUEEN:{\n                        image = \"queen\";\n                        break;\n                    }\n                }\n                piece.image = `${process.env.PUBLIC_URL}/assets/images/${image}_${teamType}.svg`;\n            }\n\n            results.push(piece);\n            return results;\n        }, [] as Piece[])\n        setPieces(updatedPieces);\n        modalRef.current?.classList.add(\"hidden\");\n        setAwaitingPromotion(false);\n        if(online && online.status === 'playing' && lastMove){\n            online.socket?.send(JSON.stringify({\n                type: 'move',\n                roomId: online.roomId,\n                from: lastMove.from,\n                to: lastMove.to,\n                promotionType: pieceType\n            }));\n            setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n        } else if(!online || online.status !== 'playing'){\n            setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n        }\n    }\n\n\n    function promotionTeamType(){\n        return (promotionPawn?.team === TeamType.OUR)?\"w\":\"b\";\n    }\n\n    let board = [];\n\n    for(let y= YAXIS.length-1;y>=0;y--){\n        for(let x=0;x<XAXIS.length;x++){\n\n            // check whether the sum of numbers x,y is even to draw each tile\n            const isEven = (x+y+2)%2===0;\n            let img = undefined;\n\n            pieces.forEach(p=> {\n                if(samePosition(p.position, {x:x, y:y})){\n                    img=p.image\n                }\n            })\n\n            let currentPiece = pieces.find(p=> samePosition(p.position,grabPosition));\n            let highlight = (currentPiece?.possibleMoves) ? currentPiece.possibleMoves.some(p=> samePosition(p, {x:x , y:y})): false;\n            \n            board.push(\n                    <Tile key={`${x},${y}`} isEven={isEven} image={img} highlight={highlight}/> \n            )\n        }\n    }       \n\n\n    return(\n        <>\n        <div id=\"pawn-promotion-modal\" className=\"hidden\" ref={modalRef}>\n            <div className=\"modal-body\">\n\n            <img onClick={()=> promotePawn(PieceType.ROOK)} src={`${process.env.PUBLIC_URL}/assets/images/rook_${promotionTeamType()}.svg`}/>\n            <img onClick={()=> promotePawn(PieceType.BISHOP)} src={`${process.env.PUBLIC_URL}/assets/images/bishop_${promotionTeamType()}.svg`}/>\n            <img onClick={()=> promotePawn(PieceType.KNIGHT)} src={`${process.env.PUBLIC_URL}/assets/images/knight_${promotionTeamType()}.svg`}/>\n            <img onClick={()=> promotePawn(PieceType.QUEEN)} src={`${process.env.PUBLIC_URL}/assets/images/queen_${promotionTeamType()}.svg`}/>\n            </div>\n        </div>\n\n        <div \n            onMouseMove={(e)=>movePiece(e)} \n            onMouseDown={e=> grabPiece(e)} \n            onMouseUp={(e)=> dropPiece(e)}\n            id=\"chessboard\"\n            ref={chessboardRef}>\n                {board}\n        </div>\n        </>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}