{"ast":null,"code":"import Referee from \"../Referee\";\nconst knightX = [1, 2, 2, 1, -1, -2, -2, -1];\nconst knightY = [2, 1, -1, -2, -2, -1, 1, 2];\nexport const knightMove = (initialPosition, desiredPosition, team, dx, dy, boardState) => {\n  // moving mechanics\n  // 8 different tiles possible\n  for (let i = 0; i < 8; i++) {\n    if (dx === knightX[i] && dy === knightY[i]) {\n      return !Referee.tileIsOccupied(desiredPosition, boardState) || Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n    }\n  }\n  return false;\n};\nexport const GetPossibleKnightMoves = (piece, boardState) => {\n  const possibleMoves = [];\n  for (let i = 0; i < 8; i++) {\n    const targetX = piece.position.x + knightX[i];\n    const targetY = piece.position.y + knightY[i];\n    const dx = knightX[i];\n    const dy = knightY[i];\n    if (knightMove(piece.position, {\n      x: targetX,\n      y: targetY\n    }, piece.team, dx, dy, boardState)) {\n      possibleMoves.push({\n        x: targetX,\n        y: targetY\n      });\n    }\n  }\n  return possibleMoves;\n};\n_c = GetPossibleKnightMoves;\nvar _c;\n$RefreshReg$(_c, \"GetPossibleKnightMoves\");","map":{"version":3,"names":["Referee","knightX","knightY","knightMove","initialPosition","desiredPosition","team","dx","dy","boardState","i","tileIsOccupied","tileIsOccupiedByOpponent","GetPossibleKnightMoves","piece","possibleMoves","targetX","position","x","targetY","y","push","_c","$RefreshReg$"],"sources":["/home/Outer/Documents/chesss/src/referee/rules/KnightRules.ts"],"sourcesContent":["import { Piece, Position, TeamType } from \"../../Constants\";\nimport Referee from \"../Referee\"\n\nconst knightX = [1, 2, 2, 1, -1, -2, -2, -1];\nconst knightY = [2, 1, -1, -2, -2, -1, 1, 2];\n\nexport const knightMove =(initialPosition: Position, desiredPosition: Position, team: TeamType, dx: number, dy: number, boardState: Piece[]):boolean=>{\n        // moving mechanics\n        // 8 different tiles possible\n        for (let i = 0; i < 8; i++) {\n            if ((dx === knightX[i]) && (dy === knightY[i])) {\n                return (!Referee.tileIsOccupied(desiredPosition, boardState) || Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team))\n            }\n        }\n        return false;\n}\n\n\n\nexport const GetPossibleKnightMoves = (piece:Piece, boardState:Piece[]):Position[]=>{\n    const possibleMoves:Position[] = [];\n\n    for(let i=0;i<8;i++){\n        const targetX = piece.position.x + knightX[i];\n        const targetY = piece.position.y + knightY[i];\n        const dx = knightX[i];\n        const dy = knightY[i];\n        if(knightMove(piece.position, {x:targetX, y:targetY}, piece.team, dx, dy, boardState)){\n            possibleMoves.push({x:targetX, y:targetY});\n        }\n    }\n    return possibleMoves;\n}"],"mappings":"AACA,OAAOA,OAAO,MAAM,YAAY;AAEhC,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAE5C,OAAO,MAAMC,UAAU,GAAEA,CAACC,eAAyB,EAAEC,eAAyB,EAAEC,IAAc,EAAEC,EAAU,EAAEC,EAAU,EAAEC,UAAmB,KAAW;EAC9I;EACA;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxB,IAAKH,EAAE,KAAKN,OAAO,CAACS,CAAC,CAAC,IAAMF,EAAE,KAAKN,OAAO,CAACQ,CAAC,CAAE,EAAE;MAC5C,OAAQ,CAACV,OAAO,CAACW,cAAc,CAACN,eAAe,EAAEI,UAAU,CAAC,IAAIT,OAAO,CAACY,wBAAwB,CAACP,eAAe,EAAEI,UAAU,EAAEH,IAAI,CAAC;IACvI;EACJ;EACA,OAAO,KAAK;AACpB,CAAC;AAID,OAAO,MAAMO,sBAAsB,GAAGA,CAACC,KAAW,EAAEL,UAAkB,KAAc;EAChF,MAAMM,aAAwB,GAAG,EAAE;EAEnC,KAAI,IAAIL,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,CAAC,EAACA,CAAC,EAAE,EAAC;IAChB,MAAMM,OAAO,GAAGF,KAAK,CAACG,QAAQ,CAACC,CAAC,GAAGjB,OAAO,CAACS,CAAC,CAAC;IAC7C,MAAMS,OAAO,GAAGL,KAAK,CAACG,QAAQ,CAACG,CAAC,GAAGlB,OAAO,CAACQ,CAAC,CAAC;IAC7C,MAAMH,EAAE,GAAGN,OAAO,CAACS,CAAC,CAAC;IACrB,MAAMF,EAAE,GAAGN,OAAO,CAACQ,CAAC,CAAC;IACrB,IAAGP,UAAU,CAACW,KAAK,CAACG,QAAQ,EAAE;MAACC,CAAC,EAACF,OAAO;MAAEI,CAAC,EAACD;IAAO,CAAC,EAAEL,KAAK,CAACR,IAAI,EAAEC,EAAE,EAAEC,EAAE,EAAEC,UAAU,CAAC,EAAC;MAClFM,aAAa,CAACM,IAAI,CAAC;QAACH,CAAC,EAACF,OAAO;QAAEI,CAAC,EAACD;MAAO,CAAC,CAAC;IAC9C;EACJ;EACA,OAAOJ,aAAa;AACxB,CAAC;AAAAO,EAAA,GAbYT,sBAAsB;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}