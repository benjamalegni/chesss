{"ast":null,"code":"var _jsxFileName = \"/home/outer/Documents/chesss/src/components/Chessboard/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport Referee from '../../referee/Referee';\nimport { useRef, useState } from 'react';\nimport { XAXIS, YAXIS, TeamType, PieceType, initialBoardState, GRIDSIZE, samePosition } from '../../Constants';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [grabPosition, setGrabPosition] = useState({\n    x: -1,\n    y: -1\n  });\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const [promotionPawn, setPromotionPawn] = useState();\n  const modalRef = useRef(null);\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      const grabX = Math.floor((e.clientX - chessboard.offsetLeft) / GRIDSIZE);\n      const grabY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / GRIDSIZE));\n      setGrabPosition({\n        x: grabX,\n        y: grabY\n      });\n      const x = e.clientX - GRIDSIZE / 2;\n      const y = e.clientY - GRIDSIZE / 2;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      activePiece.style.position = \"absolute\";\n\n      // x axis limits\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      // y axis limits\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      // substracted 800 to align with chessboard axis (starting from bottom left)\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRIDSIZE);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / GRIDSIZE));\n      const currentPiece = pieces.find(p => samePosition(p.position, grabPosition));\n      if (currentPiece) {\n        const validMove = referee.isValidMove(grabPosition, {\n          x,\n          y\n        }, currentPiece.type, currentPiece.team, pieces);\n        const isEnPassantMove = Referee.isEnPassantMove(grabPosition, {\n          x,\n          y\n        }, currentPiece.type, currentPiece.team, pieces);\n        const pawnDirecion = currentPiece.team === TeamType.OUR ? 1 : -1;\n        if (isEnPassantMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (samePosition(piece.position, grabPosition)) {\n              piece.enPassant = false;\n              piece.position.x = x;\n              piece.position.y = y;\n              results.push(piece);\n            } else if (!samePosition(piece.position, {\n              x,\n              y: y - pawnDirecion\n            })) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n        } else if (validMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (samePosition(piece.position, grabPosition)) {\n              // SPECIAL MOVE\n              piece.enPassant = Math.abs(grabPosition.y - y) === 2 && piece.type === PieceType.PAWN;\n              piece.position.x = x;\n              piece.position.y = y;\n\n              // pawn promotion row\n              let promotionRow = piece.team === TeamType.OUR ? 7 : 0;\n              if (y === promotionRow && piece.type === PieceType.PAWN) {\n                var _modalRef$current;\n                //make promotion\n                (_modalRef$current = modalRef.current) === null || _modalRef$current === void 0 ? void 0 : _modalRef$current.classList.remove(\"hidden\");\n                setPromotionPawn(piece);\n              }\n              results.push(piece);\n            } else if (!samePosition(piece.position, {\n              x,\n              y\n            })) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n        } else {\n          //reset piece position\n          activePiece.style.position = 'relative';\n          activePiece.style.removeProperty(\"top\");\n          activePiece.style.removeProperty(\"left\");\n        }\n      }\n      setActivePiece(null);\n    }\n  }\n  function promotePawn(pieceType) {\n    var _modalRef$current2;\n    if (promotionPawn === undefined) {\n      return;\n    }\n    const updatedPieces = pieces.reduce((results, piece) => {\n      if (samePosition(piece.position, promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.position)) {\n        piece.type = pieceType;\n        const teamType = piece.team === TeamType.OUR ? \"w\" : \"b\";\n        let image = \"\";\n        switch (pieceType) {\n          case PieceType.ROOK:\n            {\n              image = \"rook\";\n              break;\n            }\n          case PieceType.BISHOP:\n            {\n              image = \"bishop\";\n              break;\n            }\n          case PieceType.KNIGHT:\n            {\n              image = \"knight\";\n              break;\n            }\n          case PieceType.QUEEN:\n            {\n              image = \"queen\";\n              break;\n            }\n        }\n        piece.image = `assets/images/${image}_${teamType}.png`;\n      }\n      results.push(piece);\n      return results;\n    }, []);\n    setPieces(updatedPieces);\n    (_modalRef$current2 = modalRef.current) === null || _modalRef$current2 === void 0 ? void 0 : _modalRef$current2.classList.add(\"hidden\");\n  }\n  function promotionTeamType() {\n    return (promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.team) === TeamType.OUR ? \"w\" : \"b\";\n  }\n  let board = [];\n  for (let y = YAXIS.length - 1; y >= 0; y--) {\n    for (let x = 0; x < XAXIS.length; x++) {\n      // check whether the sum of numbers x,y is even to draw each tile\n      const isEven = (x + y + 2) % 2 === 0;\n      let img = undefined;\n      pieces.forEach(p => {\n        if (samePosition(p.position, {\n          x: x,\n          y: y\n        })) {\n          img = p.image;\n        }\n      });\n      board.push(/*#__PURE__*/_jsxDEV(Tile, {\n        isEven: isEven,\n        image: img\n      }, `${x},${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pawn-promotion-modal\",\n      className: \"hidden\",\n      ref: modalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.ROOK),\n          src: `/assets/images/rook_${promotionTeamType()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.ROOK),\n          src: `/assets/images/bishop_${promotionTeamType()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.ROOK),\n          src: `/assets/images/knight_${promotionTeamType()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.ROOK),\n          src: `/assets/images/queen_${promotionTeamType()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseMove: e => movePiece(e),\n      onMouseDown: e => grabPiece(e),\n      onMouseUp: e => dropPiece(e),\n      id: \"chessboard\",\n      ref: chessboardRef,\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Chessboard, \"0YtjHcC7ghUJu4wyBXPg32TGk98=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Tile","Referee","useRef","useState","XAXIS","YAXIS","TeamType","PieceType","initialBoardState","GRIDSIZE","samePosition","jsxDEV","_jsxDEV","Fragment","_Fragment","Chessboard","_s","activePiece","setActivePiece","grabPosition","setGrabPosition","x","y","pieces","setPieces","chessboardRef","referee","promotionPawn","setPromotionPawn","modalRef","grabPiece","e","chessboard","current","element","target","classList","contains","grabX","Math","floor","clientX","offsetLeft","grabY","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","currentPiece","find","p","validMove","isValidMove","type","team","isEnPassantMove","pawnDirecion","OUR","updatedPieces","reduce","results","piece","enPassant","push","PAWN","promotionRow","_modalRef$current","remove","removeProperty","promotePawn","pieceType","_modalRef$current2","undefined","teamType","image","ROOK","BISHOP","KNIGHT","QUEEN","add","promotionTeamType","board","length","isEven","img","forEach","fileName","_jsxFileName","lineNumber","columnNumber","children","id","className","ref","onClick","src","onMouseMove","onMouseDown","onMouseUp","_c","$RefreshReg$"],"sources":["/home/outer/Documents/chesss/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Tile from '../Tile/Tile'\nimport Referee from '../../referee/Referee'\nimport { useRef, useState } from 'react';\nimport { XAXIS, YAXIS, Piece, TeamType, PieceType, initialBoardState, Position, GRIDSIZE, samePosition } from '../../Constants';\n\nexport default function Chessboard(){\nconst [activePiece, setActivePiece] = useState<HTMLElement | null>(null)\nconst [grabPosition, setGrabPosition] = useState<Position>({x:-1, y:-1});\nconst [pieces, setPieces] = useState<Piece[]>(initialBoardState);\nconst chessboardRef = useRef<HTMLDivElement>(null);\nconst referee = new Referee();\nconst [promotionPawn, setPromotionPawn] = useState<Piece>();\nconst modalRef = useRef<HTMLDivElement>(null);\n\nfunction grabPiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    const element = e.target as HTMLElement;\n\n    if(element.classList.contains(\"chess-piece\") && chessboard){\n        const grabX = Math.floor((e.clientX - chessboard.offsetLeft)/GRIDSIZE)\n        const grabY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/GRIDSIZE))\n        setGrabPosition({x:grabX, y:grabY})\n\n        const x = e.clientX - GRIDSIZE/2;\n        const y = e.clientY -GRIDSIZE/2;\n        element.style.position=\"absolute\";\n        element.style.left = `${x}px`;\n        element.style.top = `${y}px`;\n\n\n\n        setActivePiece(element);\n    }\n}\n\nfunction movePiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    if(activePiece && chessboard){\n        const x = e.clientX -50;\n        const y = e.clientY -50;\n\n        const minX = chessboard.offsetLeft -25;\n        const minY = chessboard.offsetTop -25;\n        const maxX = chessboard.offsetLeft + chessboard.clientWidth -75 ;\n        const maxY = chessboard.offsetTop + chessboard.clientHeight -75;\n\n        activePiece.style.position=\"absolute\";\n\n\n        // x axis limits\n        if(x<minX){\n            activePiece.style.left = `${minX}px`;\n        } else if(x>maxX){\n            activePiece.style.left = `${maxX}px`;\n        } else{\n            activePiece.style.left = `${x}px`;\n        }\n\n        // y axis limits\n        if(y<minY){\n            activePiece.style.top = `${minY}px`;\n        } else if(y>maxY){\n            activePiece.style.top = `${maxY}px`;\n        } else{\n            activePiece.style.top = `${y}px`;\n        }\n        \n    }\n}\n\nfunction dropPiece(e: React.MouseEvent){\n    const chessboard = chessboardRef.current;\n    if(activePiece && chessboard){\n        // substracted 800 to align with chessboard axis (starting from bottom left)\n        const x=Math.floor((e.clientX - chessboard.offsetLeft)/GRIDSIZE);\n        const y=Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/GRIDSIZE));\n\n        const currentPiece = pieces.find(\n            (p)=> samePosition(p.position, grabPosition));\n\n        if(currentPiece){\n            const validMove = referee.isValidMove(grabPosition, {x,y}, currentPiece.type,currentPiece.team, pieces);\n            const isEnPassantMove = Referee.isEnPassantMove(grabPosition, {x,y},currentPiece.type,currentPiece.team, pieces)\n            const pawnDirecion = currentPiece.team === TeamType.OUR?1:-1;\n\n            if(isEnPassantMove){\n                const updatedPieces = pieces.reduce((results, piece)=>{\n                    if(samePosition(piece.position, grabPosition)){\n                        piece.enPassant=false;\n                        piece.position.x=x;\n                        piece.position.y=y;\n                        results.push(piece);\n                    }else if(!samePosition(piece.position, {x, y: y-pawnDirecion})){\n                        if(piece.type===PieceType.PAWN){\n                            piece.enPassant=false;\n                        }\n                        results.push(piece);\n                    }                   \n\n\n                    return results;\n                }, [] as Piece[])\n                setPieces(updatedPieces);\n            }else if(validMove){\n                const updatedPieces = pieces.reduce((results,piece)=>{\n                    if(samePosition(piece.position, grabPosition)){\n                        // SPECIAL MOVE\n                        piece.enPassant = Math.abs(grabPosition.y-y)===2 &&(piece.type===PieceType.PAWN)\n                        piece.position.x=x;\n                        piece.position.y=y;\n\n                        // pawn promotion row\n                        let promotionRow = piece.team === TeamType.OUR ? 7:0;\n                        if(y===promotionRow && piece.type === PieceType.PAWN){\n                            //make promotion\n                            modalRef.current?.classList.remove(\"hidden\")\n                            setPromotionPawn(piece);\n                        }\n\n                        results.push(piece);\n                    }else if(!(samePosition(piece.position, {x,y}))){\n                        if(piece.type===PieceType.PAWN){\n                            piece.enPassant=false;\n                        }\n                        results.push(piece);\n                    }                  \n\n                    return results;\n                }, [] as Piece[])\n                setPieces(updatedPieces);\n            }else{\n                //reset piece position\n                    activePiece.style.position= 'relative';\n                    activePiece.style.removeProperty(\"top\");\n                    activePiece.style.removeProperty(\"left\");\n\n            }\n        }\n\n        \n        setActivePiece(null);\n    }\n}\n\n    function promotePawn(pieceType: PieceType){\n        if(promotionPawn===undefined){\n            return;\n        }\n        const updatedPieces = pieces.reduce((results, piece) =>{\n\n            if(samePosition(piece.position, promotionPawn?.position)){\n                piece.type = pieceType;\n                const teamType = (piece.team === TeamType.OUR)?\"w\":\"b\";\n                let image = \"\";\n                switch(pieceType){\n                    case PieceType.ROOK:{\n                        image = \"rook\";\n                        break;\n                    }\n\n                    case PieceType.BISHOP:{\n                        image = \"bishop\";\n                        break;\n                    }\n\n                    case PieceType.KNIGHT:{\n                        image = \"knight\";\n                        break;\n                    }\n\n                    case PieceType.QUEEN:{\n                        image = \"queen\";\n                        break;\n                    }\n                }\n                piece.image = `assets/images/${image}_${teamType}.png`;\n            }\n\n            results.push(piece);\n            return results;\n        }, [] as Piece[])\n        setPieces(updatedPieces);\n        modalRef.current?.classList.add(\"hidden\");\n    }\n\n\n    function promotionTeamType(){\n        return (promotionPawn?.team === TeamType.OUR)?\"w\":\"b\";\n    }\n\n    let board = [];\n\n    for(let y= YAXIS.length-1;y>=0;y--){\n        for(let x=0;x<XAXIS.length;x++){\n\n            // check whether the sum of numbers x,y is even to draw each tile\n            const isEven = (x+y+2)%2===0;\n            let img = undefined;\n\n            pieces.forEach(p=> {\n                if(samePosition(p.position, {x:x, y:y})){\n                    img=p.image\n                }\n            })\n\n            \n            board.push(\n                    <Tile key={`${x},${y}`} isEven={isEven} image={img}/> \n            )\n        }\n        }       \n\n\n    return(\n        <>\n        <div id=\"pawn-promotion-modal\" className=\"hidden\" ref={modalRef}>\n            <div className=\"modal-body\">\n\n            <img onClick={()=> promotePawn(PieceType.ROOK)} src={`/assets/images/rook_${promotionTeamType()}.png`}/>\n            <img onClick={()=> promotePawn(PieceType.ROOK)} src={`/assets/images/bishop_${promotionTeamType()}.png`}/>\n            <img onClick={()=> promotePawn(PieceType.ROOK)} src={`/assets/images/knight_${promotionTeamType()}.png`}/>\n            <img onClick={()=> promotePawn(PieceType.ROOK)} src={`/assets/images/queen_${promotionTeamType()}.png`}/>\n            </div>\n        </div>\n\n        <div \n            onMouseMove={(e)=>movePiece(e)} \n            onMouseDown={e=> grabPiece(e)} \n            onMouseUp={(e)=> dropPiece(e)}\n            id=\"chessboard\"\n            ref={chessboardRef}>\n                {board}\n        </div>\n        </>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}