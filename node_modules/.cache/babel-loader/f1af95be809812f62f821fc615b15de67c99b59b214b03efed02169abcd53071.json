{"ast":null,"code":"var _jsxFileName = \"/home/Outer/Documents/chesss/src/components/Chessboard/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport Referee from '../../referee/Referee';\nimport { useEffect, useRef, useState } from 'react';\nimport { XAXIS, YAXIS, TeamType, PieceType, initialBoardState, GRIDSIZE, samePosition } from '../../Constants';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chessboard({\n  online,\n  timeLimitSeconds\n}) {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [grabPosition, setGrabPosition] = useState({\n    x: -1,\n    y: -1\n  });\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const [promotionPawn, setPromotionPawn] = useState();\n  const modalRef = useRef(null);\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [lastMove, setLastMove] = useState(null);\n  const [awaitingPromotion, setAwaitingPromotion] = useState(false);\n\n  // Clock state\n  const [whiteTimeLeft, setWhiteTimeLeft] = useState(null);\n  const [blackTimeLeft, setBlackTimeLeft] = useState(null);\n  const [clockStarted, setClockStarted] = useState(false);\n\n  // Responsive tile size in px, derived from board size\n  const [tileSize, setTileSize] = useState(GRIDSIZE);\n  useEffect(() => {\n    function updateTileSize() {\n      const el = chessboardRef.current;\n      if (!el) return;\n      const rect = el.getBoundingClientRect();\n      const size = Math.floor(rect.width / 8);\n      if (size > 0) setTileSize(size);\n    }\n    updateTileSize();\n    window.addEventListener('resize', updateTileSize);\n    return () => window.removeEventListener('resize', updateTileSize);\n  }, []);\n  function getAllowedTeamForMe() {\n    if (!online || online.status !== 'playing' || !online.myColor) {\n      return null;\n    }\n    return online.myColor === 'white' ? TeamType.OUR : TeamType.OPPONENT;\n  }\n  function isMyTurn() {\n    if (!online || online.status !== 'playing' || !online.myColor) {\n      return true; // offline mode: always allowed\n    }\n    return online.myColor === currentTurn;\n  }\n\n  // Initialize turn and timers when a game starts or time limit provided\n  useEffect(() => {\n    if ((online === null || online === void 0 ? void 0 : online.status) === 'playing') {\n      setCurrentTurn('white');\n      if (whiteTimeLeft === null || blackTimeLeft === null) {\n        const limit = typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0 ? timeLimitSeconds : 300;\n        setWhiteTimeLeft(limit);\n        setBlackTimeLeft(limit);\n      }\n      setClockStarted(true);\n    } else {\n      setClockStarted(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [online === null || online === void 0 ? void 0 : online.status, timeLimitSeconds]);\n\n  // Opponent move listener\n  useEffect(() => {\n    const s = online === null || online === void 0 ? void 0 : online.socket;\n    if (!s) return;\n    const onMove = msg => {\n      try {\n        setClockStarted(true);\n        if (msg.type === 'move') {\n          // compatibility if server sends type wrapper\n        }\n        const from = msg.from;\n        const to = msg.to;\n        const promotion = msg.promotionType;\n        setPieces(currentPieces => {\n          let updated = currentPieces;\n          const movingPiece = updated.find(p => samePosition(p.position, from));\n          if (!movingPiece) {\n            return updated;\n          }\n          const isEnPassantMove = Referee.isEnPassantMove(from, to, movingPiece.type, movingPiece.team, updated);\n          const pawnDirecion = movingPiece.team === TeamType.OUR ? 1 : -1;\n          if (isEnPassantMove) {\n            updated = updated.reduce((results, piece) => {\n              if (samePosition(piece.position, from)) {\n                piece.enPassant = false;\n                piece.position.x = to.x;\n                piece.position.y = to.y;\n                results.push(piece);\n              } else if (!samePosition(piece.position, {\n                x: to.x,\n                y: to.y - pawnDirecion\n              })) {\n                if (piece.type === PieceType.PAWN) {\n                  piece.enPassant = false;\n                }\n                results.push(piece);\n              }\n              return results;\n            }, []);\n          } else {\n            updated = updated.reduce((results, piece) => {\n              if (samePosition(piece.position, from)) {\n                piece.enPassant = Math.abs(from.y - to.y) === 2 && piece.type === PieceType.PAWN;\n                piece.position.x = to.x;\n                piece.position.y = to.y;\n                results.push(piece);\n              } else if (!samePosition(piece.position, to)) {\n                if (piece.type === PieceType.PAWN) {\n                  piece.enPassant = false;\n                }\n                results.push(piece);\n              }\n              return results;\n            }, []);\n          }\n          if (promotion !== undefined) {\n            const promoted = updated.find(p => samePosition(p.position, to));\n            if (promoted) {\n              promoted.type = promotion;\n              const teamType = promoted.team === TeamType.OUR ? \"w\" : \"b\";\n              let image = \"\";\n              switch (promotion) {\n                case PieceType.ROOK:\n                  image = \"rook\";\n                  break;\n                case PieceType.BISHOP:\n                  image = \"bishop\";\n                  break;\n                case PieceType.KNIGHT:\n                  image = \"knight\";\n                  break;\n                case PieceType.QUEEN:\n                  image = \"queen\";\n                  break;\n              }\n              if (image) {\n                promoted.image = `assets/images/${image}_${teamType}.svg`;\n              }\n            }\n          }\n          return updated;\n        });\n        setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n      } catch (_e) {\n        // ignore\n      }\n    };\n    s.on('move', onMove);\n    return () => {\n      s.off('move', onMove);\n    };\n  }, [online]);\n  function updateValidMoves() {\n    setPieces(currentPieces => {\n      return currentPieces.map(p => {\n        p.possibleMoves = referee.getValidMoves(p, currentPieces);\n        return p;\n      });\n    });\n  }\n\n  // Clock ticking effect\n  useEffect(() => {\n    if (whiteTimeLeft === null || blackTimeLeft === null) return;\n    if (!online || online.status !== 'playing') return;\n    if (awaitingPromotion) return;\n    if (!clockStarted) return;\n    const interval = setInterval(() => {\n      if (currentTurn === 'white') {\n        setWhiteTimeLeft(prev => {\n          if (prev === null) return prev;\n          const next = Math.max(0, prev - 1);\n          return next;\n        });\n      } else {\n        setBlackTimeLeft(prev => {\n          if (prev === null) return prev;\n          const next = Math.max(0, prev - 1);\n          return next;\n        });\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [online, online === null || online === void 0 ? void 0 : online.status, currentTurn, whiteTimeLeft, blackTimeLeft, awaitingPromotion, clockStarted]);\n\n  // Ensure the clock starts after the very first move (local or remote)\n  useEffect(() => {\n    if (lastMove && typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0) {\n      setClockStarted(true);\n    }\n  }, [lastMove, timeLimitSeconds]);\n  function performMove(target) {\n    const currentPiece = pieces.find(p => samePosition(p.position, grabPosition));\n    if (!currentPiece) return;\n    const {\n      x,\n      y\n    } = target;\n    const validMove = referee.isValidMove(grabPosition, {\n      x,\n      y\n    }, currentPiece.type, currentPiece.team, pieces);\n    const isEnPassantMove = Referee.isEnPassantMove(grabPosition, {\n      x,\n      y\n    }, currentPiece.type, currentPiece.team, pieces);\n    const pawnDirecion = currentPiece.team === TeamType.OUR ? 1 : -1;\n    if (online && online.status === 'playing') {\n      const myTeam = getAllowedTeamForMe();\n      if (!isMyTurn() || myTeam === null || currentPiece.team !== myTeam) {\n        return;\n      }\n      // Optional: stop moves if your time is up\n      if (typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0) {\n        if (currentTurn === 'white' && whiteTimeLeft === 0 || currentTurn === 'black' && blackTimeLeft === 0) {\n          return;\n        }\n      }\n    }\n    if (isEnPassantMove) {\n      const updatedPieces = pieces.reduce((results, piece) => {\n        if (samePosition(piece.position, grabPosition)) {\n          piece.enPassant = false;\n          piece.position.x = x;\n          piece.position.y = y;\n          results.push(piece);\n        } else if (!samePosition(piece.position, {\n          x,\n          y: y - pawnDirecion\n        })) {\n          if (piece.type === PieceType.PAWN) {\n            piece.enPassant = false;\n          }\n          results.push(piece);\n        }\n        return results;\n      }, []);\n      setPieces(updatedPieces);\n      setLastMove({\n        from: grabPosition,\n        to: {\n          x,\n          y\n        }\n      });\n      setClockStarted(true);\n      if (!online || online.status !== 'playing') {\n        setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n      } else {\n        var _online$socket;\n        (_online$socket = online.socket) === null || _online$socket === void 0 ? void 0 : _online$socket.emit('move', {\n          roomId: online.roomId,\n          from: grabPosition,\n          to: {\n            x,\n            y\n          }\n        });\n        setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n      }\n    } else if (validMove) {\n      const updatedPieces = pieces.reduce((results, piece) => {\n        if (samePosition(piece.position, grabPosition)) {\n          piece.enPassant = Math.abs(grabPosition.y - y) === 2 && piece.type === PieceType.PAWN;\n          piece.position.x = x;\n          piece.position.y = y;\n          let promotionRow = piece.team === TeamType.OUR ? 7 : 0;\n          if (y === promotionRow && piece.type === PieceType.PAWN) {\n            var _modalRef$current;\n            (_modalRef$current = modalRef.current) === null || _modalRef$current === void 0 ? void 0 : _modalRef$current.classList.remove(\"hidden\");\n            setPromotionPawn(piece);\n            setAwaitingPromotion(true);\n          }\n          results.push(piece);\n        } else if (!samePosition(piece.position, {\n          x,\n          y\n        })) {\n          if (piece.type === PieceType.PAWN) {\n            piece.enPassant = false;\n          }\n          results.push(piece);\n        }\n        return results;\n      }, []);\n      setPieces(updatedPieces);\n      setLastMove({\n        from: grabPosition,\n        to: {\n          x,\n          y\n        }\n      });\n      if (!awaitingPromotion) {\n        setClockStarted(true);\n        if (!online || online.status !== 'playing') {\n          setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n        } else {\n          var _online$socket2;\n          (_online$socket2 = online.socket) === null || _online$socket2 === void 0 ? void 0 : _online$socket2.emit('move', {\n            roomId: online.roomId,\n            from: grabPosition,\n            to: {\n              x,\n              y\n            }\n          });\n          setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n        }\n      }\n    }\n  }\n  function pickTileFromCursor(clientX, clientY) {\n    const chessboard = chessboardRef.current;\n    if (!chessboard) return {\n      x: -1,\n      y: -1\n    };\n    const rect = chessboard.getBoundingClientRect();\n    const relX = clientX - rect.left;\n    const relY = clientY - rect.top;\n    const x = Math.floor(relX / tileSize);\n    const y = Math.abs(Math.ceil((relY - rect.height) / tileSize)); // invert axis\n    return {\n      x,\n      y\n    };\n  }\n  function grabPiece(e) {\n    updateValidMoves();\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      const {\n        x: grabX,\n        y: grabY\n      } = pickTileFromCursor(e.clientX, e.clientY);\n      const pieceAtTile = pieces.find(p => samePosition(p.position, {\n        x: grabX,\n        y: grabY\n      }));\n\n      // Online restrictions\n      if (online && online.status === 'playing') {\n        const myTeam = getAllowedTeamForMe();\n        if (!isMyTurn() || myTeam === null || !pieceAtTile || pieceAtTile.team !== myTeam) {\n          return; // can't grab\n        }\n      }\n      setGrabPosition({\n        x: grabX,\n        y: grabY\n      });\n      const x = e.clientX - tileSize / 2;\n      const y = e.clientY - tileSize / 2;\n      element.style.position = 'fixed';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      element.style.zIndex = '1000';\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = e.clientX - tileSize / 2;\n      const y = e.clientY - tileSize / 2;\n      const rect = chessboard.getBoundingClientRect();\n      const minX = rect.left;\n      const minY = rect.top;\n      const maxX = rect.right - tileSize;\n      const maxY = rect.bottom - tileSize;\n      activePiece.style.position = 'fixed';\n\n      // x axis limits\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      // y axis limits\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const target = pickTileFromCursor(e.clientX, e.clientY);\n      performMove(target);\n      //reset piece position\n      activePiece.style.position = 'relative';\n      activePiece.style.removeProperty(\"top\");\n      activePiece.style.removeProperty(\"left\");\n      activePiece.style.removeProperty(\"z-index\");\n      setActivePiece(null);\n    }\n  }\n  function promotePawn(pieceType) {\n    var _modalRef$current2;\n    if (promotionPawn === undefined) {\n      return;\n    }\n    const updatedPieces = pieces.reduce((results, piece) => {\n      if (samePosition(piece.position, promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.position)) {\n        piece.type = pieceType;\n        const teamType = piece.team === TeamType.OUR ? \"w\" : \"b\";\n        let image = \"\";\n        switch (pieceType) {\n          case PieceType.ROOK:\n            {\n              image = \"rook\";\n              break;\n            }\n          case PieceType.BISHOP:\n            {\n              image = \"bishop\";\n              break;\n            }\n          case PieceType.KNIGHT:\n            {\n              image = \"knight\";\n              break;\n            }\n          case PieceType.QUEEN:\n            {\n              image = \"queen\";\n              break;\n            }\n        }\n        piece.image = `assets/images/${image}_${teamType}.svg`;\n      }\n      results.push(piece);\n      return results;\n    }, []);\n    setPieces(updatedPieces);\n    (_modalRef$current2 = modalRef.current) === null || _modalRef$current2 === void 0 ? void 0 : _modalRef$current2.classList.add(\"hidden\");\n    setAwaitingPromotion(false);\n    if (online && online.status === 'playing' && lastMove) {\n      var _online$socket3;\n      (_online$socket3 = online.socket) === null || _online$socket3 === void 0 ? void 0 : _online$socket3.emit('move', {\n        roomId: online.roomId,\n        from: lastMove.from,\n        to: lastMove.to,\n        promotionType: pieceType\n      });\n      setClockStarted(true);\n      setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n    } else if (!online || online.status !== 'playing') {\n      setCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n    }\n  }\n  function promotionTeamType() {\n    return (promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.team) === TeamType.OUR ? \"w\" : \"b\";\n  }\n  function formatTime(totalSeconds) {\n    if (totalSeconds === null) return '--:--';\n    const m = Math.floor(totalSeconds / 60);\n    const s = totalSeconds % 60;\n    return `${m}:${s.toString().padStart(2, '0')}`;\n  }\n  let board = [];\n  for (let y = YAXIS.length - 1; y >= 0; y--) {\n    for (let x = 0; x < XAXIS.length; x++) {\n      // check whether the sum of numbers x,y is even to draw each tile\n      const isEven = (x + y + 2) % 2 === 0;\n      let img = undefined;\n      pieces.forEach(p => {\n        if (samePosition(p.position, {\n          x: x,\n          y: y\n        })) {\n          img = p.image;\n        }\n      });\n      let currentPiece = pieces.find(p => samePosition(p.position, grabPosition));\n      let highlight = currentPiece !== null && currentPiece !== void 0 && currentPiece.possibleMoves ? currentPiece.possibleMoves.some(p => samePosition(p, {\n        x: x,\n        y: y\n      })) : false;\n      const targetHasPiece = pieces.some(p => samePosition(p.position, {\n        x,\n        y\n      }));\n      const capture = highlight && targetHasPiece;\n      const handleClick = highlight ? () => performMove({\n        x,\n        y\n      }) : undefined;\n      board.push(/*#__PURE__*/_jsxDEV(Tile, {\n        isEven: isEven,\n        image: img,\n        highlight: highlight,\n        capture: capture,\n        onClick: handleClick\n      }, `${x},${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 6\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pawn-promotion-modal\",\n      className: \"hidden\",\n      ref: modalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.ROOK),\n          src: `assets/images/rook_${promotionTeamType()}.svg`,\n          alt: \"promote rook\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.BISHOP),\n          src: `assets/images/bishop_${promotionTeamType()}.svg`,\n          alt: \"promote bishop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.KNIGHT),\n          src: `assets/images/knight_${promotionTeamType()}.svg`,\n          alt: \"promote knight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.QUEEN),\n          src: `assets/images/queen_${promotionTeamType()}.svg`,\n          alt: \"promote queen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-layout\",\n      children: [(online === null || online === void 0 ? void 0 : online.status) === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `timer-block ${currentTurn === 'black' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-label\",\n            children: \"Black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-value\",\n            children: formatTime(blackTimeLeft)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `timer-block ${currentTurn === 'white' ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-label\",\n            children: \"White\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-value\",\n            children: formatTime(whiteTimeLeft)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onMouseMove: e => movePiece(e),\n        onMouseDown: e => grabPiece(e),\n        onMouseUp: e => dropPiece(e),\n        id: \"chessboard\",\n        ref: chessboardRef,\n        children: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n_s(Chessboard, \"YH3cx8HZ415AQAWznun8KJI0soY=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["Tile","Referee","useEffect","useRef","useState","XAXIS","YAXIS","TeamType","PieceType","initialBoardState","GRIDSIZE","samePosition","jsxDEV","_jsxDEV","Fragment","_Fragment","Chessboard","online","timeLimitSeconds","_s","activePiece","setActivePiece","grabPosition","setGrabPosition","x","y","pieces","setPieces","chessboardRef","referee","promotionPawn","setPromotionPawn","modalRef","currentTurn","setCurrentTurn","lastMove","setLastMove","awaitingPromotion","setAwaitingPromotion","whiteTimeLeft","setWhiteTimeLeft","blackTimeLeft","setBlackTimeLeft","clockStarted","setClockStarted","tileSize","setTileSize","updateTileSize","el","current","rect","getBoundingClientRect","size","Math","floor","width","window","addEventListener","removeEventListener","getAllowedTeamForMe","status","myColor","OUR","OPPONENT","isMyTurn","limit","s","socket","onMove","msg","type","from","to","promotion","promotionType","currentPieces","updated","movingPiece","find","p","position","isEnPassantMove","team","pawnDirecion","reduce","results","piece","enPassant","push","PAWN","abs","undefined","promoted","teamType","image","ROOK","BISHOP","KNIGHT","QUEEN","prev","_e","on","off","updateValidMoves","map","possibleMoves","getValidMoves","interval","setInterval","next","max","clearInterval","performMove","target","currentPiece","validMove","isValidMove","myTeam","updatedPieces","_online$socket","emit","roomId","promotionRow","_modalRef$current","classList","remove","_online$socket2","pickTileFromCursor","clientX","clientY","chessboard","relX","left","relY","top","ceil","height","grabPiece","e","element","contains","grabX","grabY","pieceAtTile","style","zIndex","movePiece","minX","minY","maxX","right","maxY","bottom","dropPiece","removeProperty","promotePawn","pieceType","_modalRef$current2","add","_online$socket3","promotionTeamType","formatTime","totalSeconds","m","toString","padStart","board","length","isEven","img","forEach","highlight","some","targetHasPiece","capture","handleClick","onClick","fileName","_jsxFileName","lineNumber","columnNumber","children","id","className","ref","src","alt","onMouseMove","onMouseDown","onMouseUp","_c","$RefreshReg$"],"sources":["/home/Outer/Documents/chesss/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import './Chessboard.css';\nimport Tile from '../Tile/Tile'\nimport Referee from '../../referee/Referee'\nimport { useEffect, useRef, useState } from 'react';\nimport { XAXIS, YAXIS, Piece, TeamType, PieceType, initialBoardState, Position, GRIDSIZE, samePosition } from '../../Constants';\nimport type { Socket } from 'socket.io-client';\n\ninterface OnlineProps{\n\tsocket: Socket | null;\n\tstatus: 'offline' | 'waiting' | 'playing';\n\troomId?: string;\n\tmyColor?: 'white' | 'black';\n}\n\nexport default function Chessboard({ online, timeLimitSeconds }: { online?: OnlineProps, timeLimitSeconds?: number }){\nconst [activePiece, setActivePiece] = useState<HTMLElement | null>(null)\nconst [grabPosition, setGrabPosition] = useState<Position>({x:-1, y:-1});\nconst [pieces, setPieces] = useState<Piece[]>(initialBoardState);\nconst chessboardRef = useRef<HTMLDivElement>(null);\nconst referee = new Referee();\nconst [promotionPawn, setPromotionPawn] = useState<Piece>();\nconst modalRef = useRef<HTMLDivElement>(null);\nconst [currentTurn, setCurrentTurn] = useState<'white'|'black'>('white');\nconst [lastMove, setLastMove] = useState<{from: Position, to: Position} | null>(null);\nconst [awaitingPromotion, setAwaitingPromotion] = useState<boolean>(false);\n\n// Clock state\nconst [whiteTimeLeft, setWhiteTimeLeft] = useState<number | null>(null);\nconst [blackTimeLeft, setBlackTimeLeft] = useState<number | null>(null);\nconst [clockStarted, setClockStarted] = useState<boolean>(false);\n\n// Responsive tile size in px, derived from board size\nconst [tileSize, setTileSize] = useState<number>(GRIDSIZE);\nuseEffect(()=>{\n\tfunction updateTileSize(){\n\t\tconst el = chessboardRef.current;\n\t\tif(!el) return;\n\t\tconst rect = el.getBoundingClientRect();\n\t\tconst size = Math.floor(rect.width / 8);\n\t\tif(size > 0) setTileSize(size);\n\t}\n\tupdateTileSize();\n\twindow.addEventListener('resize', updateTileSize);\n\treturn ()=> window.removeEventListener('resize', updateTileSize);\n}, []);\n\nfunction getAllowedTeamForMe(): TeamType | null{\n\tif(!online || online.status !== 'playing' || !online.myColor){\n\t\treturn null;\n\t}\n\treturn online.myColor === 'white' ? TeamType.OUR : TeamType.OPPONENT;\n}\n\nfunction isMyTurn(): boolean{\n\tif(!online || online.status !== 'playing' || !online.myColor){\n\t\treturn true; // offline mode: always allowed\n\t}\n\treturn online.myColor === currentTurn;\n}\n\n// Initialize turn and timers when a game starts or time limit provided\nuseEffect(()=>{\n\tif(online?.status === 'playing'){\n\t\tsetCurrentTurn('white');\n\t\tif(whiteTimeLeft === null || blackTimeLeft === null){\n\t\t\tconst limit = (typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0) ? timeLimitSeconds : 300;\n\t\t\tsetWhiteTimeLeft(limit);\n\t\t\tsetBlackTimeLeft(limit);\n\t\t}\n\t\tsetClockStarted(true);\n\t} else {\n\t\tsetClockStarted(false);\n\t}\n// eslint-disable-next-line react-hooks/exhaustive-deps\n}, [online?.status, timeLimitSeconds]);\n\n// Opponent move listener\nuseEffect(()=>{\n\tconst s = online?.socket;\n\tif(!s) return;\n\tconst onMove = (msg: any) => {\n\t\ttry{\n\t\t\tsetClockStarted(true);\n\t\t\tif(msg.type === 'move'){\n\t\t\t\t// compatibility if server sends type wrapper\n\t\t\t}\n\t\t\tconst from: Position = msg.from;\n\t\t\tconst to: Position = msg.to;\n\t\t\tconst promotion: PieceType | undefined = msg.promotionType;\n\t\t\tsetPieces((currentPieces)=>{\n\t\t\t\tlet updated = currentPieces;\n\t\t\t\tconst movingPiece = updated.find(p=> samePosition(p.position, from));\n\t\t\t\tif(!movingPiece){\n\t\t\t\t\treturn updated;\n\t\t\t\t}\n\t\t\t\tconst isEnPassantMove = Referee.isEnPassantMove(from, to, movingPiece.type, movingPiece.team, updated);\n\t\t\t\tconst pawnDirecion = movingPiece.team === TeamType.OUR?1:-1;\n\t\t\t\tif(isEnPassantMove){\n\t\t\t\t\tupdated = updated.reduce((results, piece)=>{\n\t\t\t\t\t\tif(samePosition(piece.position, from)){\n\t\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\t\tpiece.position.x=to.x;\n\t\t\t\t\t\t\tpiece.position.y=to.y;\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t}else if(!samePosition(piece.position, {x: to.x, y: to.y - pawnDirecion})){\n\t\t\t\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}, [] as Piece[]);\n\t\t\t\t} else {\n\t\t\t\t\tupdated = updated.reduce((results, piece)=>{\n\t\t\t\t\t\tif(samePosition(piece.position, from)){\n\t\t\t\t\t\t\tpiece.enPassant = Math.abs(from.y - to.y)===2 && (piece.type===PieceType.PAWN);\n\t\t\t\t\t\t\tpiece.position.x = to.x;\n\t\t\t\t\t\t\tpiece.position.y = to.y;\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t} else if(!samePosition(piece.position, to)){\n\t\t\t\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.push(piece);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}, [] as Piece[]);\n\t\t\t\t}\n\t\t\t\tif(promotion !== undefined){\n\t\t\t\t\tconst promoted = updated.find(p=> samePosition(p.position, to));\n\t\t\t\t\tif(promoted){\n\t\t\t\t\t\tpromoted.type = promotion;\n\t\t\t\t\t\tconst teamType = (promoted.team === TeamType.OUR)?\"w\":\"b\";\n\t\t\t\t\t\tlet image = \"\";\n\t\t\t\t\t\tswitch(promotion){\n\t\t\t\t\t\t\tcase PieceType.ROOK: image = \"rook\"; break;\n\t\t\t\t\t\t\tcase PieceType.BISHOP: image = \"bishop\"; break;\n\t\t\t\t\t\t\tcase PieceType.KNIGHT: image = \"knight\"; break;\n\t\t\t\t\t\t\tcase PieceType.QUEEN: image = \"queen\"; break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(image){\n\t\t\t\t\t\t\tpromoted.image = `assets/images/${image}_${teamType}.svg`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn updated;\n\t\t\t});\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t}catch(_e){\n\t\t\t// ignore\n\t\t}\n\t};\n\ts.on('move', onMove);\n\treturn () => {\n\t\ts.off('move', onMove);\n\t};\n}, [online]);\n\nfunction updateValidMoves(){\n\tsetPieces((currentPieces) => {\n\t\treturn currentPieces.map(p=>{\n\t\t\tp.possibleMoves = referee.getValidMoves(p, currentPieces);\n\t\t\treturn p;\n\n\t\t});\n\t});\n}\n\n// Clock ticking effect\nuseEffect(()=>{\n\tif(whiteTimeLeft === null || blackTimeLeft === null) return;\n\tif(!online || online.status !== 'playing') return;\n\tif(awaitingPromotion) return;\n\tif(!clockStarted) return;\n\tconst interval = setInterval(()=>{\n\t\tif(currentTurn === 'white'){\n\t\t\tsetWhiteTimeLeft(prev => {\n\t\t\t\tif(prev === null) return prev;\n\t\t\t\tconst next = Math.max(0, prev - 1);\n\t\t\t\treturn next;\n\t\t\t});\n\t\t} else {\n\t\t\tsetBlackTimeLeft(prev => {\n\t\t\t\tif(prev === null) return prev;\n\t\t\t\tconst next = Math.max(0, prev - 1);\n\t\t\t\treturn next;\n\t\t\t});\n\t\t}\n\t}, 1000);\n\treturn () => clearInterval(interval);\n}, [online, online?.status, currentTurn, whiteTimeLeft, blackTimeLeft, awaitingPromotion, clockStarted]);\n\n// Ensure the clock starts after the very first move (local or remote)\nuseEffect(()=>{\n\tif(lastMove && typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0){\n\t\tsetClockStarted(true);\n\t}\n}, [lastMove, timeLimitSeconds]);\n\nfunction performMove(target: Position){\n\tconst currentPiece = pieces.find((p)=> samePosition(p.position, grabPosition));\n\tif(!currentPiece) return;\n\tconst { x, y } = target;\n\tconst validMove = referee.isValidMove(grabPosition, {x,y}, currentPiece.type,currentPiece.team, pieces);\n\tconst isEnPassantMove = Referee.isEnPassantMove(grabPosition, {x,y},currentPiece.type,currentPiece.team, pieces)\n\tconst pawnDirecion = currentPiece.team === TeamType.OUR?1:-1;\n\n\tif(online && online.status === 'playing'){\n\t\tconst myTeam = getAllowedTeamForMe();\n\t\tif(!isMyTurn() || myTeam === null || currentPiece.team !== myTeam){\n\t\t\treturn;\n\t\t}\n\t\t// Optional: stop moves if your time is up\n\t\tif(typeof timeLimitSeconds === 'number' && timeLimitSeconds > 0){\n\t\t\tif((currentTurn === 'white' && whiteTimeLeft === 0) || (currentTurn === 'black' && blackTimeLeft === 0)){\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(isEnPassantMove){\n\t\tconst updatedPieces = pieces.reduce((results, piece)=>{\n\t\t\tif(samePosition(piece.position, grabPosition)){\n\t\t\t\tpiece.enPassant=false;\n\t\t\t\tpiece.position.x=x;\n\t\t\t\tpiece.position.y=y;\n\t\t\t\tresults.push(piece);\n\t\t\t}else if(!samePosition(piece.position, {x, y: y-pawnDirecion})){\n\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t}\n\t\t\t\tresults.push(piece);\n\t\t\t}\n\t\t\treturn results;\n\t\t}, [] as Piece[])\n\t\tsetPieces(updatedPieces);\n\t\tsetLastMove({from: grabPosition, to: {x, y}});\n\t\tsetClockStarted(true);\n\t\tif(!online || online.status !== 'playing'){\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t} else {\n\t\t\tonline.socket?.emit('move', { roomId: online.roomId, from: grabPosition, to: {x, y} });\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t}\n\t}else if(validMove){\n\t\tconst updatedPieces = pieces.reduce((results,piece)=>{\n\t\t\tif(samePosition(piece.position, grabPosition)){\n\t\t\t\tpiece.enPassant = Math.abs(grabPosition.y-y)===2 &&(piece.type===PieceType.PAWN)\n\t\t\t\tpiece.position.x=x;\n\t\t\t\tpiece.position.y=y;\n\t\t\t\tlet promotionRow = piece.team === TeamType.OUR ? 7:0;\n\t\t\t\tif(y===promotionRow && piece.type === PieceType.PAWN){\n\t\t\t\t\tmodalRef.current?.classList.remove(\"hidden\")\n\t\t\t\t\tsetPromotionPawn(piece);\n\t\t\t\t\tsetAwaitingPromotion(true);\n\t\t\t\t}\n\t\t\t\tresults.push(piece);\n\t\t\t}else if(!(samePosition(piece.position, {x,y}))){\n\t\t\t\tif(piece.type===PieceType.PAWN){\n\t\t\t\t\tpiece.enPassant=false;\n\t\t\t\t}\n\t\t\t\tresults.push(piece);\n\t\t\t}\n\t\t\treturn results;\n\t\t}, [] as Piece[])\n\t\tsetPieces(updatedPieces);\n\t\tsetLastMove({from: grabPosition, to: {x, y}});\n\t\tif(!(awaitingPromotion)){\n\t\t\tsetClockStarted(true);\n\t\t\tif(!online || online.status !== 'playing'){\n\t\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t\t} else {\n\t\t\t\tonline.socket?.emit('move', { roomId: online.roomId, from: grabPosition, to: {x, y} });\n\t\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction pickTileFromCursor(clientX: number, clientY: number){\n\tconst chessboard = chessboardRef.current;\n\tif(!chessboard) return { x: -1, y: -1 };\n\tconst rect = chessboard.getBoundingClientRect();\n\tconst relX = clientX - rect.left;\n\tconst relY = clientY - rect.top;\n\tconst x = Math.floor(relX / tileSize);\n\tconst y = Math.abs(Math.ceil((relY - rect.height)/tileSize)); // invert axis\n\treturn { x, y };\n}\n\nfunction grabPiece(e: React.MouseEvent){\n\tupdateValidMoves();\n\n\tconst chessboard = chessboardRef.current;\n\tconst element = e.target as HTMLElement;\n\n\tif(element.classList.contains(\"chess-piece\") && chessboard){\n\t\tconst { x: grabX, y: grabY } = pickTileFromCursor(e.clientX, e.clientY);\n\t\tconst pieceAtTile = pieces.find(p => samePosition(p.position, {x: grabX, y: grabY}));\n\n\t\t// Online restrictions\n\t\tif(online && online.status === 'playing'){\n\t\t\tconst myTeam = getAllowedTeamForMe();\n\t\t\tif(!isMyTurn() || myTeam === null || !pieceAtTile || pieceAtTile.team !== myTeam){\n\t\t\t\treturn; // can't grab\n\t\t\t}\n\t\t}\n\n\t\tsetGrabPosition({x:grabX, y:grabY})\n\n\t\tconst x = e.clientX - tileSize/2;\n\t\tconst y = e.clientY - tileSize/2;\n\t\telement.style.position = 'fixed';\n\t\telement.style.left = `${x}px`;\n\t\telement.style.top = `${y}px`;\n\t\telement.style.zIndex = '1000';\n\n\t\tsetActivePiece(element);\n\t}\n}\n\nfunction movePiece(e: React.MouseEvent){\n\tconst chessboard = chessboardRef.current;\n\tif(activePiece && chessboard){\n\t\tconst x = e.clientX - tileSize/2;\n\t\tconst y = e.clientY - tileSize/2;\n\n\t\tconst rect = chessboard.getBoundingClientRect();\n\t\tconst minX = rect.left;\n\t\tconst minY = rect.top;\n\t\tconst maxX = rect.right - tileSize;\n\t\tconst maxY = rect.bottom - tileSize;\n\n\t\tactivePiece.style.position = 'fixed';\n\n\t\t// x axis limits\n\t\tif(x < minX){\n\t\t\tactivePiece.style.left = `${minX}px`;\n\t\t} else if(x > maxX){\n\t\t\tactivePiece.style.left = `${maxX}px`;\n\t\t} else{\n\t\t\tactivePiece.style.left = `${x}px`;\n\t\t}\n\n\t\t// y axis limits\n\t\tif(y < minY){\n\t\t\tactivePiece.style.top = `${minY}px`;\n\t\t} else if(y > maxY){\n\t\t\tactivePiece.style.top = `${maxY}px`;\n\t\t} else{\n\t\t\tactivePiece.style.top = `${y}px`;\n\t\t}\n\t\t\n\t}\n}\n\nfunction dropPiece(e: React.MouseEvent){\n\tconst chessboard = chessboardRef.current;\n\tif(activePiece && chessboard){\n\t\tconst target = pickTileFromCursor(e.clientX, e.clientY);\n\t\tperformMove(target);\n\t\t//reset piece position\n\t\tactivePiece.style.position= 'relative';\n\t\tactivePiece.style.removeProperty(\"top\");\n\t\tactivePiece.style.removeProperty(\"left\");\n\t\tactivePiece.style.removeProperty(\"z-index\");\n\t\tsetActivePiece(null);\n\t}\n}\n\n\tfunction promotePawn(pieceType: PieceType){\n\t\tif(promotionPawn===undefined){\n\t\t\treturn;\n\t\t}\n\t\tconst updatedPieces = pieces.reduce((results, piece) =>{\n\n\t\t\tif(samePosition(piece.position, promotionPawn?.position)){\n\t\t\t\tpiece.type = pieceType;\n\t\t\t\tconst teamType = (piece.team === TeamType.OUR)?\"w\":\"b\";\n\t\t\t\tlet image = \"\";\n\t\t\t\tswitch(pieceType){\n\t\t\t\t\tcase PieceType.ROOK:{\n\t\t\t\t\t\timage = \"rook\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase PieceType.BISHOP:{\n\t\t\t\t\t\timage = \"bishop\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase PieceType.KNIGHT:{\n\t\t\t\t\t\timage = \"knight\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase PieceType.QUEEN:{\n\t\t\t\t\t\timage = \"queen\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpiece.image = `assets/images/${image}_${teamType}.svg`;\n\t\t\t}\n\n\t\t\tresults.push(piece);\n\t\t\treturn results;\n\t\t}, [] as Piece[])\n\t\tsetPieces(updatedPieces);\n\t\tmodalRef.current?.classList.add(\"hidden\");\n\t\tsetAwaitingPromotion(false);\n\t\tif(online && online.status === 'playing' && lastMove){\n\t\t\tonline.socket?.emit('move', {\n\t\t\t\troomId: online.roomId,\n\t\t\t\tfrom: lastMove.from,\n\t\t\t\tto: lastMove.to,\n\t\t\t\tpromotionType: pieceType\n\t\t\t});\n\t\t\tsetClockStarted(true);\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t} else if(!online || online.status !== 'playing'){\n\t\t\tsetCurrentTurn(prev => prev === 'white' ? 'black' : 'white');\n\t\t}\n\t}\n\n\n\tfunction promotionTeamType(){\n\t\treturn (promotionPawn?.team === TeamType.OUR)?\"w\":\"b\";\n\t}\n\n\tfunction formatTime(totalSeconds: number | null){\n\t\tif(totalSeconds === null) return '--:--';\n\t\tconst m = Math.floor(totalSeconds / 60);\n\t\tconst s = totalSeconds % 60;\n\t\treturn `${m}:${s.toString().padStart(2,'0')}`;\n\t}\n\n\tlet board = [];\n\n\tfor(let y= YAXIS.length-1;y>=0;y--){\n\t\tfor(let x=0;x<XAXIS.length;x++){\n\n\t\t\t// check whether the sum of numbers x,y is even to draw each tile\n\t\t\tconst isEven = (x+y+2)%2===0;\n\t\t\tlet img = undefined;\n\n\t\t\tpieces.forEach(p=> {\n\t\t\t\tif(samePosition(p.position, {x:x, y:y})){\n\t\t\t\t\timg=p.image\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tlet currentPiece = pieces.find(p=> samePosition(p.position,grabPosition));\n\t\t\tlet highlight = (currentPiece?.possibleMoves) ? currentPiece.possibleMoves.some(p=> samePosition(p, {x:x , y:y})): false;\n\t\t\tconst targetHasPiece = pieces.some(p => samePosition(p.position, {x, y}));\n\t\t\tconst capture = highlight && targetHasPiece;\n\t\t\tconst handleClick = highlight ? () => performMove({ x, y }) : undefined;\n\t\t\t\n\t\t\tboard.push(\n\t\t\t\t\t<Tile key={`${x},${y}`} isEven={isEven} image={img} highlight={highlight} capture={capture} onClick={handleClick}/> \n\t\t\t)\n\t\t}\n\t}\n\n\n\treturn(\n\t\t<>\n\t\t<div id=\"pawn-promotion-modal\" className=\"hidden\" ref={modalRef}>\n\t\t\t<div className=\"modal-body\">\n\n\t\t\t<img onClick={()=> promotePawn(PieceType.ROOK)} src={`assets/images/rook_${promotionTeamType()}.svg`} alt=\"promote rook\"/>\n\t\t\t<img onClick={()=> promotePawn(PieceType.BISHOP)} src={`assets/images/bishop_${promotionTeamType()}.svg`} alt=\"promote bishop\"/>\n\t\t\t<img onClick={()=> promotePawn(PieceType.KNIGHT)} src={`assets/images/knight_${promotionTeamType()}.svg`} alt=\"promote knight\"/>\n\t\t\t<img onClick={()=> promotePawn(PieceType.QUEEN)} src={`assets/images/queen_${promotionTeamType()}.svg`} alt=\"promote queen\"/>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div className=\"board-layout\">\n\n\t\t\t{/* timer panel */}\n\t\t\t{(online?.status === 'playing') && (\n\t\t\t<div className=\"timer-panel\">\n\t\t\t\t<div className={`timer-block ${currentTurn==='black' ? 'active' : ''}`}>\n\t\t\t\t\t<div className=\"timer-label\">Black</div>\n\t\t\t\t\t<div className=\"timer-value\">{formatTime(blackTimeLeft)}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className={`timer-block ${currentTurn==='white' ? 'active' : ''}`}>\n\t\t\t\t\t<div className=\"timer-label\">White</div>\n\t\t\t\t\t<div className=\"timer-value\">{formatTime(whiteTimeLeft)}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t)}\n\n\n\t\t\t<div \n\t\t\t\tonMouseMove={(e)=>movePiece(e)} \n\t\t\t\tonMouseDown={e=> grabPiece(e)} \n\t\t\t\tonMouseUp={(e)=> dropPiece(e)}\n\t\t\t\tid=\"chessboard\"\n\t\t\t\tref={chessboardRef}>\n\t\t\t\t\t{board}\n\t\t\t</div>\n\t\t</div>\n\t\t</>\n\t)\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}