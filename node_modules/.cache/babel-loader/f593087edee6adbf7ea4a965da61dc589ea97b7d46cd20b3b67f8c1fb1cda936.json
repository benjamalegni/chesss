{"ast":null,"code":"import{PieceType,TeamType,samePosition}from\"../Constants\";import{GetPossiblePawnMoves,pawnMove}from\"./rules/PawnRules\";import{knightMove,GetPossibleKnightMoves}from\"./rules/KnightRules\";import{bishopMove,GetPossibleBishopMoves}from\"./rules/BishopRules\";import{rookMove,GetPossibleRookMoves}from\"./rules/RookRules\";import{GetPossibleKingMoves,kingMove}from\"./rules/KingRules\";export default class Referee{static tileIsOccupied(position,boardState){const piece=boardState.find(p=>samePosition(p.position,position));return piece?true:false;}static tileIsOccupiedByOpponent(position,boardState,team){const piece=boardState.find(p=>samePosition(p.position,position)&&p.team!==team);return piece?true:false;}static isEnPassantMove(initialPosition,desiredPosition,type,team,boardState){const pawnDirection=team===TeamType.OUR?1:-1;if(type===PieceType.PAWN){if(desiredPosition.y-initialPosition.y===pawnDirection&&(desiredPosition.x-initialPosition.x===-1||desiredPosition.x-initialPosition.x===1)){const piece=boardState.find(p=>p.position.x===desiredPosition.x&&p.position.y===desiredPosition.y-pawnDirection&&p.enPassant);return piece?true:false;}}return false;}//pawn promotion\nisValidMove(initialPosition,desiredPosition,type,team,boardState){console.log(`referee checking.. piece: ${type}`);//movement\nconst dx=desiredPosition.x-initialPosition.x;// difference in X axis\nconst dy=desiredPosition.y-initialPosition.y;// difference in Y axis\nconst stepX=dx>0?1:-1;// direction of X axis: 1 or -1\nconst stepY=dy>0?1:-1;// direction of Y axis: 1 or -1\nswitch(type){case PieceType.PAWN:{return pawnMove(initialPosition,desiredPosition,team,dx,dy,boardState);}case PieceType.KNIGHT:{return knightMove(initialPosition,desiredPosition,team,dx,dy,boardState);}case PieceType.BISHOP:{return bishopMove(initialPosition,desiredPosition,team,dx,dy,stepX,stepY,boardState);}case PieceType.ROOK:{return rookMove(initialPosition,desiredPosition,team,dx,dy,stepX,stepY,boardState);}case PieceType.QUEEN:{return bishopMove(initialPosition,desiredPosition,team,dx,dy,stepX,stepY,boardState)||rookMove(initialPosition,desiredPosition,team,dx,dy,stepX,stepY,boardState);}case PieceType.KING:{return kingMove(initialPosition,desiredPosition,team,dx,dy,stepX,stepY,boardState);}}}getValidMoves(piece,boardState){switch(piece.type){case PieceType.PAWN:return GetPossiblePawnMoves(piece,boardState);case PieceType.KNIGHT:return GetPossibleKnightMoves(piece,boardState);case PieceType.BISHOP:return GetPossibleBishopMoves(piece,boardState);case PieceType.ROOK:return GetPossibleRookMoves(piece,boardState);case PieceType.QUEEN:return GetPossibleBishopMoves(piece,boardState).concat(GetPossibleRookMoves(piece,boardState));case PieceType.KING:return GetPossibleKingMoves(piece,boardState);default:return[];}}}","map":{"version":3,"names":["PieceType","TeamType","samePosition","GetPossiblePawnMoves","pawnMove","knightMove","GetPossibleKnightMoves","bishopMove","GetPossibleBishopMoves","rookMove","GetPossibleRookMoves","GetPossibleKingMoves","kingMove","Referee","tileIsOccupied","position","boardState","piece","find","p","tileIsOccupiedByOpponent","team","isEnPassantMove","initialPosition","desiredPosition","type","pawnDirection","OUR","PAWN","y","x","enPassant","isValidMove","console","log","dx","dy","stepX","stepY","KNIGHT","BISHOP","ROOK","QUEEN","KING","getValidMoves","concat"],"sources":["/home/Outer/Documents/chesss/src/referee/Referee.ts"],"sourcesContent":["import { PieceType, TeamType, Piece, Position, samePosition} from \"../Constants\";\nimport { GetPossiblePawnMoves,pawnMove } from \"./rules/PawnRules\";\nimport { knightMove, GetPossibleKnightMoves } from \"./rules/KnightRules\";\nimport { bishopMove, GetPossibleBishopMoves } from \"./rules/BishopRules\";\nimport { rookMove, GetPossibleRookMoves } from \"./rules/RookRules\";\nimport { GetPossibleKingMoves, kingMove } from \"./rules/KingRules\";\n\nexport default class Referee{\n    static tileIsOccupied(position:Position, boardState: Piece[]):boolean{\n        const piece = boardState.find((p) => samePosition(p.position,position));\n        return piece?true:false;\n    }\n\n    static tileIsOccupiedByOpponent(position:Position, boardState:Piece[], team:TeamType):boolean{\n        const piece = boardState.find((p)=>samePosition(p.position, position) && p.team!==team);\n        return piece?true:false;\n    }\n\n    static isEnPassantMove(initialPosition: Position, desiredPosition:Position, type:PieceType, team:TeamType, boardState:Piece[]):boolean{\n        const pawnDirection = (team === TeamType.OUR)? 1:-1;\n\n        if(type===PieceType.PAWN){\n            if(desiredPosition.y-initialPosition.y===pawnDirection && ((desiredPosition.x-initialPosition.x===-1) || (desiredPosition.x-initialPosition.x===1))){\n                const piece = boardState.find((p)=> p.position.x===desiredPosition.x && (p.position.y===desiredPosition.y - pawnDirection && p.enPassant));\n\n                return piece?true:false;\n            }\n        }\n        return false;\n    }\n\n//pawn promotion\n\n\n\n\n    isValidMove(initialPosition:Position, desiredPosition: Position, type:PieceType, team:TeamType, boardState:Piece[]){\n        console.log(`referee checking.. piece: ${type}`);\n        //movement\n        const dx = desiredPosition.x - initialPosition.x; // difference in X axis\n        const dy = desiredPosition.y - initialPosition.y; // difference in Y axis\n        const stepX = dx > 0 ? 1 : -1; // direction of X axis: 1 or -1\n        const stepY = dy > 0 ? 1 : -1; // direction of Y axis: 1 or -1\n\n        switch(type){\n            case PieceType.PAWN:{\n            return pawnMove(initialPosition, desiredPosition, team, dx, dy, boardState);\n            }\n            case PieceType.KNIGHT:{\n            return knightMove(initialPosition, desiredPosition, team, dx, dy, boardState);\n            }\n            case PieceType.BISHOP:{\n            return bishopMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState);\n            }\n            case PieceType.ROOK:{\n            return rookMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState);\n            }\n            case PieceType.QUEEN:{\n            return (bishopMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState) || rookMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState));\n            }\n            case PieceType.KING:{\n            return kingMove(initialPosition, desiredPosition, team, dx, dy, stepX, stepY, boardState);\n            }\n        }\n\n    }\n \n    getValidMoves(piece:Piece, boardState:Piece[]) : Position[]{\n        switch(piece.type){\n            case PieceType.PAWN:\n                return GetPossiblePawnMoves(piece,boardState);\n            case PieceType.KNIGHT:\n                return GetPossibleKnightMoves(piece,boardState);\n            case PieceType.BISHOP:\n                return GetPossibleBishopMoves(piece,boardState);\n            case PieceType.ROOK:\n                return GetPossibleRookMoves(piece,boardState);\n            case PieceType.QUEEN:\n                return GetPossibleBishopMoves(piece,boardState).concat(GetPossibleRookMoves(piece,boardState));\n            case PieceType.KING:\n                return GetPossibleKingMoves(piece,boardState);\n\n\n            default:\n                return [];\n        }       \n\n\n    }\n\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}