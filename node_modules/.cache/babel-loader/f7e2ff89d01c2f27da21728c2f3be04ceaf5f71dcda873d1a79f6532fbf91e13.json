{"ast":null,"code":"import Referee from\"../Referee\";export const kingMove=(initialPosition,desiredPosition,team,dx,dy,stepX,stepY,boardState)=>{//one tile movement\nif(Math.abs(dx)<=1&&Math.abs(dy)<=1){return!Referee.tileIsOccupied(desiredPosition,boardState)||Referee.tileIsOccupiedByOpponent(desiredPosition,boardState,team);}return false;};export const GetPossibleKingMoves=(piece,boardState)=>{const possibleMoves=[];for(let y=-1;y<=1;y++){for(let x=-1;x<=1;x++){if(x===0&&y===0){continue;}const desiredPosition={x:piece.position.x+x,y:piece.position.y+y};if(kingMove(piece.position,desiredPosition,piece.team,x,y,0,0,boardState)){possibleMoves.push(desiredPosition);}}}return possibleMoves;};","map":{"version":3,"names":["Referee","kingMove","initialPosition","desiredPosition","team","dx","dy","stepX","stepY","boardState","Math","abs","tileIsOccupied","tileIsOccupiedByOpponent","GetPossibleKingMoves","piece","possibleMoves","y","x","position","push"],"sources":["/home/Outer/Documents/chesss/src/referee/rules/KingRules.ts"],"sourcesContent":["import { Piece, Position, TeamType } from \"../../Constants\";\nimport Referee from \"../Referee\"\n\nexport const kingMove=(initialPosition:Position, desiredPosition: Position, team:TeamType,dx:number, dy:number, stepX:number, stepY:number, boardState:Piece[]):boolean=>{\n            //one tile movement\n            if (Math.abs(dx) <= 1 && Math.abs(dy) <= 1){\n                return (!Referee.tileIsOccupied(desiredPosition, boardState) || Referee.tileIsOccupiedByOpponent(desiredPosition, boardState, team));\n            }\n        return false;\n}\n\nexport const GetPossibleKingMoves = (piece:Piece, boardState:Piece[]):Position[]=>{\n    const possibleMoves:Position[] = [];\n \n    for(let y=-1;y<=1;y++){\n        for(let x=-1;x<=1;x++){\n            if(x===0 && y===0){\n                continue;\n            }\n            const desiredPosition:Position = {\n                x:piece.position.x + x,\n                y:piece.position.y + y\n            }\n\n            if(kingMove(piece.position, desiredPosition, piece.team, x, y, 0, 0, boardState)){\n                possibleMoves.push(desiredPosition);\n            }\n        }\n    }\n    return possibleMoves;\n}"],"mappings":"AACA,MAAO,CAAAA,OAAO,KAAM,YAAY,CAEhC,MAAO,MAAM,CAAAC,QAAQ,CAACA,CAACC,eAAwB,CAAEC,eAAyB,CAAEC,IAAa,CAACC,EAAS,CAAEC,EAAS,CAAEC,KAAY,CAAEC,KAAY,CAAEC,UAAkB,GAAW,CAC7J;AACA,GAAIC,IAAI,CAACC,GAAG,CAACN,EAAE,CAAC,EAAI,CAAC,EAAIK,IAAI,CAACC,GAAG,CAACL,EAAE,CAAC,EAAI,CAAC,CAAC,CACvC,MAAQ,CAACN,OAAO,CAACY,cAAc,CAACT,eAAe,CAAEM,UAAU,CAAC,EAAIT,OAAO,CAACa,wBAAwB,CAACV,eAAe,CAAEM,UAAU,CAAEL,IAAI,CAAC,CACvI,CACJ,MAAO,MAAK,CACpB,CAAC,CAED,MAAO,MAAM,CAAAU,oBAAoB,CAAGA,CAACC,KAAW,CAAEN,UAAkB,GAAc,CAC9E,KAAM,CAAAO,aAAwB,CAAG,EAAE,CAEnC,IAAI,GAAI,CAAAC,CAAC,CAAC,CAAC,CAAC,CAACA,CAAC,EAAE,CAAC,CAACA,CAAC,EAAE,CAAC,CAClB,IAAI,GAAI,CAAAC,CAAC,CAAC,CAAC,CAAC,CAACA,CAAC,EAAE,CAAC,CAACA,CAAC,EAAE,CAAC,CAClB,GAAGA,CAAC,GAAG,CAAC,EAAID,CAAC,GAAG,CAAC,CAAC,CACd,SACJ,CACA,KAAM,CAAAd,eAAwB,CAAG,CAC7Be,CAAC,CAACH,KAAK,CAACI,QAAQ,CAACD,CAAC,CAAGA,CAAC,CACtBD,CAAC,CAACF,KAAK,CAACI,QAAQ,CAACF,CAAC,CAAGA,CACzB,CAAC,CAED,GAAGhB,QAAQ,CAACc,KAAK,CAACI,QAAQ,CAAEhB,eAAe,CAAEY,KAAK,CAACX,IAAI,CAAEc,CAAC,CAAED,CAAC,CAAE,CAAC,CAAE,CAAC,CAAER,UAAU,CAAC,CAAC,CAC7EO,aAAa,CAACI,IAAI,CAACjB,eAAe,CAAC,CACvC,CACJ,CACJ,CACA,MAAO,CAAAa,aAAa,CACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}